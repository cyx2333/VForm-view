{"version":3,"file":"js/1876.aba3582c.js","mappings":"8FAAA,IAAIA,EAAMC,EAAQ,OACdC,EAAWD,EAAAA,OAAAA,KACXE,EAAwBF,EAAAA,OAAAA,EAExBG,EAAO,WACPC,KAAKC,eAAiBH,EACtBE,KAAKE,WAAaF,KAAKG,iBAC3B,EACAR,EAAIS,SAASL,EAAMF,GAEnB,WACIG,KAAKK,iBAAmB,IACxBL,KAAKM,IAAM,mBAEXN,KAAKO,kBAAoB,SAASC,EAAOC,EAAMC,GAC3C,IAAIC,EAASX,KAAKY,WAAWH,GACzBI,EAAS,KAETC,EAAgBd,KAAKe,eAAeC,cAAcP,EAAMD,GACxDS,EAASH,EAAcG,OAM3B,OAJGR,EAAKS,MAAM,aACVP,GAAU,MAGVM,EAAOE,QAA0C,WAAhCF,EAAOA,EAAOE,OAAO,GAAGC,MAKhC,SAATZ,IACIC,EAAKS,MAAM,qDAELT,EAAKS,MAAM,gCADjBP,GAAUE,EAGJJ,EAAKS,MAAM,WACjBP,GAAU,OAVPA,CAgBf,CACH,EAAEU,KAAKtB,EAAKuB,WAEbC,EAAQxB,KAAOA,C,wBC7Cf,IAAIJ,EAAMC,EAAQ,OACd4B,EAAqB5B,EAAAA,OAAAA,EACrB6B,EAAgB,kFAEhB3B,EAAwB,WACxB,IAAI4B,EAAY,CAAC,CACbC,KAAM,KACNC,OAAQ,oDACRC,SAAU,4BAUVD,EAASF,EAAUI,KAAI,SAASC,GAChC,OAAOA,EAAEH,MACb,IAAGI,KAAK,KACJH,EAAWH,EAAUI,KAAI,SAASC,GAClC,OAAOA,EAAEF,QACb,IAAGG,KAAK,KAGRhC,KAAKiC,OAAS,CACVC,MAAQ,CAAC,CACLC,MAAO,mBACPC,MAAO,2BACR,CACCD,MAAQ,UACRC,MAAQ,QACT,CACCD,MAAQ,UACRC,MAAQ,MAAQR,EAAS,SAAWC,EAAW,QAChD,CACCM,MAAQ,UACRC,MAAQ,OACT,CACCD,MAAQ,SACRC,MAAQ,OACRC,KAAO,aACR,CACCF,MAAQ,SACRC,MAAQ,IACRC,KAAO,YACR,CACCF,MAAQ,OACRC,MAAQ,kBACRC,KAAO,CAAC,CACJF,MAAQ,OACRC,MAAQ,QACT,CACCD,MAAQ,qBACRC,MAAQ,WACT,CACCD,MAAQ,QACRC,MAAQ,GACRC,KAAO,WAEZ,CACCF,MAAQ,UACRC,MAAQ,WACT,CACCD,MAAQ,UACRC,MAAQ,WACRC,KAAO,cACR,CACCF,MAAQ,UACRC,MAAQ,OACRC,KAAO,UAEX,UAAc,CAAE,CACZF,MAAQ,2BACRC,MAAQX,GACT,CACCU,MAAQ,SACRC,MAAQ,OACRC,KAAO,SACR,CACCC,aAAe,WAEnB,SAAa,CAAC,CACVH,MAAQ,2BACRC,MAAQX,GACT,CACCU,MAAQ,SACRC,MAAQ,QACRC,KAAQ,YACT,CACCF,MAAQ,SACRC,MAAQ,MACRC,KAAQ,SACT,CACCC,aAAc,WAElB,aAAe,CAAC,CACZH,MAAQ,UACRC,MAAQ,IACRC,KAAO,SACR,CACCF,MAAQ,UACRC,MAAQ,MACT,CACCD,MAAQ,SACRC,MAAQ,OACT,CACCE,aAAe,YAGvBtC,KAAKuC,gBACT,EAEA5C,EAAIS,SAASN,EAAuB0B,GAEpCD,EAAQ,EAAwBzB,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/gherkin.js","webpack://admin/./node_modules/ace-code/src/mode/gherkin_highlight_rules.js"],"sourcesContent":["var oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar GherkinHighlightRules = require(\"./gherkin_highlight_rules\").GherkinHighlightRules;\n\nvar Mode = function() {\n    this.HighlightRules = GherkinHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gherkin\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        var space2 = \"  \";\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        \n        if(line.match(\"[ ]*\\\\|\")) {\n            indent += \"| \";\n        }\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        \n\n        if (state == \"start\") {\n            if (line.match(\"Scenario:|Feature:|Scenario Outline:|Background:\")) {\n                indent += space2;\n            } else if(line.match(\"(Given|Then).+(:)$|Examples:\")) {\n                indent += space2;\n            } else if(line.match(\"\\\\*.+\")) {\n                indent += \"* \";\n            } \n        }\n        \n\n        return indent;\n    };\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","var oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar stringEscape =  \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\nvar GherkinHighlightRules = function() {\n    var languages = [{\n        name: \"en\",\n        labels: \"Feature|Background|Scenario(?: Outline)?|Examples\",\n        keywords: \"Given|When|Then|And|But\"\n    }\n    /* TODO find a way to enable this when first line in the file is # language: pl\n    , {\n        name: \"pl\",\n        labels: \"Właściwość|Funkcja|Aspekt|Potrzeba biznesowa|Założenia|Scenariusz|Szablon scenariusza|Przykłady\",\n        keywords: \"Mając|Zakładając(?:, że)?|Jeżeli|Jeśli|Gdy|Kiedy|Wtedy|Oraz|I|Ale\"\n    }\n    */];\n    \n    var labels = languages.map(function(l) {\n        return l.labels;\n    }).join(\"|\");\n    var keywords = languages.map(function(l) {\n        return l.keywords;\n    }).join(\"|\");\n    \n    // need to include constant ints\n    this.$rules = {\n        start : [{\n            token: \"constant.numeric\",\n            regex: \"(?:(?:[1-9]\\\\d*)|(?:0))\"\n        }, {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"keyword\",\n            regex : \"(?:\" + labels + \"):|(?:\" + keywords + \")\\\\b\"\n        }, {\n            token : \"keyword\",\n            regex : \"\\\\*\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : '\"',\n            next : \"qqstring\"\n        }, {\n            token : \"text\",\n            regex : \"^\\\\s*(?=@[\\\\w])\",\n            next : [{\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }, {\n                token : \"variable.parameter\",\n                regex : \"@[\\\\w]+\"\n            }, {\n                token : \"empty\",\n                regex : \"\",\n                next : \"start\"\n            }]\n        }, {\n            token : \"comment\",\n            regex : \"<[^>]+>\"\n        }, {\n            token : \"comment\",\n            regex : \"\\\\|(?=.)\",\n            next : \"table-item\"\n        }, {\n            token : \"comment\",\n            regex : \"\\\\|$\",\n            next : \"start\"\n        }],\n        \"qqstring3\" : [ {\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\", // multi line \"\"\" string end\n            regex : '\"{3}',\n            next : \"start\"\n        }, {\n            defaultToken : \"string\"\n        }],\n        \"qqstring\" : [{\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qqstring\"\n        }, {\n            token : \"string\",\n            regex : '\"|$',\n            next  : \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"table-item\" : [{\n            token : \"comment\",\n            regex : /$/,\n            next : \"start\"\n        }, {\n            token : \"comment\",\n            regex : /\\|/\n        }, {\n            token : \"string\",\n            regex : /\\\\./\n        }, {\n            defaultToken : \"string\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(GherkinHighlightRules, TextHighlightRules);\n\nexports.GherkinHighlightRules = GherkinHighlightRules;\n"],"names":["oop","require","TextMode","GherkinHighlightRules","Mode","this","HighlightRules","$behaviour","$defaultBehaviour","inherits","lineCommentStart","$id","getNextLineIndent","state","line","tab","indent","$getIndent","space2","tokenizedLine","getTokenizer","getLineTokens","tokens","match","length","type","call","prototype","exports","TextHighlightRules","stringEscape","languages","name","labels","keywords","map","l","join","$rules","start","token","regex","next","defaultToken","normalizeRules"],"sourceRoot":""}