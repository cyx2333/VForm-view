{"version":3,"file":"js/4384.4c19ef42.js","mappings":"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BAAmB,CAAC,CAChBD,MAAO,wBACPC,MAAO,oFACR,CACCD,MAAO,yBACPC,MAAO,qFACR,CACCD,MAAO,uBACPC,MAAO,mFACR,CACCD,MAAO,wBACPC,MAAO,6DACR,CACCD,MAAO,CACH,yBACA,2BACA,yBAEJC,MAAO,wCAEX,cAAe,CAAC,CACZF,QAAS,UACV,CACCA,QAAS,kBACV,CACCA,QAAS,iBACV,CACCA,QAAS,gBACV,CACCA,QAAS,qBACV,CACCA,QAAS,mBACV,CACCA,QAAS,cACV,CACCA,QAAS,aACV,CACCA,QAAS,YACV,CACCA,QAAS,YACV,CACCA,QAAS,aACV,CACCA,QAAS,cACV,CACCA,QAAS,YACV,CACCA,QAAS,eACV,CACCA,QAAS,UACV,CACCA,QAAS,kBACV,CACCA,QAAS,iBACV,CACCA,QAAS,eAEb,gBAAiB,CAAC,CACdC,MAAO,yBACPC,MAAO,6EAEX,cAAe,CAAC,CACZD,MAAO,CACH,4BACA,OACA,4BACA,QAEJC,MAAO,sCACPC,KAAM,CAAC,CACHF,MAAO,CACH,mBACA,OACA,4BACA,mCAEJC,MAAO,mDACPE,KAAM,OACP,CACCJ,QAAS,kBAGjB,iBAAkB,CAAC,CACfC,MAAO,wBACPC,MAAO,8CAEX,YAAa,CAAC,CACVD,MAAO,sBACPC,MAAO,0EACR,CACCD,MAAO,4BACPC,MAAO,gDACR,CACCD,MAAO,kCACPC,MAAO,2CACR,CACCD,MAAO,6BACPC,MAAO,4CACR,CACCD,MAAO,mCACPC,MAAO,uBAEX,SAAU,CAAC,CACPD,MAAO,CACH,sBACA,OACA,wBACA,yBAEJC,MAAO,kHAEX,aAAc,CAAC,CACXD,MAAO,uBACPC,MAAO,SACR,CACCD,MAAO,+BACPC,MAAO,kBACR,CACCD,MAAO,4BACPC,MAAO,kBACR,CACCD,MAAO,kCACPC,MAAO,oDACR,CACCD,MAAO,kCACPC,MAAO,6BACR,CACCD,MAAO,+BACPC,MAAO,6CACR,CACCD,MAAO,6BACPC,MAAO,8DAEX,cAAe,CAAC,CACZD,MAAO,CACH,yBACA,OACA,4BACA,QAEJC,MAAO,sCACPC,KAAM,CAAC,CACHF,MAAO,CACH,mBACA,OACA,4BACA,sCAEJC,MAAO,kDACPE,KAAM,OACP,CACCJ,QAAS,eACV,CACCC,MAAO,mBACPC,MAAO,8BAGf,eAAgB,CAAC,CACbD,MAAO,4BACPC,MAAO,KACR,CACCD,MAAO,6BACPC,MAAO,KACR,CACCD,MAAO,uCACPC,MAAO,MACR,CACCD,MAAO,qCACPC,MAAO,OAEX,WAAY,CAAC,CACTD,MAAO,mBACPC,MAAO,oDACR,CACCD,MAAO,2BACPC,MAAO,+CACR,CACCD,MAAO,yBACPC,MAAO,2CACR,CACCD,MAAO,4BACPC,MAAO,mGACR,CACCD,MAAO,CACH,mBACA,OACA,uBACA,OACA,oBAEJC,MAAO,8EACR,CACCD,MAAO,4BACPC,MAAO,UACR,CACCD,MAAO,wBACPC,MAAO,YACR,CACCD,MAAO,0BACPC,MAAO,cACR,CACCD,MAAO,wBACPC,MAAO,YACR,CACCD,MAAO,yBACPC,MAAO,aACR,CACCD,MAAO,yBACPC,MAAO,cAEX,oBAAqB,CAAC,CAClBD,MAAO,uBACPC,MAAO,iIAEX,WAAY,CAAC,CACTD,MAAO,2BACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,2BACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,sBACV,CACCC,MAAO,gCACPC,MAAO,kBACR,CACCG,aAAc,8BAEnB,CACCJ,MAAO,2BACPC,MAAO,OACPC,KAAM,CAAC,CACHF,MAAO,2BACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,sBACV,CACCC,MAAO,gCACPC,MAAO,kBACR,CACCG,aAAc,8BAEnB,CACCJ,MAAO,0BACPC,MAAO,SACPC,KAAM,CAAC,CACHF,MAAO,0BACPC,MAAO,IACPE,KAAM,OACP,CACCC,aAAc,8BAGtB,iBAAkB,CAAC,CACfJ,MAAO,CACH,4BACA,OACA,wCAEJC,MAAO,kBACPC,KAAM,CAAC,CACHF,MAAO,CACH,OACA,mBACA,OACA,uBACA,OACA,oBAEJC,MAAO,2EACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,eACV,CACCC,MAAO,mBACPC,MAAO,wBACR,CACCF,QAAS,eACV,CACCK,aAAc,mCAGtB,gBAAiB,CAAC,CACdJ,MAAO,CACH,OACA,uBACA,wCAEJC,MAAO,2CACPC,KAAM,CAAC,CACHF,MAAO,CACH,OACA,mBACA,uBACA,OACA,oBAEJC,MAAO,iFACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,eACV,CACCC,MAAO,mBACPC,MAAO,2BACR,CACCF,QAAS,kBAGjB,WAAY,CAAC,CACTC,MAAO,uBACPC,MAAO,qCAEX,aAAc,CAAC,CACXD,MAAO,wBACPC,MAAO,wBACR,CACCD,MAAO,uBACPC,MAAO,gCACR,CACCD,MAAO,uBACPC,MAAO,yBACR,CACCD,MAAO,eACPC,MAAO,gCAIf9D,KAAKkE,gBACT,EAEAhB,EAAkBiB,SAAW,CACzBC,UAAW,CAAC,OACZC,cAAe,MACfC,KAAM,MACNC,UAAW,cAIf9E,EAAIe,SAAS0C,EAAmBQ,GAEhC5D,EAAQ,EAAoBoD,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/zig.js","webpack://admin/./node_modules/ace-code/src/mode/zig_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ZigHighlightRules = require(\"./zig_highlight_rules\").ZigHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = ZigHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/zig\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ZigHighlightRules = function() {\n    this.$rules = {\n        start: [{\n            include: \"#dummy_main\"\n        }],\n        \"#block\": [{\n            token: [\n                \"storage.type.zig\",\n                \"text\",\n                \"punctuation.section.braces.begin.zig\"\n            ],\n            regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(\\{)/,\n            push: [{\n                token: \"punctuation.section.braces.end.zig\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#dummy_main\"\n            }]\n        }],\n        \"#character_escapes\": [{\n            token: \"constant.character.escape.newline.zig\",\n            regex: /\\\\n/\n        }, {\n            token: \"constant.character.escape.carrigereturn.zig\",\n            regex: /\\\\r/\n        }, {\n            token: \"constant.character.escape.tabulator.zig\",\n            regex: /\\\\t/\n        }, {\n            token: \"constant.character.escape.backslash.zig\",\n            regex: /\\\\\\\\/\n        }, {\n            token: \"constant.character.escape.single-quote.zig\",\n            regex: /\\\\'/\n        }, {\n            token: \"constant.character.escape.double-quote.zig\",\n            regex: /\\\\\\\"/\n        }, {\n            token: \"constant.character.escape.hexidecimal.zig\",\n            regex: /\\\\x[a-fA-F\\d]{2}/\n        }, {\n            token: \"constant.character.escape.hexidecimal.zig\",\n            regex: /\\\\u\\{[a-fA-F\\d]{1,6}\\}/\n        }],\n        \"#comments\": [{\n            token: \"comment.line.documentation.zig\",\n            regex: /\\/\\/[!\\/](?=[^\\/])/,\n            push: [{\n                token: \"comment.line.documentation.zig\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                include: \"#commentContents\"\n            }, {\n                defaultToken: \"comment.line.documentation.zig\"\n            }]\n        }, {\n            token: \"comment.line.double-slash.zig\",\n            regex: /\\/\\//,\n            push: [{\n                token: \"comment.line.double-slash.zig\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                include: \"#commentContents\"\n            }, {\n                defaultToken: \"comment.line.double-slash.zig\"\n            }]\n        }],\n        \"#commentContents\": [{\n            token: \"keyword.todo.zig\",\n            regex: /\\b(?:TODO|FIXME|XXX|NOTE)\\b:?/\n        }],\n        \"#constants\": [{\n            token: \"constant.language.zig\",\n            regex: /\\b(?:null|undefined|true|false)\\b/\n        }, {\n            token: \"constant.numeric.integer.zig\",\n            regex: /\\b(?!\\.)-?[\\d_]+(?!\\.)\\b/\n        }, {\n            token: \"constant.numeric.integer.hexadecimal.zig\",\n            regex: /\\b(?!\\.)0x[a-fA-F\\d_]+(?!\\.)\\b/\n        }, {\n            token: \"constant.numeric.integer.octal.zig\",\n            regex: /\\b(?!\\.)0o[0-7_]+(?!\\.)\\b/\n        }, {\n            token: \"constant.numeric.integer.binary.zig\",\n            regex: /\\b(?!\\.)0b[01_]+(?!\\.)\\b/\n        }, {\n            token: \"constant.numeric.float.zig\",\n            regex: /(?!\\.)-?\\b[\\d_]+(?:\\.[\\d_]+)?(?:[eE][+-]?[\\d_]+)?(?!\\.)\\b/\n        }, {\n            token: \"constant.numeric.float.hexadecimal.zig\",\n            regex: /(?!\\.)-?\\b0x[a-fA-F\\d_]+(?:\\.[a-fA-F\\d_]+)?[pP]?(?:[+-]?[\\d_]+)?(?!\\.)\\b/\n        }],\n        \"#container_decl\": [{\n            token: \"entity.name.union.zig\",\n            regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*union\\s*[(\\{])/\n        }, {\n            token: \"entity.name.struct.zig\",\n            regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*struct\\s*[(\\{])/\n        }, {\n            token: \"entity.name.enum.zig\",\n            regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*(?:extern|packed)?\\b\\s*enum\\s*[(\\{])/\n        }, {\n            token: \"entity.name.error.zig\",\n            regex: /\\b(?!\\d)(?:[a-zA-Z_]\\w*|@\\\".+\\\")?(?=\\s*=\\s*error\\s*[(\\{])/\n        }, {\n            token: [\n                \"storage.type.error.zig\",\n                \"punctuation.accessor.zig\",\n                \"entity.name.error.zig\"\n            ],\n            regex: /\\b(error)(\\.)([a-zA-Z_]\\w*|@\\\".+\\\")/\n        }],\n        \"#dummy_main\": [{\n            include: \"#label\"\n        }, {\n            include: \"#function_type\"\n        }, {\n            include: \"#function_def\"\n        }, {\n            include: \"#punctuation\"\n        }, {\n            include: \"#storage_modifier\"\n        }, {\n            include: \"#container_decl\"\n        }, {\n            include: \"#constants\"\n        }, {\n            include: \"#comments\"\n        }, {\n            include: \"#strings\"\n        }, {\n            include: \"#storage\"\n        }, {\n            include: \"#keywords\"\n        }, {\n            include: \"#operators\"\n        }, {\n            include: \"#support\"\n        }, {\n            include: \"#field_decl\"\n        }, {\n            include: \"#block\"\n        }, {\n            include: \"#function_call\"\n        }, {\n            include: \"#enum_literal\"\n        }, {\n            include: \"#variables\"\n        }],\n        \"#enum_literal\": [{\n            token: \"constant.language.enum\",\n            regex: /(?!\\w|\\)|\\?|\\}|\\]|\\*|\\.)\\.(?:[a-zA-Z_]\\w*\\b|@\\\"[^\\\"]*\\\")(?!\\(|\\s*=[^=>])/\n        }],\n        \"#field_decl\": [{\n            token: [\n                \"variable.other.member.zig\",\n                \"text\",\n                \"punctuation.separator.zig\",\n                \"text\"\n            ],\n            regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n            push: [{\n                token: [\n                    \"storage.type.zig\",\n                    \"text\",\n                    \"punctuation.separator.zig\",\n                    \"keyword.operator.assignment.zig\"\n                ],\n                regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(=)|$)/,\n                next: \"pop\"\n            }, {\n                include: \"#dummy_main\"\n            }]\n        }],\n        \"#function_call\": [{\n            token: \"variable.function.zig\",\n            regex: /\\b(?!fn)(?:[a-zA-Z_]\\w*|@\\\".+\\\")(?=\\s*\\()/\n        }],\n        \"#keywords\": [{\n            token: \"keyword.control.zig\",\n            regex: /\\b(?:while|for|break|return|continue|asm|defer|errdefer|unreachable)\\b/\n        }, {\n            token: \"keyword.control.async.zig\",\n            regex: /\\b(?:async|await|suspend|nosuspend|resume)\\b/\n        }, {\n            token: \"keyword.control.conditional.zig\",\n            regex: /\\b(?:if|else|switch|try|catch|orelse)\\b/\n        }, {\n            token: \"keyword.control.import.zig\",\n            regex: /\\b(?!\\w)(?:@import|@cImport|@cInclude)\\b/\n        }, {\n            token: \"keyword.other.usingnamespace.zig\",\n            regex: /\\busingnamespace\\b/\n        }],\n        \"#label\": [{\n            token: [\n                \"keyword.control.zig\",\n                \"text\",\n                \"entity.name.label.zig\",\n                \"entity.name.label.zig\"\n            ],\n            regex: /\\b(break|continue)(\\s*:\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")\\b|\\b(?!\\d)([a-zA-Z_]\\w*|@\\\".+\\\")\\b(?=\\s*:\\s*(?:\\{|while\\b))/\n        }],\n        \"#operators\": [{\n            token: \"keyword.operator.zig\",\n            regex: /\\b!\\b/\n        }, {\n            token: \"keyword.operator.logical.zig\",\n            regex: /==|(?:!|>|<)=?/\n        }, {\n            token: \"keyword.operator.word.zig\",\n            regex: /\\b(?:and|or)\\b/\n        }, {\n            token: \"keyword.operator.assignment.zig\",\n            regex: /(?:(?:\\+|-|\\*)\\%?|\\/|%|<<|>>|&|\\|(?=[^\\|])|\\^)?=/\n        }, {\n            token: \"keyword.operator.arithmetic.zig\",\n            regex: /(?:\\+|-|\\*)\\%?|\\/(?!\\/)|%/\n        }, {\n            token: \"keyword.operator.bitwise.zig\",\n            regex: /<<|>>|&(?=[a-zA-Z_]|@\\\")|\\|(?=[^\\|])|\\^|~/\n        }, {\n            token: \"keyword.operator.other.zig\",\n            regex: /\\+\\+|\\*\\*|->|\\.\\?|\\.\\*|&(?=[a-zA-Z_]|@\\\")|\\?|\\|\\||\\.{2,3}/\n        }],\n        \"#param_list\": [{\n            token: [\n                \"variable.parameter.zig\",\n                \"text\",\n                \"punctuation.separator.zig\",\n                \"text\"\n            ],\n            regex: /([a-zA-Z_]\\w*|@\\\".+\\\")(\\s*)(:)(\\s*)/,\n            push: [{\n                token: [\n                    \"storage.type.zig\",\n                    \"text\",\n                    \"punctuation.separator.zig\",\n                    \"punctuation.section.parens.end.zig\"\n                ],\n                regex: /((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)(\\s*)(?:(,)|(\\)))/,\n                next: \"pop\"\n            }, {\n                include: \"#dummy_main\"\n            }, {\n                token: \"storage.type.zig\",\n                regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n            }]\n        }],\n        \"#punctuation\": [{\n            token: \"punctuation.separator.zig\",\n            regex: /,/\n        }, {\n            token: \"punctuation.terminator.zig\",\n            regex: /;/\n        }, {\n            token: \"punctuation.section.parens.begin.zig\",\n            regex: /\\(/\n        }, {\n            token: \"punctuation.section.parens.end.zig\",\n            regex: /\\)/\n        }],\n        \"#storage\": [{\n            token: \"storage.type.zig\",\n            regex: /\\b(?:bool|void|noreturn|type|anyerror|anytype)\\b/\n        }, {\n            token: \"storage.type.integer.zig\",\n            regex: /\\b(?!\\.)(?:[iu]\\d+|[iu]size|comptime_int)\\b/\n        }, {\n            token: \"storage.type.float.zig\",\n            regex: /\\b(?:f16|f32|f64|f128|comptime_float)\\b/\n        }, {\n            token: \"storage.type.c_compat.zig\",\n            regex: /\\b(?:c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\\b/\n        }, {\n            token: [\n                \"storage.type.zig\",\n                \"text\",\n                \"keyword.operator.zig\",\n                \"text\",\n                \"storage.type.zig\"\n            ],\n            regex: /\\b(anyframe)\\b(\\s*)((?:->)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")\\b(?!\\s*\\())?/\n        }, {\n            token: \"storage.type.function.zig\",\n            regex: /\\bfn\\b/\n        }, {\n            token: \"storage.type.test.zig\",\n            regex: /\\btest\\b/\n        }, {\n            token: \"storage.type.struct.zig\",\n            regex: /\\bstruct\\b/\n        }, {\n            token: \"storage.type.enum.zig\",\n            regex: /\\benum\\b/\n        }, {\n            token: \"storage.type.union.zig\",\n            regex: /\\bunion\\b/\n        }, {\n            token: \"storage.type.error.zig\",\n            regex: /\\berror\\b/\n        }],\n        \"#storage_modifier\": [{\n            token: \"storage.modifier.zig\",\n            regex: /\\b(?:const|var|extern|packed|export|pub|noalias|inline|noinline|comptime|volatile|align|linksection|threadlocal|allowzero)\\b/\n        }],\n        \"#strings\": [{\n            token: \"string.quoted.single.zig\",\n            regex: /\\'/,\n            push: [{\n                token: \"string.quoted.single.zig\",\n                regex: /\\'/,\n                next: \"pop\"\n            }, {\n                include: \"#character_escapes\"\n            }, {\n                token: \"invalid.illegal.character.zig\",\n                regex: /\\\\[^\\'][^\\']*?/\n            }, {\n                defaultToken: \"string.quoted.single.zig\"\n            }]\n        }, {\n            token: \"string.quoted.double.zig\",\n            regex: /c?\\\"/,\n            push: [{\n                token: \"string.quoted.double.zig\",\n                regex: /\\\"/,\n                next: \"pop\"\n            }, {\n                include: \"#character_escapes\"\n            }, {\n                token: \"invalid.illegal.character.zig\",\n                regex: /\\\\[^\\'][^\\']*?/\n            }, {\n                defaultToken: \"string.quoted.double.zig\"\n            }]\n        }, {\n            token: \"string.quoted.other.zig\",\n            regex: /c?\\\\\\\\/,\n            push: [{\n                token: \"string.quoted.other.zig\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string.quoted.other.zig\"\n            }]\n        }],  \n        \"#function_type\": [{\n            token: [\n                \"storage.type.function.zig\",\n                \"text\",\n                \"punctuation.section.parens.begin.zig\"\n            ],\n            regex: /\\b(fn)(\\s*)(\\()/,\n            push: [{\n                token: [\n                    \"text\",\n                    \"storage.type.zig\",\n                    \"text\",\n                    \"keyword.operator.zig\",\n                    \"text\",\n                    \"storage.type.zig\"\n                ],\n                regex: /(\\s*)(?:([a-zA-Z_]\\w*|@\\\".+\\\"))?(\\s*)((?:!)?)(\\s*)([a-zA-Z_]\\w*|@\\\".+\\\")/,\n                next: \"pop\"\n            }, {\n                include: \"#label\"\n            }, {\n                include: \"#param_list\"\n            }, {\n                token: \"storage.type.zig\",\n                regex: /[a-zA-Z_]\\w*|@\\\".+\\\"/\n            }, {\n                include: \"#dummy_main\"\n            }, {\n                defaultToken: \"meta.function.parameters.zig\"\n            }]\n        }],\n        \"#function_def\": [{\n            token: [\n                \"text\",\n                \"entity.name.function\",\n                \"punctuation.section.parens.begin.zig\"\n            ],\n            regex: /(?=fn\\s+)(\\s+)([a-zA-Z_]\\w*|@\\\".+\\\")(\\()/,\n            push: [{\n                token: [\n                    \"text\",\n                    \"storage.type.zig\",\n                    \"keyword.operator.zig\",\n                    \"text\",\n                    \"storage.type.zig\"\n                ],\n                regex: /(\\s*)((?:[a-zA-Z_][\\w.]*|@\\\".+\\\")?)((?:!)?)(\\s*)(?:([a-zA-Z_][\\w.]*|@\\\".+\\\")?)/,\n                next: \"pop\"\n            }, {\n                include: \"#label\"\n            }, {\n                include: \"#param_list\"\n            }, {\n                token: \"storage.type.zig\",\n                regex: /[a-zA-Z_][\\w.]*|@\\\".+\\\"/\n            }, {\n                include: \"#dummy_main\"\n            }]\n        }],\n        \"#support\": [{\n            token: \"support.function.zig\",\n            regex: /\\b@(?!\\w|\\\"|[0-9])[a-zA-Z_]\\w*\\b/\n        }],\n        \"#variables\": [{\n            token: \"variable.constant.zig\",\n            regex: /\\b[_A-Z][_A-Z0-9]+\\b/\n        }, {\n            token: \"entity.name.type.zig\",\n            regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*_t\\b/\n        }, {\n            token: \"entity.name.type.zig\",\n            regex: /\\b[A-Z][a-zA-Z0-9]*\\b/\n        }, {\n            token: \"variable.zig\",\n            regex: /\\b[_a-zA-Z][_a-zA-Z0-9]*\\b/\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nZigHighlightRules.metaData = {\n    fileTypes: [\"zig\"],\n    keyEquivalent: \"^~Z\",\n    name: \"Zig\",\n    scopeName: \"source.zig\"\n};\n\n\noop.inherits(ZigHighlightRules, TextHighlightRules);\n\nexports.ZigHighlightRules = ZigHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","ZigHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","TextHighlightRules","$rules","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","keyEquivalent","name","scopeName"],"sourceRoot":""}