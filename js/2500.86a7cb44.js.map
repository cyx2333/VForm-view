{"version":3,"file":"js/2500.86a7cb44.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/ion.js","webpack://admin/./node_modules/ace-code/src/mode/ion_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/matching_brace_outdent.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS GENERATED BY 'ligand' USING 'mode.js'\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./ion_highlight_rules\").IonHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function () {\n    this.HighlightRules = HighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function () {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n        start: \"/*\",\n        end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/ion\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/*\n  THIS FILE WAS GENERATED BY 'ligand' USING 'mode_highlight_rules.js'\n*/\n\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n\n    var IonHighlightRules = function() {\n        // constant.language.bool.ion\n        var k_keywords_bool =\n            \"TRUE|FALSE\";\n        var k_bool = k_keywords_bool;\n\n        // constant.language.null.ion\n        var k_keywords_null =\n            \"NULL.NULL|NULL.BOOL|NULL.INT|NULL.FLOAT|NULL.DECIMAL|NULL.TIMESTAMP|NULL.STRING|NULL.SYMBOL|NULL.BLOB|NULL.CLOB|\"\n            +\"NULL.STRUCT|NULL.LIST|NULL.SEXP|NULL\";\n        var k_null = k_keywords_null;\n\n\n        var keywordMapper = this.createKeywordMapper({\n            \"constant.language.bool.ion\": k_bool,\n            \"constant.language.null.ion\": k_null\n        }, \"constant.other.symbol.identifier.ion\", true);\n\n        var keywordMapperRule = {\n            token : keywordMapper,\n            regex : \"\\\\b\\\\w+(?:\\\\.\\\\w+)?\\\\b\"\n        };\n\n        this.$rules = {\n          \"start\": [\n            {\n              \"include\": \"value\"\n            }\n          ],\n          \"value\": [\n            {\n              \"include\": \"whitespace\"\n            },\n            {\n              \"include\": \"comment\"\n            },\n            {\n              \"include\": \"annotation\"\n            },\n            {\n              \"include\": \"string\"\n            },\n            {\n              \"include\": \"number\"\n            },\n            {\n              \"include\": \"keywords\"\n            },\n            {\n              \"include\": \"symbol\"\n            },\n            {\n              \"include\": \"clob\"\n            },\n            {\n              \"include\": \"blob\"\n            },\n            {\n              \"include\": \"struct\"\n            },\n            {\n              \"include\": \"list\"\n            },\n            {\n              \"include\": \"sexp\"\n            }\n          ],\n          \"sexp\": [\n            {\n              \"token\": \"punctuation.definition.sexp.begin.ion\",\n              \"regex\": \"\\\\(\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.sexp.end.ion\",\n                  \"regex\": \"\\\\)\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"include\": \"comment\"\n                },\n                {\n                  \"include\": \"value\"\n                },\n                {\n                  \"token\": \"storage.type.symbol.operator.ion\",\n                  \"regex\": \"[\\\\!\\\\#\\\\%\\\\&\\\\*\\\\+\\\\-\\\\./\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\^\\\\`\\\\|\\\\~]+\"\n                }\n              ]\n            }\n          ],\n          \"comment\": [\n            {\n              \"token\": \"comment.line.ion\",\n              \"regex\": \"//[^\\\\n]*\"\n            },\n            {\n              \"token\": \"comment.block.ion\",\n              \"regex\": \"/\\\\*\",\n              \"push\": [\n                {\n                  \"token\": \"comment.block.ion\",\n                  \"regex\": \"[*]/\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"token\": \"comment.block.ion\",\n                  \"regex\": \"[^*/]+\"\n                },\n                {\n                  \"token\": \"comment.block.ion\",\n                  \"regex\": \"[*/]+\"\n                }\n              ]\n            }\n          ],\n          \"list\": [\n            {\n              \"token\": \"punctuation.definition.list.begin.ion\",\n              \"regex\": \"\\\\[\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.list.end.ion\",\n                  \"regex\": \"\\\\]\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"include\": \"comment\"\n                },\n                {\n                  \"include\": \"value\"\n                },\n                {\n                  \"token\": \"punctuation.definition.list.separator.ion\",\n                  \"regex\": \",\"\n                }\n              ]\n            }\n          ],\n          \"struct\": [\n            {\n              \"token\": \"punctuation.definition.struct.begin.ion\",\n              \"regex\": \"\\\\{\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.struct.end.ion\",\n                  \"regex\": \"\\\\}\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"include\": \"comment\"\n                },\n                {\n                  \"include\": \"value\"\n                },\n                {\n                  \"token\": \"punctuation.definition.struct.separator.ion\",\n                  \"regex\": \",|:\"\n                }\n              ]\n            }\n          ],\n          \"blob\": [\n            {\n              \"token\": [\n                \"punctuation.definition.blob.begin.ion\",\n                \"string.other.blob.ion\",\n                \"punctuation.definition.blob.end.ion\"\n              ],\n              \"regex\": \"(\\\\{\\\\{)([^\\\"]*)(\\\\}\\\\})\"\n            }\n          ],\n          \"clob\": [\n            {\n              \"token\": [\n                \"punctuation.definition.clob.begin.ion\",\n                \"string.other.clob.ion\",\n                \"punctuation.definition.clob.end.ion\"\n              ],\n              \"regex\": \"(\\\\{\\\\{)(\\\"[^\\\"]*\\\")(\\\\}\\\\})\"\n            }\n          ],\n          \"symbol\": [\n            {\n              \"token\": \"storage.type.symbol.quoted.ion\",\n              \"regex\": \"(['])((?:(?:\\\\\\\\')|(?:[^']))*?)(['])\"\n            },\n            {\n              \"token\": \"storage.type.symbol.identifier.ion\",\n              \"regex\": \"[\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*\"\n            }\n          ],\n          \"number\": [\n            {\n              \"token\": \"constant.numeric.timestamp.ion\",\n              \"regex\": \"\\\\d{4}(?:-\\\\d{2})?(?:-\\\\d{2})?T(?:\\\\d{2}:\\\\d{2})(?::\\\\d{2})?(?:\\\\.\\\\d+)?(?:Z|[-+]\\\\d{2}:\\\\d{2})?\"\n            },\n            {\n              \"token\": \"constant.numeric.timestamp.ion\",\n              \"regex\": \"\\\\d{4}-\\\\d{2}-\\\\d{2}T?\"\n            },\n            {\n              \"token\": \"constant.numeric.integer.binary.ion\",\n              \"regex\": \"-?0[bB][01](?:_?[01])*\"\n            },\n            {\n              \"token\": \"constant.numeric.integer.hex.ion\",\n              \"regex\": \"-?0[xX][0-9a-fA-F](?:_?[0-9a-fA-F])*\"\n            },\n            {\n              \"token\": \"constant.numeric.float.ion\",\n              \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)(?:\\\\.(?:\\\\d(?:_?\\\\d)*)?)?(?:[eE][+-]?\\\\d+)\"\n            },\n            {\n              \"token\": \"constant.numeric.float.ion\",\n              \"regex\": \"(?:[-+]inf)|(?:nan)\"\n            },\n            {\n              \"token\": \"constant.numeric.decimal.ion\",\n              \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)(?:(?:(?:\\\\.(?:\\\\d(?:_?\\\\d)*)?)(?:[dD][+-]?\\\\d+)|\\\\.(?:\\\\d(?:_?\\\\d)*)?)|(?:[dD][+-]?\\\\d+))\"\n            },\n            {\n              \"token\": \"constant.numeric.integer.ion\",\n              \"regex\": \"-?(?:0|[1-9](?:_?\\\\d)*)\"\n            }\n          ],\n          \"string\": [\n            {\n              \"token\": [\n                \"punctuation.definition.string.begin.ion\",\n                \"string.quoted.double.ion\",\n                \"punctuation.definition.string.end.ion\"\n              ],\n              \"regex\": \"([\\\"])((?:(?:\\\\\\\\\\\")|(?:[^\\\"]))*?)([\\\"])\"\n            },\n            {\n              \"token\": \"punctuation.definition.string.begin.ion\",\n              \"regex\": \"'{3}\",\n              \"push\": [\n                {\n                  \"token\": \"punctuation.definition.string.end.ion\",\n                  \"regex\": \"'{3}\",\n                  \"next\": \"pop\"\n                },\n                {\n                  \"token\": \"string.quoted.triple.ion\",\n                  \"regex\": \"(?:\\\\\\\\'|[^'])+\"\n                },\n                {\n                  \"token\": \"string.quoted.triple.ion\",\n                  \"regex\": \"'\"\n                }\n              ]\n            }\n          ],\n          \"annotation\": [\n            {\n              \"token\": [\n                \"variable.language.annotation.ion\",\n                \"punctuation.definition.annotation.ion\"\n              ],\n              \"regex\": /('(?:[^'\\\\]|\\\\.)*')\\s*(::)/\n            },\n            {\n              \"token\": [\n                \"variable.language.annotation.ion\",\n                \"punctuation.definition.annotation.ion\"\n              ],\n              \"regex\": \"([\\\\$_a-zA-Z][\\\\$_a-zA-Z0-9]*)\\\\s*(::)\"\n            }\n          ],\n          \"whitespace\": [\n            {\n              \"token\": \"text.ion\",\n              \"regex\": \"\\\\s+\"\n            }\n          ]\n        } ;\n        this.$rules[\"keywords\"] = [keywordMapperRule];\n\n\n        this.normalizeRules();\n    };\n\n    oop.inherits(IonHighlightRules, TextHighlightRules);\n\n    exports.IonHighlightRules = IonHighlightRules;\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","HighlightRules","MatchingBraceOutdent","CStyleFoldMode","Mode","$outdent","$behaviour","$defaultBehaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","$getIndent","checkOutdent","input","autoOutdent","doc","$id","TextHighlightRules","IonHighlightRules","k_keywords_bool","k_bool","k_keywords_null","k_null","keywordMapper","createKeywordMapper","keywordMapperRule","token","regex","$rules","normalizeRules","column","openBracePos","findMatchingBracket"],"sourceRoot":""}