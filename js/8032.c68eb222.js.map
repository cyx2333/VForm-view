{"version":3,"file":"js/8032.c68eb222.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/latte.js","webpack://admin/./node_modules/ace-code/src/mode/latte_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar HtmlMode = require(\"./html\").Mode;\nvar LatteHighlightRules = require(\"./latte_highlight_rules\").LatteHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\nvar Mode = function() {\n    HtmlMode.call(this);\n    this.HighlightRules = LatteHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n};\noop.inherits(Mode, HtmlMode);\n\n(function() {\n    this.blockComment = {start: \"{*\", end: \"*}\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*\\{(?:if|else|elseif|ifset|elseifset|ifchanged|switch|case|foreach|iterateWhile|for|while|first|last|sep|try|capture|spaceless|snippet|block|define|embed|snippetArea)\\b[^{]*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return /^\\s+\\{\\/$/.test(line + input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n    };\n\n    this.$id = \"ace/mode/latte\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LatteHighlightRules = function() {\n    // inherit from html\n    HtmlHighlightRules.call(this);\n\n    // add latte start tags to the HTML\n    for (var rule in this.$rules) {\n        this.$rules[rule].unshift(\n            {\n                token : \"comment.start.latte\",\n                regex : \"\\\\{\\\\*\",\n                push : [{\n                    token : \"comment.end.latte\",\n                    regex : \".*\\\\*\\\\}\",\n                    next : \"pop\"\n                }, {\n                    defaultToken : \"comment\"\n                }]\n            }, {\n                token : \"meta.tag.punctuation.tag-open.latte\",\n                regex : \"\\\\{(?![\\\\s'\\\"{}]|$)/?\",\n                push : [{\n                    token : \"meta.tag.latte\",\n                    regex : \"(?:_|=|[a-z]\\\\w*(?:[.:-]\\\\w+)*)?\",\n                    next: [{\n                        token : \"meta.tag.punctuation.tag-close.latte\",\n                        regex : \"\\\\}\",\n                        next : \"pop\"\n                    }, {\n                        include: \"latte-content\"\n                    }]\n                }]\n        });\n    }\n\n    // add n:attribute to HTML tag\n    this.$rules['tag_stuff'].unshift({\n        token : \"meta.attribute.latte\",\n        regex : \"n:[\\\\w-]+\",\n        next : [{\n            include: \"tag_whitespace\"\n        }, {\n            token : \"keyword.operator.attribute-equals.xml\",\n            regex : \"=\",\n            next : [{\n                token : \"string.attribute-value.xml\",\n                regex : \"'\",\n                next : [\n                    {token : \"string.attribute-value.xml\", regex: \"'\", next: \"tag_stuff\"},\n                    {include : \"latte-content\"}\n                ]\n            }, {\n                token : \"string.attribute-value.xml\",\n                regex : '\"',\n                next : [\n                    {token : \"string.attribute-value.xml\", regex: '\"', next: \"tag_stuff\"},\n                    {include : \"latte-content\"}\n                ]\n            }, {\n                token : \"text.tag-whitespace.xml\",\n                regex : \"\\\\s\",\n                next: \"tag_stuff\"\n            }, {\n                token : \"meta.tag.punctuation.tag-close.xml\",\n                regex : \"/?>\",\n                next: \"tag_stuff\"\n            }, {\n               include : \"latte-content\"\n            }]\n        }, {\n            token : \"empty\",\n            regex : \"\",\n            next : \"tag_stuff\"\n        }]\n    });\n\n\n    // PHP content\n    this.$rules[\"latte-content\"] = [\n        {\n            token : \"comment.start.latte\", // multi line comment\n            regex : \"\\\\/\\\\*\",\n            push : [\n                {\n                    token : \"comment.end.latte\",\n                    regex : \"\\\\*\\\\/\",\n                    next : \"pop\"\n                }, {\n                    defaultToken : \"comment\"\n                }\n            ]\n        }, {\n            token : \"string.start\", // \" string start\n            regex : '\"',\n            push : [\n                {\n                    token : \"constant.language.escape\",\n                    regex : '\\\\\\\\(?:[nrtvef\\\\\\\\\"$]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2})'\n                }, {\n                    token : \"variable\",\n                    regex : /\\$[\\w]+(?:\\[[\\w\\]+]|[=\\-]>\\w+)?/\n                }, {\n                    token : \"variable\",\n                    regex : /\\$\\{[^\"\\}]+\\}?/           // this is wrong but ok for now\n                },\n                {token : \"string.end\", regex : '\"', next : \"pop\"},\n                {defaultToken : \"string\"}\n            ]\n        }, {\n            token : \"string.start\", // ' string start\n            regex : \"'\",\n            push : [\n                {token : \"constant.language.escape\", regex : /\\\\['\\\\]/},\n                {token : \"string.end\", regex : \"'\", next : \"pop\"},\n                {defaultToken : \"string\"}\n            ]\n        }, {\n            token : \"keyword.control\",\n            regex : \"\\\\b(?:INF|NAN|and|or|xor|AND|OR|XOR|clone|new|instanceof|return|continue|break|as)\\\\b\"\n        }, {\n            token : \"constant.language\",\n            regex : \"\\\\b(?:true|false|null|TRUE|FALSE|NULL)\\\\b\"\n        }, {\n            token : \"variable\",\n            regex : /\\$\\w+/\n        }, {\n            token : \"constant.numeric\",\n            regex : \"[+-]?[0-9]+(?:\\\\.[0-9]+)?(?:e[0-9]+)?\"\n        }, {\n            token : [\"support.class\", \"keyword.operator\"],\n            regex : \"\\\\b(\\\\w+)(::)\"\n        }, {\n            token : \"constant.language\", // constants\n            regex : \"\\\\b(?:[A-Z0-9_]+)\\\\b\"\n        }, {\n            token : \"string.unquoted\",\n            regex : \"\\\\w+(?:-+\\\\w+)*\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[[({]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\])}]\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"::|=>|->|\\\\?->|\\\\?\\\\?->|\\\\+\\\\+|--|<<|>>|<=>|<=|>=|===|!==|==|!=|<>|&&|\\\\|\\\\||\\\\?\\\\?|\\\\?>|\\\\*\\\\*|\\\\.\\\\.\\\\.|[^'\\\"]\" // =>, any char except quotes\n        }\n    ];\n\n    this.normalizeRules();\n};\n\noop.inherits(LatteHighlightRules, TextHighlightRules);\n\nexports.LatteHighlightRules = LatteHighlightRules;\n"],"names":["oop","require","HtmlMode","LatteHighlightRules","MatchingBraceOutdent","Mode","call","this","HighlightRules","$outdent","inherits","blockComment","start","end","getNextLineIndent","state","line","tab","indent","$getIndent","match","checkOutdent","input","test","autoOutdent","doc","row","$id","prototype","exports","HtmlHighlightRules","TextHighlightRules","rule","$rules","unshift","token","regex","push","next","defaultToken","include","normalizeRules"],"sourceRoot":""}