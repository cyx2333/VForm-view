{"version":3,"file":"js/4260.841a6ccf.js","mappings":"2GAEA,IAAIA,EAAMC,EAAQ,OACdC,EAAQD,EAAAA,OAAAA,EACRE,EAAeF,EAAAA,OAAAA,SAEfG,EAAWC,EAAQ,EAAW,WAClC,EACAL,EAAIM,SAASF,EAAUD,GAEvB,WAEII,KAAKC,mBAAqB,gCAE1BD,KAAKE,mBAAqB,SAASC,EAASC,EAAWC,GACnD,IAAIC,EAAKN,KAAKC,mBACVM,EAAOJ,EAAQK,QAAQH,GAEvBI,EAAIF,EAAKG,MAAMJ,GAEnB,GAAKG,EAAL,CAEA,IAAIE,EAAYF,EAAE,GAAK,IAEnBG,EAAcL,EAAKM,OACnBC,EAASX,EAAQY,YACjBC,EAAWX,EACXY,EAASZ,EAEb,QAASA,EAAMS,EAEX,GADAP,EAAOJ,EAAQK,QAAQH,IACnB,QAAQa,KAAKX,GAAjB,CAGA,GADAE,EAAIF,EAAKG,MAAMJ,GACXG,GAAwC,IAAnCA,EAAE,GAAGU,YAAYR,EAAW,GACjC,MAEJM,EAASZ,CALG,CAQhB,GAAIY,EAASD,EAAU,CACnB,IAAII,EAAYjB,EAAQK,QAAQS,GAAQJ,OACxC,OAAO,IAAIlB,EAAMqB,EAAUJ,EAAaK,EAAQG,EACpD,CAvBc,CAwBlB,CAEH,EAAEC,KAAKxB,EAASyB,U,wBC5CjB,IAAI7B,EAAMC,EAAQ,OACd6B,EAAW7B,EAAAA,OAAAA,KACX8B,EAAqB9B,EAAAA,OAAAA,EACrBG,EAAWH,EAAAA,OAAAA,EAEX+B,EAAO,WACPzB,KAAK0B,eAAiBF,EACtBxB,KAAK2B,aAAe,IAAI9B,EACxBG,KAAK4B,WAAa5B,KAAK6B,iBAC3B,EACApC,EAAIM,SAAS0B,EAAMF,GAEnB,WACIvB,KAAK8B,iBAAmB,IACxB9B,KAAK+B,IAAM,eACd,EAAEV,KAAKI,EAAKH,WAEbxB,EAAQ2B,KAAOA,C,wBCjBf,IAAIhC,EAAMC,EAAQ,OACdsC,EAAqBtC,EAAAA,OAAAA,EAErB8B,EAAqB,WACrB,IAAIS,EAAgBjC,KAAKkC,oBAAoB,CACzC,4BAA6B,cAC9B,cAECC,EAAe,wCAEnBnC,KAAKoC,OAAS,CACd,MAAS,CACL,CACIC,MAAO,eACPC,MAAO,QAEX,CACID,MAAQ,SACRC,MAAQ,SACRC,KAAQ,YAEZ,CACIF,MAAO,CAAC,0BACRC,MAAO,oCAEX,CACID,MAAO,CAAC,0BACRC,MAAO,8BAEX,CACID,MAAQJ,EACRK,MAAQH,GAEZ,CACGE,MAAQ,oBACRC,MAAO,kDAEV,CACGD,MAAO,wBACPC,MAAO,sBAGd,SAAa,CACT,CACID,MAAQ,SACRC,MAAQ,QACRC,KAAQ,YAEZ,CACIF,MAAQ,2BACRC,MAAQ,mBAEZ,CACID,MAAQ,SACRC,MAAQ,MACRC,KAAQ,SAEZ,CACIC,aAAc,WAK1B,EAEA/C,EAAIM,SAASyB,EAAoBQ,GAEjClC,EAAQ,EAAqB0B,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/ini.js","webpack://admin/./node_modules/ace-code/src/mode/toml.js","webpack://admin/./node_modules/ace-code/src/mode/toml_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function() {\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^\\s*\\[([^\\])]*)]\\s*(?:$|[;#])/;\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var re = this.foldingStartMarker;\n        var line = session.getLine(row);\n        \n        var m = line.match(re);\n        \n        if (!m) return;\n        \n        var startName = m[1] + \".\";\n        \n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            if (/^\\s*$/.test(line))\n                continue;\n            m = line.match(re);\n            if (m && m[1].lastIndexOf(startName, 0) !== 0)\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar TomlHighlightRules = require(\"./toml_highlight_rules\").TomlHighlightRules;\nvar FoldMode = require(\"./folding/ini\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = TomlHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/toml\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar TomlHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n        \"constant.language.boolean\": \"true|false\"\n    }, \"identifier\");\n\n    var identifierRe = \"[a-zA-Z\\\\$_\\u00a1-\\uffff][a-zA-Z\\\\d\\\\$_\\u00a1-\\uffff]*\\\\b\";\n\n    this.$rules = {\n    \"start\": [\n        {\n            token: \"comment.toml\",\n            regex: /#.*$/\n        },\n        {\n            token : \"string\",\n            regex : '\"(?=.)',\n            next  : \"qqstring\"\n        },\n        {\n            token: [\"variable.keygroup.toml\"],\n            regex: \"(?:^\\\\s*)(\\\\[\\\\[([^\\\\]]+)\\\\]\\\\])\"\n        },\n        {\n            token: [\"variable.keygroup.toml\"],\n            regex: \"(?:^\\\\s*)(\\\\[([^\\\\]]+)\\\\])\"\n        },\n        {\n            token : keywordMapper,\n            regex : identifierRe\n        },\n        {\n           token : \"support.date.toml\",\n           regex: \"\\\\d{4}-\\\\d{2}-\\\\d{2}(T)\\\\d{2}:\\\\d{2}:\\\\d{2}(Z)\"\n        },\n        {\n           token: \"constant.numeric.toml\",\n           regex: \"-?\\\\d+(\\\\.?\\\\d+)?\"\n        }\n    ],\n    \"qqstring\" : [\n        {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qqstring\"\n        },\n        {\n            token : \"constant.language.escape\",\n            regex : '\\\\\\\\[0tnr\"\\\\\\\\]'\n        },\n        {\n            token : \"string\",\n            regex : '\"|$',\n            next  : \"start\"\n        },\n        {\n            defaultToken: \"string\"\n        }\n    ]\n    };\n\n};\n\noop.inherits(TomlHighlightRules, TextHighlightRules);\n\nexports.TomlHighlightRules = TomlHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","inherits","this","foldingStartMarker","getFoldWidgetRange","session","foldStyle","row","re","line","getLine","m","match","startName","startColumn","length","maxRow","getLength","startRow","endRow","test","lastIndexOf","endColumn","call","prototype","TextMode","TomlHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","TextHighlightRules","keywordMapper","createKeywordMapper","identifierRe","$rules","token","regex","next","defaultToken"],"sourceRoot":""}