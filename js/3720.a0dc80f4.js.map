{"version":3,"file":"js/3720.a0dc80f4.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/basic.js","webpack://admin/./node_modules/ace-code/src/mode/basic_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/basic.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar BasicHighlightRules = require(\"./basic_highlight_rules\").BasicHighlightRules;\nvar FoldMode = require(\"./folding/basic\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = BasicHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n    this.indentKeywords = this.foldingRules.indentKeywords;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = [\"REM\"];\n\n    this.getMatching = function(session, row, column, tokenRange) {\n        if (row == undefined) {\n            var pos = session.selection.lead;\n            column = pos.column;\n            row = pos.row;\n        }\n        if (tokenRange == undefined)\n            tokenRange = true;\n\n        var startToken = session.getTokenAt(row, column);\n        if (startToken) {\n            var val = startToken.value.toLowerCase();\n            if (val in this.indentKeywords)\n                return this.foldingRules.basicBlock(session, row, column, tokenRange);\n        }\n    };\n\n    this.$id = \"ace/mode/basic\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar BasicHighlightRules = function () {\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword.control\": \"FOR|TO|NEXT|GOSUB|RETURN|IF|THEN|ELSE|GOTO|ON|WHILE|WEND|TRON|TROFF\",\n        \"entity.name\": \"Auto|Call|Chain|Clear|Close|Common|Cont|Data|MERGE|ALL|Delete|DIM|EDIT|END|ERASE|ERROR|FIELD|\"\n            + \"GET|INPUT|KILL|LET|LIST|LLIST|LOAD|LSET|RSET|MERGE|NEW|NULL|OPEN|OUT|POKE|PRINT|PUT|RANDOMIZE|READ|\"\n            + \"RENUM|RESTORE|RESUME|RUN|SAVE|STOP|SWAP|WAIT|WIDTH\",\n        \"keyword.operator\": \"Mod|And|Not|Or|Xor|Eqv|Imp\",\n        \"support.function\": \"ABS|ASC|ATN|CDBL|CINT|COS|CSNG|CVI|CVS|CVD|EOF|EXP|FIX|FRE|INP|INSTR|INT|LEN|LOC|LOG|LPOS|\"\n            + \"PEEK|POS|RND|SGN|SIN|SPC|SQR|TAB|TAN|USR|VAL|VARPTR\"\n    }, \"identifier\", true);\n\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"string\",\n                regex: /\"(?:\\\\.|[^\"\\\\])*\"/\n            },\n            {\n                token: \"support.function\",\n                regex: /(HEX|CHR|INPUT|LEFT|MID|MKI|MKS|MKD|OCT|RIGHT|SPACE|STR|STRING)\\$/\n            }, {\n                token: \"entity.name\",\n                regex: /(?:DEF\\s(?:SEG|USR|FN[a-zA-Z]+)|LINE\\sINPUT|L?PRINT#?(?:\\sUSING)?|MID\\$|ON\\sERROR\\sGOTO|OPTION\\sBASE|WRITE#?|DATE\\$|INKEY\\$|TIME\\$)/\n            }, {\n                token: \"variable\",\n                regex: /[a-zA-Z][a-zA-Z0-9_]{0,38}[$%!#]?(?=\\s*=)/\n            }, {\n                token: \"keyword.operator\",\n                regex: /\\\\|=|\\^|\\*|\\/|\\+|\\-|<|>|-/\n            }, {\n                token: \"paren.lparen\",\n                regex: /[([]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[\\)\\]]/\n            }, {\n                token: \"constant.numeric\",\n                regex: /[+-]?\\d+(\\.\\d+)?([ED][+-]?\\d+)?(?:[!#])?/\n            }, {\n                token: \"constant.numeric\", //hexal, octal\n                regex: /&[HO]?[0-9A-F]+/\n            }, {\n                token: \"comment\",\n                regex: /REM\\s+.*$/\n            }, {\n                regex: \"\\\\w+\",\n                token: keywordMapper\n            },{\n                token: \"punctiation\",\n                regex: /[,;]/\n\n            }\n        ]\n\n    };\n    this.normalizeRules();\n};\n\noop.inherits(BasicHighlightRules, TextHighlightRules);\n\nexports.BasicHighlightRules = BasicHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    this.indentKeywords = {\n        \"tron\": 1,\n        \"while\": 1,\n        \"for\": 1,\n        \"troff\": -1,\n        \"wend\": -1,\n        \"next\": -1\n    };\n\n    this.foldingStartMarker = /(?:\\s|^)(tron|while|for)\\b/i;\n    this.foldingStopMarker = /(?:\\b)(troff|next|wend)\\b/i;\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n        var line = session.getLine(row);\n        var isStart = this.foldingStartMarker.test(line);\n        var isEnd = this.foldingStopMarker.test(line);\n        if (isStart || isEnd) {\n            var match = (isEnd) ? this.foldingStopMarker.exec(line) : this.foldingStartMarker.exec(line);\n            var keyword = match && match[1].toLowerCase();\n            if (keyword) {\n                var type = session.getTokenAt(row, match.index + 2).type;\n                if (type === \"keyword.control\")\n                    return this.basicBlock(session, row, match.index + 2);\n            }\n        }\n    };\n\n\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var isStart = this.foldingStartMarker.test(line);\n        var isEnd = this.foldingStopMarker.test(line);\n        if (isStart && !isEnd) {\n            var match = this.foldingStartMarker.exec(line);\n            var keyword = match && match[1].toLowerCase();\n            if (keyword) {\n                var type = session.getTokenAt(row, match.index + 2).type;\n                if (type == \"keyword.control\") {\n                    return \"start\";\n                }\n            }\n        }\n        if (foldStyle != \"markbeginend\" || !isEnd || isStart && isEnd)\n            return \"\";\n\n        var match = line.match(this.foldingStopMarker);\n        var keyword = match && match[1].toLowerCase();\n        if (this.indentKeywords[keyword]) {\n            if (session.getTokenAt(row, match.index + 2).type === \"keyword.control\")\n                return \"end\";\n        }\n\n        return \"\";\n    };\n\n    this.basicBlock = function(session, row, column, tokenRange) {\n        var stream = new TokenIterator(session, row, column);\n\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"keyword.control\")\n            return;\n\n        var val = token.value.toLowerCase();\n        var stack = [val];\n        var dir = this.indentKeywords[val];\n\n        if (!dir)\n            return;\n\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            val = token.value.toLowerCase();\n            if (token.type !== \"keyword.control\" || !this.indentKeywords[val])\n                continue;\n            var level = dir * this.indentKeywords[val];\n\n            if (level > 0) {\n                stack.unshift(val);\n            } else if (level <= 0) {\n                stack.shift();\n            }\n            if (stack.length === 0) {\n                break;\n            }\n        }\n\n        if (!token)\n            return null;\n\n        if (tokenRange)\n            return stream.getCurrentTokenRange();\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        else\n            return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","BasicHighlightRules","FoldMode","Mode","this","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","indentKeywords","inherits","lineCommentStart","getMatching","session","row","column","tokenRange","undefined","pos","selection","lead","startToken","getTokenAt","val","value","toLowerCase","basicBlock","$id","call","prototype","exports","TextHighlightRules","keywordMapper","createKeywordMapper","$rules","token","regex","normalizeRules","BaseFoldMode","Range","TokenIterator","foldingStartMarker","foldingStopMarker","getFoldWidgetRange","foldStyle","line","getLine","isStart","test","isEnd","match","exec","keyword","type","index","getFoldWidget","stream","getCurrentToken","stack","dir","startColumn","getCurrentTokenColumn","length","startRow","step","stepBackward","stepForward","level","unshift","shift","getCurrentTokenRange","getCurrentTokenRow"],"sourceRoot":""}