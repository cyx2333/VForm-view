{"version":3,"file":"js/1302.1c0bb3d1.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/dockerfile.js","webpack://admin/./node_modules/ace-code/src/mode/dockerfile_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/sh.js","webpack://admin/./node_modules/ace-code/src/mode/sh_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar ShMode = require(\"./sh\").Mode;\nvar DockerfileHighlightRules = require(\"./dockerfile_highlight_rules\").DockerfileHighlightRules;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    ShMode.call(this);\n    \n    this.HighlightRules = DockerfileHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, ShMode);\n\n(function() {\n    this.$id = \"ace/mode/dockerfile\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar ShHighlightRules = require(\"./sh_highlight_rules\").ShHighlightRules;\n\nvar DockerfileHighlightRules = function() {\n    ShHighlightRules.call(this);\n\n    var startRules = this.$rules.start;\n    for (var i = 0; i < startRules.length; i++) {\n        if (startRules[i].token == \"variable.language\") {\n            startRules.splice(i, 0, {\n                token: \"constant.language\",\n                regex: \"(?:^(?:FROM|MAINTAINER|RUN|CMD|EXPOSE|ENV|ADD|ENTRYPOINT|VOLUME|USER|WORKDIR|ONBUILD|COPY|LABEL)\\\\b)\",\n                caseInsensitive: true\n            });\n            break;\n        }\n    }\n    \n};\n\noop.inherits(DockerfileHighlightRules, ShHighlightRules);\n\nexports.DockerfileHighlightRules = DockerfileHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ShHighlightRules = require(\"./sh_highlight_rules\").ShHighlightRules;\nvar Range = require(\"../range\").Range;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = ShHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n   \n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n\n        if (!tokens)\n            return false;\n\n        // ignore trailing comments\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n\n        if (!last)\n            return false;\n\n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        // outdenting in sh is slightly different because it always applies\n        // to the next line and only of a new line is inserted\n\n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/sh\";\n    this.snippetFileId = \"ace/snippets/sh\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar reservedKeywords = exports.reservedKeywords = (\n        '!|{|}|case|do|done|elif|else|'+\n        'esac|fi|for|if|in|then|until|while|'+\n        '&|;|export|local|read|typeset|unset|'+\n        'elif|select|set|function|declare|readonly'\n    );\n\nvar languageConstructs = exports.languageConstructs = (\n    '[|]|alias|bg|bind|break|builtin|'+\n     'cd|command|compgen|complete|continue|'+\n     'dirs|disown|echo|enable|eval|exec|'+\n     'exit|fc|fg|getopts|hash|help|history|'+\n     'jobs|kill|let|logout|popd|printf|pushd|'+\n     'pwd|return|set|shift|shopt|source|'+\n     'suspend|test|times|trap|type|ulimit|'+\n     'umask|unalias|wait'\n);\n\nvar ShHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": reservedKeywords,\n        \"support.function.builtin\": languageConstructs,\n        \"invalid.deprecated\": \"debugger\"\n    }, \"identifier\");\n\n    var integer = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    // var integer = \"(?:\" + decimalInteger + \")\";\n\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" +  intPart + \")\" + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var fileDescriptor = \"(?:&\" + intPart + \")\";\n\n    var variableName = \"[a-zA-Z_][a-zA-Z0-9_]*\";\n    var variable = \"(?:\" + variableName + \"(?==))\";\n\n    var builtinVariable = \"(?:\\\\$(?:SHLVL|\\\\$|\\\\!|\\\\?))\";\n\n    var func = \"(?:\" + variableName + \"\\\\s*\\\\(\\\\))\";\n\n    this.$rules = {\n        \"start\" : [{\n            token : \"constant\",\n            regex : /\\\\./\n        }, {\n            token : [\"text\", \"comment\"],\n            regex : /(^|\\s)(#.*)$/\n        }, {\n            token : \"string.start\",\n            regex : '\"',\n            push : [{\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:[$`\"\\\\]|$)/\n            }, {\n                include : \"variables\"\n            }, {\n                token : \"keyword.operator\",\n                regex : /`/ // TODO highlight `\n            }, {\n                token : \"string.end\",\n                regex : '\"',\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token : \"string\",\n            regex : \"\\\\$'\",\n            push : [{\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:[abeEfnrtv\\\\'\"]|x[a-fA-F\\d]{1,2}|u[a-fA-F\\d]{4}([a-fA-F\\d]{4})?|c.|\\d{1,3})/\n            }, {\n                token : \"string\",\n                regex : \"'\",\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            regex : \"<<<\",\n            token : \"keyword.operator\"\n        }, {\n            stateName: \"heredoc\",\n            regex : \"(<<-?)(\\\\s*)(['\\\"`]?)([\\\\w\\\\-]+)(['\\\"`]?)\",\n            onMatch : function(value, currentState, stack) {\n                var next = value[2] == '-' ? \"indentedHeredoc\" : \"heredoc\";\n                var tokens = value.split(this.splitRegex);\n                stack.push(next, tokens[4]);\n                return [\n                    {type:\"constant\", value: tokens[1]},\n                    {type:\"text\", value: tokens[2]},\n                    {type:\"string\", value: tokens[3]},\n                    {type:\"support.class\", value: tokens[4]},\n                    {type:\"string\", value: tokens[5]}\n                ];\n            },\n            rules: {\n                heredoc: [{\n                    onMatch:  function(value, currentState, stack) {\n                        if (value === stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack[0] || \"start\";\n                            return \"support.class\";\n                        }\n                        this.next = \"\";\n                        return \"string\";\n                    },\n                    regex: \".*$\",\n                    next: \"start\"\n                }],\n                indentedHeredoc: [{\n                    token: \"string\",\n                    regex: \"^\\t+\"\n                }, {\n                    onMatch:  function(value, currentState, stack) {\n                        if (value === stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack[0] || \"start\";\n                            return \"support.class\";\n                        }\n                        this.next = \"\";\n                        return \"string\";\n                    },\n                    regex: \".*$\",\n                    next: \"start\"\n                }]\n            }\n        }, {\n            regex : \"$\",\n            token : \"empty\",\n            next : function(currentState, stack) {\n                if (stack[0] === \"heredoc\" || stack[0] === \"indentedHeredoc\")\n                    return stack[0];\n                return currentState;\n            }\n        }, {\n            token : [\"keyword\", \"text\", \"text\", \"text\", \"variable\"],\n            regex : /(declare|local|readonly)(\\s+)(?:(-[fixar]+)(\\s+))?([a-zA-Z_][a-zA-Z0-9_]*\\b)/\n        }, {\n            token : \"variable.language\",\n            regex : builtinVariable\n        }, {\n            token : \"variable\",\n            regex : variable\n        }, {\n            include : \"variables\"\n        }, {\n            token : \"support.function\",\n            regex : func\n        }, {\n            token : \"support.function\",\n            regex : fileDescriptor\n        }, {\n            token : \"string\",           // ' string\n            start : \"'\", end : \"'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : floatNumber\n        }, {\n            token : \"constant.numeric\", // integer\n            regex : integer + \"\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|~|<|>|<=|=>|=|!=|[%&|`]\"\n        }, {\n            token : \"punctuation.operator\",\n            regex : \";\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\]]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)\\\\}]\",\n            next : \"pop\"\n        }],\n        variables: [{\n            token : \"variable\",\n            regex : /(\\$)(\\w+)/\n        }, {\n            token : [\"variable\", \"paren.lparen\"],\n            regex : /(\\$)(\\()/,\n            push : \"start\"\n        }, {\n            token : [\"variable\", \"paren.lparen\", \"keyword.operator\", \"variable\", \"keyword.operator\"],\n            regex : /(\\$)(\\{)([#!]?)(\\w+|[*@#?\\-$!0_])(:[?+\\-=]?|##?|%%?|,,?\\/|\\^\\^?)?/,\n            push : \"start\"\n        }, {\n            token : \"variable\",\n            regex : /\\$[*@#?\\-$!0_]/\n        }, {\n            token : [\"variable\", \"paren.lparen\"],\n            regex : /(\\$)(\\{)/,\n            push : \"start\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(ShHighlightRules, TextHighlightRules);\n\nexports.ShHighlightRules = ShHighlightRules;\n"],"names":["oop","require","ShMode","DockerfileHighlightRules","CStyleFoldMode","Mode","call","this","HighlightRules","foldingRules","inherits","$id","prototype","exports","ShHighlightRules","startRules","$rules","start","i","length","token","splice","regex","caseInsensitive","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","TextMode","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","snippetFileId","TextHighlightRules","reservedKeywords","languageConstructs","keywordMapper","createKeywordMapper","integer","fraction","intPart","pointFloat","exponentFloat","floatNumber","fileDescriptor","variableName","variable","builtinVariable","func","push","include","next","defaultToken","stateName","onMatch","currentState","stack","split","splitRegex","rules","heredoc","shift","indentedHeredoc","variables","normalizeRules"],"sourceRoot":""}