{"version":3,"file":"js/7514.9e13d7e7.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/asl.js","webpack://admin/./node_modules/ace-code/src/mode/asl_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ASLHighlightRules = require(\"./asl_highlight_rules\").ASLHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function () {\n    this.HighlightRules = ASLHighlightRules;\n    this.foldingRules = new FoldMode();\n        this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function () {\n    this.$id = \"ace/mode/asl\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n    var ASLHighlightRules = function() {\n        var keywords = (\n            \"Default|DefinitionBlock|Device|Method|Else|ElseIf|For|Function|If|Include|Method|Return|\" +\n            \"Scope|Switch|Case|While|Break|BreakPoint|Continue|NoOp|Wait|True|False|\" +\n            \"AccessAs|Acquire|Alias|BankField|Buffer|Concatenate|ConcatenateResTemplate|\" +\n            \"CondRefOf|Connection|CopyObject|CreateBitField|CreateByteField|CreateDWordField|\" +\n            \"CreateField|CreateQWordField|CreateWordField|DataTableRegion|Debug|\" +\n            \"DMA|DWordIO|DWordMemory|DWordSpace|EisaId|EISAID|EndDependentFn|Event|ExtendedIO|\" +\n            \"ExtendedMemory|ExtendedSpace|External|Fatal|Field|FindSetLeftBit|FindSetRightBit|\" +\n            \"FixedDMA|FixedIO|Fprintf|FromBCD|GpioInt|GpioIo|I2CSerialBusV2|IndexField|\" +\n            \"Interrupt|IO|IRQ|IRQNoFlags|Load|LoadTable|Match|Memory32|Memory32Fixed|\" +\n            \"Mid|Mutex|Name|Notify|Offset|ObjectType|OperationRegion|Package|PowerResource|Printf|\" +\n            \"QWordIO|QWordMemory|QWordSpace|RawDataBuffer|Register|Release|Reset|ResourceTemplate|\" +\n            \"Signal|SizeOf|Sleep|SPISerialBusV2|Stall|StartDependentFn|StartDependentFnNoPri|\" +\n            \"Store|ThermalZone|Timer|ToBCD|ToBuffer|ToDecimalString|ToInteger|ToPLD|ToString|\" +\n            \"ToUUID|UARTSerialBusV2|Unicode|Unload|VendorLong|VendorShort|WordBusNumber|WordIO|\" +\n            \"WordSpace\"\n        );\n\n        var keywordOperators = (\n            \"Add|And|Decrement|Divide|Increment|Index|LAnd|LEqual|LGreater|LGreaterEqual|\" +\n            \"LLess|LLessEqual|LNot|LNotEqual|LOr|Mod|Multiply|NAnd|NOr|Not|Or|RefOf|Revision|\" +\n            \"ShiftLeft|ShiftRight|Subtract|XOr|DerefOf\"\n        );\n\n        var flags = (\n            \"AttribQuick|AttribSendReceive|AttribByte|AttribBytes|AttribRawBytes|\" +\n            \"AttribRawProcessBytes|AttribWord|AttribBlock|AttribProcessCall|AttribBlockProcessCall|\" +\n            \"AnyAcc|ByteAcc|WordAcc|DWordAcc|QWordAcc|BufferAcc|\" +\n            \"AddressRangeMemory|AddressRangeReserved|AddressRangeNVS|AddressRangeACPI|\" +\n            \"RegionSpaceKeyword|FFixedHW|PCC|\" +\n            \"AddressingMode7Bit|AddressingMode10Bit|\" +\n            \"DataBitsFive|DataBitsSix|DataBitsSeven|DataBitsEight|DataBitsNine|\" +\n            \"BusMaster|NotBusMaster|\" +\n            \"ClockPhaseFirst|ClockPhaseSecond|ClockPolarityLow|ClockPolarityHigh|\" +\n            \"SubDecode|PosDecode|\" +\n            \"BigEndianing|LittleEndian|\" +\n            \"FlowControlNone|FlowControlXon|FlowControlHardware|\" +\n            \"Edge|Level|ActiveHigh|ActiveLow|ActiveBoth|Decode16|Decode10|\" +\n            \"IoRestrictionNone|IoRestrictionInputOnly|IoRestrictionOutputOnly|\" +\n            \"IoRestrictionNoneAndPreserve|Lock|NoLock|MTR|MEQ|MLE|MLT|MGE|MGT|\" +\n            \"MaxFixed|MaxNotFixed|Cacheable|WriteCombining|Prefetchable|NonCacheable|\" +\n            \"MinFixed|MinNotFixed|\" +\n            \"ParityTypeNone|ParityTypeSpace|ParityTypeMark|ParityTypeOdd|ParityTypeEven|\" +\n            \"PullDefault|PullUp|PullDown|PullNone|PolarityHigh|PolarityLow|\" +\n            \"ISAOnlyRanges|NonISAOnlyRanges|EntireRange|ReadWrite|ReadOnly|\" +\n            \"UserDefRegionSpace|SystemIO|SystemMemory|PCI_Config|EmbeddedControl|\" +\n            \"SMBus|SystemCMOS|PciBarTarget|IPMI|GeneralPurposeIO|GenericSerialBus|\" +\n            \"ResourceConsumer|ResourceProducer|Serialized|NotSerialized|\" +\n            \"Shared|Exclusive|SharedAndWake|ExclusiveAndWake|ControllerInitiated|DeviceInitiated|\" +\n            \"StopBitsZero|StopBitsOne|StopBitsOnePlusHalf|StopBitsTwo|\" +\n            \"Width8Bit|Width16Bit|Width32Bit|Width64Bit|Width128Bit|Width256Bit|\" +\n            \"SparseTranslation|DenseTranslation|TypeTranslation|TypeStatic|\" +\n            \"Preserve|WriteAsOnes|WriteAsZeros|Transfer8|Transfer16|Transfer8_16|\" +\n            \"ThreeWireMode|FourWireMode\"\n        );\n\n        var storageTypes = (\n            \"UnknownObj|IntObj|StrObj|BuffObj|PkgObj|FieldUnitObj|DeviceObj|\" +\n            \"EventObj|MethodObj|MutexObj|OpRegionObj|PowerResObj|ProcessorObj|\" +\n            \"ThermalZoneObj|BuffFieldObj|DDBHandleObj\"\n        );\n\n        var builtinConstants = (\n            \"__FILE__|__PATH__|__LINE__|__DATE__|__IASL__\"\n        );\n\n        var strNumbers = (\n            \"One|Ones|Zero\"\n        );\n\n        var deprecated = (\n            \"Memory24|Processor\"\n        );\n\n        var keywordMapper = this.createKeywordMapper({\n            \"keyword\": keywords,\n            \"constant.numeric\": strNumbers,\n            \"keyword.operator\": keywordOperators,\n            \"constant.language\": builtinConstants,\n            \"storage.type\": storageTypes,\n            \"constant.library\": flags,\n            \"invalid.deprecated\": deprecated\n        }, \"identifier\");\n\n        this.$rules = {\n            \"start\" : [\n                {\n                    token : \"comment\",\n                    regex : \"\\\\/\\\\/.*$\"\n                },\n                DocCommentHighlightRules.getStartRule(\"doc-start\"),\n                {\n                    token : \"comment\", // multi line comment\n                    regex : \"\\\\/\\\\*\",\n                    next : \"comment\"\n                },\n                DocCommentHighlightRules.getStartRule(\"doc-start\"),\n                {\n                    token : \"comment\", // ignored fields / comments\n                    regex : \"\\\\\\[\",\n                    next : \"ignoredfield\"\n                }, {\n                    token : \"variable\",\n                    regex : \"\\\\Local[0-7]|\\\\Arg[0-6]\"\n                }, {\n                    token : \"keyword\", // pre-compiler directives\n                    regex : \"#\\\\s*(?:define|elif|else|endif|error|if|ifdef|ifndef|include|includebuffer|line|pragma|undef|warning)\\\\b\",\n                    next  : \"directive\"\n                }, {\n                    token : \"string\", // single line\n                    regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n                }, {\n                    token : \"constant.character\", // single line\n                    regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n                }, {\n                    token : \"constant.numeric\", // hex\n                    regex : /0[xX][0-9a-fA-F]+\\b/\n                }, {\n                    token : \"constant.numeric\",\n                    regex : /[0-9]+\\b/\n                }, {\n                    token : keywordMapper,\n                    regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n                }, {\n                    token : \"keyword.operator\",\n                    regex : /[!\\~\\*\\/%+-<>\\^|=&]/\n                }, {\n                    token : \"lparen\",\n                    regex : \"[[({]\"\n                }, {\n                    token : \"rparen\",\n                    regex : \"[\\\\])}]\"\n                }, {\n                    token : \"text\",\n                    regex : \"\\\\s+\"\n                }\n            ],\n            \"comment\" : [\n                {\n                    token : \"comment\", // closing comment\n                    regex : \"\\\\*\\\\/\",\n                    next : \"start\"\n                }, {\n                    defaultToken : \"comment\"\n                }\n            ],\n            \"ignoredfield\" : [\n                {\n                    token : \"comment\", // closing ignored fields / comments\n                    regex : \"\\\\\\]\",\n                    next : \"start\"\n                }, {\n                    defaultToken : \"comment\"\n                }\n            ],\n            \"directive\" : [\n                {\n                    token : \"constant.other.multiline\",\n                    regex : /\\\\/\n                },\n                {\n                    token : \"constant.other.multiline\",\n                    regex : /.*\\\\/\n                },\n                {\n                    token : \"constant.other\",\n                    regex : \"\\\\s*<.+?>*s\",\n                    next : \"start\"\n                },\n                {\n                    token : \"constant.other\", // single line\n                    regex : '\\\\s*[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]*s',\n                    next : \"start\"\n                },\n                {\n                    token : \"constant.other\", // single line\n                    regex : \"\\\\s*['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\",\n                    next : \"start\"\n                },\n                // \"\\\" implies multiline, while \"/\" implies comment\n                {\n                    token : \"constant.other\",\n                    regex : /[^\\\\\\/]+/,\n                    next : \"start\"\n                }\n            ]\n        };\n\n        this.embedRules(DocCommentHighlightRules, \"doc-\",\n            [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    };\n\n    oop.inherits(ASLHighlightRules, TextHighlightRules);\n\n    exports.ASLHighlightRules = ASLHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","ASLHighlightRules","FoldMode","Mode","this","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","inherits","$id","call","prototype","exports","DocCommentHighlightRules","TextHighlightRules","keywords","keywordOperators","flags","storageTypes","builtinConstants","strNumbers","deprecated","keywordMapper","createKeywordMapper","$rules","token","regex","getStartRule","next","defaultToken","embedRules","getEndRule","getTagRule","caseInsensitive","start","Range","BaseFoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec"],"sourceRoot":""}