{"version":3,"file":"js/4819.c0b3b890.js","mappings":"0FAAAA,EAAOC,QAAW,k6B,qCCClBC,EAAA,OAMA,IAAIC,EAAcD,EAAAA,OAAAA,EACdE,EAAYF,EAAAA,OAAAA,EACZG,EAAaH,EAAQ,OACrBI,EAASJ,EAAQ,OACjBK,EAAML,EAAQ,OACdM,EAAaN,EAAAA,MAAAA,WAEjB,MAAMO,EAIFC,WAAAA,CAAYC,GACYC,KAAKC,UACzBD,KAAKD,KAAOA,EACZC,KAAKE,MAAQ,CAAC,EACdF,KAAKG,YAAc,EACvB,CAEAC,SAAAA,GACI,OAAOJ,IACX,CAEAK,WAAAA,CAAYC,GACRN,KAAKG,aAAeG,EAAMC,UAC9B,CAEAA,QAAAA,GACI,IAAIC,EAAgB,GACpB,GAAiB,YAAbR,KAAKD,KAAoB,CACzBS,EAAcC,KAAK,IAAKT,KAAKD,MACzBC,KAAKC,WACLO,EAAcC,KAAK,WAAYT,KAAKC,UAAW,KACnD,IAAIS,EAAW,GACf,IAAK,IAAIC,KAAOX,KAAKE,MACjBQ,EAASD,KAAKE,EAAK,IAAKX,KAAKE,MAAMS,IAEnCD,EAASE,QACTJ,EAAcC,KAAK,WAAYC,EAASG,KAAK,IAAK,KACtDL,EAAcC,KAAK,IACvB,CAUA,OARIT,KAAKG,aACLK,EAAcC,KAAKT,KAAKG,aAGX,YAAbH,KAAKD,MACLS,EAAcC,KAAK,KAAMT,KAAKD,KAAM,KAGjCS,EAAcK,KAAK,GAC9B,EAIJ,IAAIC,EAAY,CACZC,eAAgB,SAA+BZ,EAAgCa,GAC3E,OAAOpB,EAAWO,EACtB,EACAc,cAAe,SAA+BlB,GAC1C,OAAO,IAAIF,EAAQE,EACvB,EACAmB,eAAgB,WACZ,OAAO,IAAIrB,EAAQ,WACvB,GAKAsB,EAAkB,WAClBnB,KAAKN,OAAS,CAAC,EACfM,KAAKL,IAAMmB,CACf,EACAK,EAAgBC,UAAY5B,EAAU4B,UAStC,IAAIC,EAAY,SAASC,EAAIC,EAAMC,GAC/B,IAAIC,EAAIH,EAAGrB,UAAUyB,MAAM,cACvBC,EAAOJ,EAAKI,MAAQF,GAAM,YAAcA,EAAE,GAC9C,IAAKE,EACD,OAAO,EACX,IAAIC,EAAQL,EAAKK,OAAS,qBAEtBC,EAAO,GACPC,EAAQ,GAEZ,GAAIR,EAAGS,kBAEH,IADA,IAAIC,EAAU,EACLC,EAAI,EAAGA,EAAIX,EAAGY,WAAWtB,OAAQqB,IAAK,CAE3C,IAAIE,EAAKb,EAAGY,WAAWD,GACJ,GAAfE,EAAGC,UACHJ,GAAWG,EAAGN,KAAKjB,OACnBiB,GAAQM,EAAGN,MAEXC,EAAMrB,KAAKuB,EAASG,EAE5B,MAEAN,EAAOP,EAAGnB,YACNoB,EAAKc,OACLR,EAAOA,EAAKQ,QAGpBhB,EAAUiB,OAAOT,EAAMF,EAAMC,EAAOL,EAAKgB,iBAAkBhB,EAAKiB,YAAY,SAAUC,GAClF9C,EAAI+C,gBAAgBD,EAAYE,IAAK,iBAAiB,GACtDrB,EAAGsB,UAAYH,EAAYI,KAM3B,IADA,IAAIC,EAAYxB,EAAGyB,WAAWA,WACrBd,EAAI,EAAGA,EAAIH,EAAMlB,OAAQqB,GAAK,EAAG,CACtC,IAAIe,EAAMP,EAAYQ,QAAQC,IAAIC,gBAAgBrB,EAAMG,IACpDmB,EAAOtB,EAAMG,EAAI,GACjBoB,EAASP,EAAUQ,SAASN,EAAIO,KACpCF,GAAUA,EAAOhD,YAAY+C,EACjC,CACA5B,GAAYA,GAChB,GACJ,EAqBAH,EAAUiB,OAAS,SAASkB,EAAO7B,EAAMC,EAAO6B,EAAWC,EAAelC,GACtE,IAaImC,EAbAC,EAAU,EACVC,EAAYtE,EAAY6B,UAAU0C,OA4BtC,SAASC,IACL,IAAIC,EAAS3C,EAAU4C,WAAWT,EAAO7B,EAAwBC,EAAQ6B,EAAWC,GACpF,OAAOlC,EAAWA,EAASwC,GAAUA,CACzC,CACA,MA5BoB,iBAATpC,IACPgC,IACAlE,EAAOwE,WAAW,CAAC,QAAStC,IAAQ,SAASH,GACzCG,EAAQH,IACNmC,GAAWG,GACjB,KAIApC,GAAwB,kBAATA,IAAsBA,EAAKwC,eAC1CR,EAAchC,EACdA,EAAOgC,EAAYS,MAEJ,iBAARzC,IACPiC,IACAlE,EAAOwE,WAAW,CAAC,OAAQvC,IAAO,SAASF,GAClCoC,EAAU,KAA6BF,IACxCE,EAAU,GAA4B,IAAIpC,EAAE4C,KAAKV,IACrDhC,EAAOkC,EAAU,KACfD,GAAWG,GACjB,OAQKH,GAAWG,GACxB,EAWA1C,EAAU4C,WAAa,SAAST,EAAO7B,EAAMC,EAAO6B,EAAWC,GAC3DD,EAAYa,SAASb,GAAa,EAAG,IAErC,IAAIR,EAAU,IAAI1D,EAAY,IAC9B0D,EAAQsB,cAAa,GACrBtB,EAAQuB,QAAQ7C,GAGhB,IAAI8C,EAAY,IAAItD,EACpBsD,EAAUC,WAAWzB,GACrB0B,OAAOC,KAAKH,EAAUI,aAAaC,SAAQ,SAASC,GAChD,GAAuC,iBAA5BN,EAAUI,YAAYE,GAAgB,CAC7C,IAAIzD,EAAKR,EAAUI,iBACnBI,EAAGnB,YAAcsE,EAAUI,YAAYE,GACvCN,EAAUI,YAAYE,GAAKzD,CAC/B,CACJ,IAEA2B,EAAQ+B,SAASxB,GACjB,IAAI5C,EAAUqC,EAAQgC,YAElBC,EAAUpE,EAAUG,cAAc,OACtCiE,EAAQjF,UAAY2B,EAAMuD,SAE1B,IAAIC,EAAUtE,EAAUG,cAAc,OACtCmE,EAAQnF,UAAY,wBAA0ByD,EAAgB,GAAK,oBACnE0B,EAAQlF,MAAM,iBAAmB,aAAeuD,EAAY,GAE5D,IAAK,IAAI4B,EAAK,EAAGA,EAAKzE,EAAQyE,IAAM,CAChC,IAAIhC,EAASvC,EAAUG,cAAc,OAGrC,GAFAoC,EAAOpD,UAAY,YAEdyD,EAAe,CAChB,IAAI4B,EAAWxE,EAAUG,cAAc,QACvCqE,EAASrF,UAAW,6BACpBqF,EAASnF,YAAc,GACvBkD,EAAOhD,YAAYiF,EACvB,CACAb,EAAUc,YAAYlC,EAAQgC,GAAI,GAClChC,EAAOlD,aAAe,KACtBiF,EAAQ/E,YAAYgD,EACxB,CAMA,OAFA6B,EAAQ7E,YAAY+E,GAEb,CACHzC,IAAKlD,EAAamC,EAAM4D,QACxB3C,KAAMqC,EAAQ3E,WACd0C,QAASA,EAEjB,EAEA7D,EAAOC,QAAUgC,EACjBjC,EAAOC,QAAQgC,UAAYA,C","sources":["webpack://admin/./node_modules/ace-code/src/ext/static-css.js","webpack://admin/./node_modules/ace-code/src/ext/static_highlight.js"],"sourcesContent":["module.exports = `.ace_static_highlight {\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', 'Source Code Pro', 'source-code-pro', 'Droid Sans Mono', monospace;\n    font-size: 12px;\n    white-space: pre-wrap\n}\n\n.ace_static_highlight .ace_gutter {\n    width: 2em;\n    text-align: right;\n    padding: 0 3px 0 0;\n    margin-right: 3px;\n    contain: none;\n}\n\n.ace_static_highlight.ace_show_gutter .ace_line {\n    padding-left: 2.6em;\n}\n\n.ace_static_highlight .ace_line { position: relative; }\n\n.ace_static_highlight .ace_gutter-cell {\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n}\n\n\n.ace_static_highlight .ace_gutter-cell:before {\n    content: counter(ace_line, decimal);\n    counter-increment: ace_line;\n}\n.ace_static_highlight {\n    counter-reset: ace_line;\n}\n`;\n","\"use strict\";\n/**\n * @typedef {import(\"../../ace-internal\").Ace.SyntaxMode} SyntaxMode\n * @typedef {import(\"../../ace-internal\").Ace.Theme} Theme\n */\n\n\nvar EditSession = require(\"../edit_session\").EditSession;\nvar TextLayer = require(\"../layer/text\").Text;\nvar baseStyles = require(\"./static-css\");\nvar config = require(\"../config\");\nvar dom = require(\"../lib/dom\");\nvar escapeHTML = require(\"../lib/lang\").escapeHTML;\n\nclass Element {\n    /**\n     * @param {string} type\n     */\n    constructor(type) {\n        /** @type{string} */this.className;\n        this.type = type;\n        this.style = {};\n        this.textContent = \"\";\n    }\n\n    cloneNode() {\n        return this;\n    }\n\n    appendChild(child) {\n        this.textContent += child.toString();\n    }\n\n    toString() {\n        var stringBuilder = [];\n        if (this.type != \"fragment\") {\n            stringBuilder.push(\"<\", this.type);\n            if (this.className)\n                stringBuilder.push(\" class='\", this.className, \"'\");\n            var styleStr = [];\n            for (var key in this.style) {\n                styleStr.push(key, \":\", this.style[key]);\n            }\n            if (styleStr.length)\n                stringBuilder.push(\" style='\", styleStr.join(\"\"), \"'\");\n            stringBuilder.push(\">\");\n        }\n\n        if (this.textContent) {\n            stringBuilder.push(this.textContent);\n        }\n\n        if (this.type != \"fragment\") {\n            stringBuilder.push(\"</\", this.type, \">\");\n        }\n\n        return stringBuilder.join(\"\");\n    }\n}\n\n\nvar simpleDom = {\n    createTextNode: function(/** @type {string} */ textContent, /** @type {any} */ element) {\n        return escapeHTML(textContent);\n    },\n    createElement: function(/** @type {string} */ type) {\n        return new Element(type);\n    },\n    createFragment: function() {\n        return new Element(\"fragment\");\n    }\n};\n\n\n/**@type {any}*/\nvar SimpleTextLayer = function() {\n    this.config = {};\n    this.dom = simpleDom;\n};\nSimpleTextLayer.prototype = TextLayer.prototype;\n\n/**\n *\n * @param {HTMLElement} el\n * @param {import(\"../../ace-internal\").Ace.StaticHighlightOptions} opts\n * @param [callback]\n * @returns {boolean}\n */\nvar highlight = function(el, opts, callback) {\n    var m = el.className.match(/lang-(\\w+)/);\n    var mode = opts.mode || m && (\"ace/mode/\" + m[1]);\n    if (!mode)\n        return false;\n    var theme = opts.theme || \"ace/theme/textmate\";\n\n    var data = \"\";\n    var nodes = [];\n\n    if (el.firstElementChild) {\n        var textLen = 0;\n        for (var i = 0; i < el.childNodes.length; i++) {\n            /**@type {any}*/\n            var ch = el.childNodes[i];\n            if (ch.nodeType == 3) {\n                textLen += ch.data.length;\n                data += ch.data;\n            } else {\n                nodes.push(textLen, ch);\n            }\n        }\n    } else {\n        data = el.textContent;\n        if (opts.trim)\n            data = data.trim();\n    }\n\n    highlight.render(data, mode, theme, opts.firstLineNumber, !opts.showGutter, function (highlighted) {\n        dom.importCssString(highlighted.css, \"ace_highlight\", true);\n        el.innerHTML = highlighted.html;\n        /**\n         * TODO: check if child exists\n         * @type {any}\n         */\n        var container = el.firstChild.firstChild;\n        for (var i = 0; i < nodes.length; i += 2) {\n            var pos = highlighted.session.doc.indexToPosition(nodes[i]);\n            var node = nodes[i + 1];\n            var lineEl = container.children[pos.row];\n            lineEl && lineEl.appendChild(node);\n        }\n        callback && callback();\n    });\n};\n\n/**\n * Transforms a given input code snippet into HTML using the given mode\n *\n * @param {string} input Code snippet\n * @param {string | SyntaxMode} mode String specifying the mode to load such as\n *  `ace/mode/javascript` or, a mode loaded from `/ace/mode`\n *  (use 'ServerSideHiglighter.getMode').\n * @param {string | Theme} theme String specifying the theme to load such as\n *  `ace/theme/twilight` or, a theme loaded from `/ace/theme`.\n * @param {number} lineStart A number indicating the first line number. Defaults\n *  to 1.\n * @param {boolean} disableGutter Specifies whether or not to disable the gutter.\n *  `true` disables the gutter, `false` enables the gutter. Defaults to `false`.\n * @param {function} [callback] When specifying the mode or theme as a string,\n *  this method has no return value and you must specify a callback function. The\n *  callback will receive the rendered object containing the properties `html`\n *  and `css`.\n * @returns {object} An object containing the properties `html` and `css`.\n */\nhighlight.render = function(input, mode, theme, lineStart, disableGutter, callback) {\n    var waiting = 1;\n    var modeCache = EditSession.prototype.$modes;\n\n    // if either the theme or the mode were specified as objects\n    // then we need to lazily load them.\n    if (typeof theme == \"string\") {\n        waiting++;\n        config.loadModule(['theme', theme], function(m) {\n            theme = m;\n            --waiting || done();\n        });\n    }\n    // allow setting mode options e.h {path: \"ace/mode/php\", inline:true}\n    var modeOptions;\n    if (mode && typeof mode === \"object\" && !mode.getTokenizer) {\n        modeOptions = mode;\n        mode = modeOptions.path;\n    }\n    if (typeof mode == \"string\") {\n        waiting++;\n        config.loadModule(['mode', mode], function(m) {\n            if (!modeCache[/**@type{string}*/(mode)] || modeOptions)\n                modeCache[/**@type{string}*/(mode)] = new m.Mode(modeOptions);\n            mode = modeCache[/**@type{string}*/(mode)];\n            --waiting || done();\n        });\n    }\n\n    // loads or passes the specified mode module then calls renderer\n    function done() {\n        var result = highlight.renderSync(input, mode, /**@type{Theme}*/(theme), lineStart, disableGutter);\n        return callback ? callback(result) : result;\n    }\n    return --waiting || done();\n};\n\n/**\n * Transforms a given input code snippet into HTML using the given mode\n * @param {string} input Code snippet\n * @param {SyntaxMode | string} mode Mode loaded from /ace/mode (use 'ServerSideHiglighter.getMode')\n * @param {Theme} theme\n * @param {any} lineStart\n * @param {boolean} disableGutter\n * @returns {object} An object containing: html, css\n */\nhighlight.renderSync = function(input, mode, theme, lineStart, disableGutter) {\n    lineStart = parseInt(lineStart || 1, 10);\n\n    var session = new EditSession(\"\");\n    session.setUseWorker(false);\n    session.setMode(mode);\n\n    /**@type {TextLayer}*/\n    var textLayer = new SimpleTextLayer();\n    textLayer.setSession(session);\n    Object.keys(textLayer.$tabStrings).forEach(function(k) {\n        if (typeof textLayer.$tabStrings[k] == \"string\") {\n            var el = simpleDom.createFragment();\n            el.textContent = textLayer.$tabStrings[k];\n            textLayer.$tabStrings[k] = el;\n        }\n    });\n\n    session.setValue(input);\n    var length =  session.getLength();\n\n    var outerEl = simpleDom.createElement(\"div\");\n    outerEl.className = theme.cssClass;\n\n    var innerEl = simpleDom.createElement(\"div\");\n    innerEl.className = \"ace_static_highlight\" + (disableGutter ? \"\" : \" ace_show_gutter\");\n    innerEl.style[\"counter-reset\"] = \"ace_line \" + (lineStart - 1);\n\n    for (var ix = 0; ix < length; ix++) {\n        var lineEl = simpleDom.createElement(\"div\");\n        lineEl.className = \"ace_line\";\n\n        if (!disableGutter) {\n            var gutterEl = simpleDom.createElement(\"span\");\n            gutterEl.className =\"ace_gutter ace_gutter-cell\";\n            gutterEl.textContent = \"\"; /*(ix + lineStart) + */\n            lineEl.appendChild(gutterEl);\n        }\n        textLayer.$renderLine(lineEl, ix, false);\n        lineEl.textContent += \"\\n\";\n        innerEl.appendChild(lineEl);\n    }\n\n    //console.log(JSON.stringify(outerEl, null, 2));\n    //console.log(outerEl.toString());\n    outerEl.appendChild(innerEl);\n\n    return {\n        css: baseStyles + theme.cssText,\n        html: outerEl.toString(),\n        session: session\n    };\n};\n\nmodule.exports = highlight;\nmodule.exports.highlight = highlight;\n"],"names":["module","exports","require","EditSession","TextLayer","baseStyles","config","dom","escapeHTML","Element","constructor","type","this","className","style","textContent","cloneNode","appendChild","child","toString","stringBuilder","push","styleStr","key","length","join","simpleDom","createTextNode","element","createElement","createFragment","SimpleTextLayer","prototype","highlight","el","opts","callback","m","match","mode","theme","data","nodes","firstElementChild","textLen","i","childNodes","ch","nodeType","trim","render","firstLineNumber","showGutter","highlighted","importCssString","css","innerHTML","html","container","firstChild","pos","session","doc","indexToPosition","node","lineEl","children","row","input","lineStart","disableGutter","modeOptions","waiting","modeCache","$modes","done","result","renderSync","loadModule","getTokenizer","path","Mode","parseInt","setUseWorker","setMode","textLayer","setSession","Object","keys","$tabStrings","forEach","k","setValue","getLength","outerEl","cssClass","innerEl","ix","gutterEl","$renderLine","cssText"],"sourceRoot":""}