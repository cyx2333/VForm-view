{"version":3,"file":"js/6126.73eb40b8.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/elm.js","webpack://admin/./node_modules/ace-code/src/mode/elm_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js"],"sourcesContent":["/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./elm_highlight_rules\").ElmHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"{-\", end: \"-}\", nestable: true};\n    // Extra logic goes here.\n    this.$id = \"ace/mode/elm\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","// TODO check with https://github.com/deadfoxygrandpa/Elm.tmLanguage\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ElmHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n       \"keyword\": \"as|case|class|data|default|deriving|do|else|export|foreign|\" +\n            \"hiding|jsevent|if|import|in|infix|infixl|infixr|instance|let|\" +\n            \"module|newtype|of|open|then|type|where|_|port|\\u03BB\"\n    }, \"identifier\");\n    \n    var escapeRe = /\\\\(\\d+|['\"\\\\&trnbvf])/;\n    \n    var smallRe = /[a-z_]/.source;\n    var largeRe = /[A-Z]/.source;\n    var idRe = /[a-z_A-Z0-9']/.source;\n\n    this.$rules = {\n        start: [{\n            token: \"string.start\",\n            regex: '\"',\n            next: \"string\"\n        }, {\n            token: \"string.character\",\n            regex: \"'(?:\" + escapeRe.source + \"|.)'?\"\n        }, {\n            regex: /0(?:[xX][0-9A-Fa-f]+|[oO][0-7]+)|\\d+(\\.\\d+)?([eE][-+]?\\d*)?/,\n            token: \"constant.numeric\"\n        }, {\n            token: \"comment\",\n            regex: \"--.*\"\n        }, {\n            token : \"keyword\",\n            regex : /\\.\\.|\\||:|=|\\\\|\"|->|<-|\\u2192/\n        }, {\n            token : \"keyword.operator\",\n            regex : /[-!#$%&*+.\\/<=>?@\\\\^|~:\\u03BB\\u2192]+/\n        }, {\n            token : \"operator.punctuation\",\n            regex : /[,;`]/\n        }, {\n            regex : largeRe + idRe + \"+\\\\.?\",\n            token : function(value) {\n                if (value[value.length - 1] == \".\")\n                    return \"entity.name.function\"; \n                return \"constant.language\"; \n            }\n        }, {\n            regex : \"^\" + smallRe  + idRe + \"+\",\n            token : function(value) {\n                return \"constant.language\"; \n            }\n        }, {\n            token : keywordMapper,\n            regex : \"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"\n        }, {\n            regex: \"{-#?\",\n            token: \"comment.start\",\n            onMatch: function(value, currentState, stack) {\n                this.next = value.length == 2 ? \"blockComment\" : \"docComment\";\n                return this.token;\n            }\n        }, {\n            token: \"variable.language\",\n            regex: /\\[markdown\\|/,\n            next: \"markdown\"\n        }, {\n            token: \"paren.lparen\",\n            regex: /[\\[({]/ \n        }, {\n            token: \"paren.rparen\",\n            regex: /[\\])}]/\n        } ],\n        markdown: [{\n            regex: /\\|\\]/,\n            next: \"start\"\n        }, {\n            defaultToken : \"string\"\n        }],\n        blockComment: [{\n            regex: \"{-\",\n            token: \"comment.start\",\n            push: \"blockComment\"\n        }, {\n            regex: \"-}\",\n            token: \"comment.end\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment\"\n        }],\n        docComment: [{\n            regex: \"{-\",\n            token: \"comment.start\",\n            push: \"docComment\"\n        }, {\n            regex: \"-}\",\n            token: \"comment.end\",\n            next: \"pop\" \n        }, {\n            defaultToken: \"doc.comment\"\n        }],\n        string: [{\n            token: \"constant.language.escape\",\n            regex: escapeRe\n        }, {\n            token: \"text\",\n            regex: /\\\\(\\s|$)/,\n            next: \"stringGap\"\n        }, {\n            token: \"string.end\",\n            regex: '\"',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        stringGap: [{\n            token: \"text\",\n            regex: /\\\\/,\n            next: \"string\"\n        }, {\n            token: \"error\",\n            regex: \"\",\n            next: \"start\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(ElmHighlightRules, TextHighlightRules);\n\nexports.ElmHighlightRules = ElmHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","HighlightRules","FoldMode","Mode","this","foldingRules","$behaviour","$defaultBehaviour","inherits","lineCommentStart","blockComment","start","end","nestable","$id","call","prototype","exports","TextHighlightRules","ElmHighlightRules","keywordMapper","createKeywordMapper","escapeRe","smallRe","source","largeRe","idRe","$rules","token","regex","next","value","length","onMatch","currentState","stack","markdown","defaultToken","push","docComment","string","stringGap","normalizeRules","Range","BaseFoldMode","commentRegex","foldingStartMarker","RegExp","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec"],"sourceRoot":""}