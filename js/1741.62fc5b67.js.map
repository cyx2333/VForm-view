{"version":3,"file":"js/1741.62fc5b67.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/ext/elastic_tabstops_lite.js"],"sourcesContent":["\"use strict\";\nclass ElasticTabstopsLite {\n    /**\n     * @param {Editor} editor\n     */\n    constructor(editor) {\n        this.$editor = editor;\n        var self = this;\n        var changedRows = [];\n        var recordChanges = false;\n        this.onAfterExec = function() {\n            recordChanges = false;\n            self.processRows(changedRows);\n            changedRows = [];\n        };\n        this.onExec = function() {\n            recordChanges = true;\n        };\n        this.onChange = function(delta) {\n            if (recordChanges) {\n                if (changedRows.indexOf(delta.start.row) == -1)\n                    changedRows.push(delta.start.row);\n                if (delta.end.row != delta.start.row)\n                    changedRows.push(delta.end.row);\n            }\n        };\n    }\n\n    /**\n     * @param {number[]} rows\n     */\n    processRows(rows) {\n        this.$inChange = true;\n        var checkedRows = [];\n\n        for (var r = 0, rowCount = rows.length; r < rowCount; r++) {\n            var row = rows[r];\n\n            if (checkedRows.indexOf(row) > -1)\n                continue;\n\n            var cellWidthObj = this.$findCellWidthsForBlock(row);\n            var cellWidths = this.$setBlockCellWidthsToMax(cellWidthObj.cellWidths);\n            var rowIndex = cellWidthObj.firstRow;\n\n            for (var w = 0, l = cellWidths.length; w < l; w++) {\n                var widths = cellWidths[w];\n                checkedRows.push(rowIndex);\n                this.$adjustRow(rowIndex, widths);\n                rowIndex++;\n            }\n        }\n        this.$inChange = false;\n    }\n\n    /**\n     * @param {number} row\n     */\n    $findCellWidthsForBlock(row) {\n        var cellWidths = [], widths;\n\n        // starting row and backward\n        var rowIter = row;\n        while (rowIter >= 0) {\n            widths = this.$cellWidthsForRow(rowIter);\n            if (widths.length == 0)\n                break;\n\n            cellWidths.unshift(widths);\n            rowIter--;\n        }\n        var firstRow = rowIter + 1;\n\n        // forward (not including starting row)\n        rowIter = row;\n        var numRows = this.$editor.session.getLength();\n\n        while (rowIter < numRows - 1) {\n            rowIter++;\n\n            widths = this.$cellWidthsForRow(rowIter);\n            if (widths.length == 0)\n                break;\n\n            cellWidths.push(widths);\n        }\n\n        return { cellWidths: cellWidths, firstRow: firstRow };\n    }\n\n    /**\n     * @param {number} row\n     * @returns {number[]}\n     */\n    $cellWidthsForRow(row) {\n        var selectionColumns = this.$selectionColumnsForRow(row);\n        // todo: support multicursor\n\n        var tabs = [-1].concat(this.$tabsForRow(row));\n        var widths = tabs.map(function(el) { return 0; } ).slice(1);\n        var line = this.$editor.session.getLine(row);\n\n        for (var i = 0, len = tabs.length - 1; i < len; i++) {\n            var leftEdge = tabs[i]+1;\n            var rightEdge = tabs[i+1];\n\n            var rightmostSelection = this.$rightmostSelectionInCell(selectionColumns, rightEdge);\n            var cell = line.substring(leftEdge, rightEdge);\n            widths[i] = Math.max(cell.replace(/\\s+$/g,'').length, rightmostSelection - leftEdge);\n        }\n\n        return widths;\n    }\n\n    /**\n     * @param {number} row\n     * @returns {number[]}\n     */\n    $selectionColumnsForRow(row) {\n        var selections = [], cursor = this.$editor.getCursorPosition();\n        if (this.$editor.session.getSelection().isEmpty()) {\n            // todo: support multicursor\n            if (row == cursor.row)\n                selections.push(cursor.column);\n        }\n\n        return selections;\n    }\n\n    /**\n     * @param {number[][]} cellWidths\n     */\n    $setBlockCellWidthsToMax(cellWidths) {\n        var startingNewBlock = true, blockStartRow, blockEndRow, maxWidth;\n        var columnInfo = this.$izip_longest(cellWidths);\n\n        for (var c = 0, l = columnInfo.length; c < l; c++) {\n            var column = columnInfo[c];\n            if (!column.push) {\n                console.error(column);\n                continue;\n            }\n            // add an extra None to the end so that the end of the column automatically\n            // finishes a block\n            column.push(NaN);\n\n            for (var r = 0, s = column.length; r < s; r++) {\n                var width = column[r];\n                if (startingNewBlock) {\n                    blockStartRow = r;\n                    maxWidth = 0;\n                    startingNewBlock = false;\n                }\n                if (isNaN(width)) {\n                    // block ended\n                    blockEndRow = r;\n\n                    for (var j = blockStartRow; j < blockEndRow; j++) {\n                        cellWidths[j][c] = maxWidth;\n                    }\n                    startingNewBlock = true;\n                }\n\n                maxWidth = Math.max(maxWidth, width);\n            }\n        }\n\n        return cellWidths;\n    }\n\n    /**\n     * @param {number[]} selectionColumns\n     * @param {number} cellRightEdge\n     * @returns {number}\n     */\n    $rightmostSelectionInCell(selectionColumns, cellRightEdge) {\n        var rightmost = 0;\n\n        if (selectionColumns.length) {\n            var lengths = [];\n            for (var s = 0, length = selectionColumns.length; s < length; s++) {\n                if (selectionColumns[s] <= cellRightEdge)\n                    lengths.push(s);\n                else\n                    lengths.push(0);\n            }\n            rightmost = Math.max.apply(Math, lengths);\n        }\n\n        return rightmost;\n    }\n\n    /**\n     * @param {number} row\n     * @returns {number[]}\n     */\n    $tabsForRow(row) {\n        var rowTabs = [], line = this.$editor.session.getLine(row),\n            re = /\\t/g, match;\n\n        while ((match = re.exec(line)) != null) {\n            rowTabs.push(match.index);\n        }\n\n        return rowTabs;\n    }\n\n    /**\n     * @param {number} row\n     * @param {number[]} widths\n     */\n    $adjustRow(row, widths) {\n        var rowTabs = this.$tabsForRow(row);\n\n        if (rowTabs.length == 0)\n            return;\n\n        var bias = 0, location = -1;\n\n        // this always only contains two elements, so we're safe in the loop below\n        var expandedSet = this.$izip(widths, rowTabs);\n\n        for (var i = 0, l = expandedSet.length; i < l; i++) {\n            var w = expandedSet[i][0], it = expandedSet[i][1];\n            location += 1 + w;\n            it += bias;\n            var difference = location - it;\n\n            if (difference == 0)\n                continue;\n\n            var partialLine = this.$editor.session.getLine(row).substr(0, it );\n            var strippedPartialLine = partialLine.replace(/\\s*$/g, \"\");\n            var ispaces = partialLine.length - strippedPartialLine.length;\n\n            if (difference > 0) {\n                // put the spaces after the tab and then delete the tab, so any insertion\n                // points behave as expected\n                this.$editor.session.getDocument().insertInLine({row: row, column: it + 1}, Array(difference + 1).join(\" \") + \"\\t\");\n                this.$editor.session.getDocument().removeInLine(row, it, it + 1);\n\n                bias += difference;\n            }\n\n            if (difference < 0 && ispaces >= -difference) {\n                this.$editor.session.getDocument().removeInLine(row, it + difference, it);\n                bias += difference;\n            }\n        }\n    }\n\n    /**\n     * The is a (naive) Python port--but works for these purposes\n     * @param {any[][]} iterables\n     */\n    $izip_longest(iterables) {\n        if (!iterables[0])\n            return [];\n        var longest = iterables[0].length;\n        var iterablesLength = iterables.length;\n\n        for (var i = 1; i < iterablesLength; i++) {\n            var iLength = iterables[i].length;\n            if (iLength > longest)\n                longest = iLength;\n        }\n\n        var expandedSet = [];\n\n        for (var l = 0; l < longest; l++) {\n            var set = [];\n            for (var i = 0; i < iterablesLength; i++) {\n                if (iterables[i][l] === \"\")\n                    set.push(NaN);\n                else\n                    set.push(iterables[i][l]);\n            }\n\n            expandedSet.push(set);\n        }\n\n\n        return expandedSet;\n    }\n\n    /**\n     * an even more (naive) Python port\n     * @param {string | any[]} widths\n     * @param {string | any[]} tabs\n     */\n    $izip(widths, tabs) {\n        // grab the shorter size\n        var size = widths.length >= tabs.length ? tabs.length : widths.length;\n\n        var expandedSet = [];\n        for (var i = 0; i < size; i++) {\n            var set = [ widths[i], tabs[i] ];\n            expandedSet.push(set);\n        }\n        return expandedSet;\n    }\n\n}\n\nexports.ElasticTabstopsLite = ElasticTabstopsLite;\n\nvar Editor = require(\"../editor\").Editor;\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    useElasticTabstops: {\n        /**\n         * @param {boolean} val\n         * @this {Editor}\n         */\n        set: function(val) {\n            if (val) {\n                if (!this.elasticTabstops)\n                    this.elasticTabstops = new ElasticTabstopsLite(this);\n                this.commands.on(\"afterExec\", this.elasticTabstops.onAfterExec);\n                this.commands.on(\"exec\", this.elasticTabstops.onExec);\n                this.on(\"change\", this.elasticTabstops.onChange);\n            } else if (this.elasticTabstops) {\n                this.commands.removeListener(\"afterExec\", this.elasticTabstops.onAfterExec);\n                this.commands.removeListener(\"exec\", this.elasticTabstops.onExec);\n                this.removeListener(\"change\", this.elasticTabstops.onChange);\n            }\n        }\n    }\n});\n"],"names":["require","ElasticTabstopsLite","constructor","editor","this","$editor","self","changedRows","recordChanges","onAfterExec","processRows","onExec","onChange","delta","indexOf","start","row","push","end","rows","$inChange","checkedRows","r","rowCount","length","cellWidthObj","$findCellWidthsForBlock","cellWidths","$setBlockCellWidthsToMax","rowIndex","firstRow","w","l","widths","$adjustRow","rowIter","$cellWidthsForRow","unshift","numRows","session","getLength","selectionColumns","$selectionColumnsForRow","tabs","concat","$tabsForRow","map","el","slice","line","getLine","i","len","leftEdge","rightEdge","rightmostSelection","$rightmostSelectionInCell","cell","substring","Math","max","replace","selections","cursor","getCursorPosition","getSelection","isEmpty","column","blockStartRow","blockEndRow","maxWidth","startingNewBlock","columnInfo","$izip_longest","c","NaN","s","width","isNaN","j","console","error","cellRightEdge","rightmost","lengths","apply","match","rowTabs","re","exec","index","bias","location","expandedSet","$izip","it","difference","partialLine","substr","strippedPartialLine","ispaces","getDocument","insertInLine","Array","join","removeInLine","iterables","longest","iterablesLength","iLength","set","size","exports","Editor","prototype","useElasticTabstops","val","elasticTabstops","commands","on","removeListener"],"sourceRoot":""}