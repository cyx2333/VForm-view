{"version":3,"file":"js/9260.cb4c3323.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/matching_brace_outdent.js","webpack://admin/./node_modules/ace-code/src/mode/odin.js","webpack://admin/./node_modules/ace-code/src/mode/odin_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n","var oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar OdinHighlightRules =\n  require(\"./odin_highlight_rules\").OdinHighlightRules;\nvar MatchingBraceOutdent =\n  require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function () {\n  this.HighlightRules = OdinHighlightRules;\n  this.$outdent = new MatchingBraceOutdent();\n  this.foldingRules = new CStyleFoldMode();\n  this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function () {\n  this.lineCommentStart = \"//\";\n  this.blockComment = { start: \"/*\", end: \"*/\" };\n\n  this.getNextLineIndent = function (state, line, tab) {\n    var indent = this.$getIndent(line);\n\n    var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n    var tokens = tokenizedLine.tokens;\n\n    if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n      return indent;\n    }\n\n    if (state == \"start\") {\n      var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n      if (match) {\n        indent += tab;\n      }\n    }\n\n    return indent;\n  }; //end getNextLineIndent\n\n  this.checkOutdent = function (state, line, input) {\n    return this.$outdent.checkOutdent(line, input);\n  };\n\n  this.autoOutdent = function (state, doc, row) {\n    this.$outdent.autoOutdent(doc, row);\n  };\n\n  this.$id = \"ace/mode/odin\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","var oop = require(\"../lib/oop\");\nvar DocCommentHighlightRules =\n  require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar OdinHighlightRules = function () {\n  var keywords =\n    \"using|transmute|cast|distinct|opaque|where|\" +\n    \"struct|enum|union|bit_field|bit_set|\" +\n    \"if|when|else|do|switch|case|break|fallthrough|\" +\n    \"size_of|offset_of|type_info_if|typeid_of|type_of|align_of|\" +\n    \"or_return|or_else|inline|no_inline|\" +\n    \"import|package|foreign|defer|auto_cast|map|matrix|proc|\" +\n    \"for|continue|not_in|in\";\n\n  const cartesian = (...a) =>\n    a\n      .reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())))\n      .map((parts) => parts.join(\"\"));\n\n  var builtinTypes = [\n    \"int\",\n    \"uint\",\n    \"uintptr\",\n    \"typeid\",\n    \"rawptr\",\n    \"string\",\n    \"cstring\",\n    \"i8\",\n    \"u8\",\n    \"any\",\n    \"byte\",\n    \"rune\",\n    \"bool\",\n    \"b8\",\n    \"b16\",\n    \"b32\",\n    \"b64\",\n    ...cartesian([\"i\", \"u\"], [\"16\", \"32\", \"64\", \"128\"], [\"\", \"le\", \"be\"]),\n    ...cartesian([\"f\"], [\"16\", \"32\", \"64\"], [\"\", \"le\", \"be\"]),\n    ...cartesian([\"complex\"], [\"32\", \"64\", \"128\"]),\n    ...cartesian([\"quaternion\"], [\"64\", \"128\", \"256\"])\n  ].join(\"|\");\n\n  var operators = [\n    \"\\\\*\",\n    \"/\",\n    \"%\",\n    \"%%\",\n    \"<<\",\n    \">>\",\n    \"&\",\n    \"&~\",\n    \"\\\\+\",\n    \"\\\\-\",\n    \"~\",\n    \"\\\\|\",\n    \">\",\n    \"<\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"!=\"\n  ]\n    .concat(\":\")\n    .map((operator) => operator + \"=\")\n    .concat(\"=\", \":=\", \"::\", \"->\", \"\\\\^\", \"&\", \":\")\n    .join(\"|\");\n\n  var builtinFunctions = \"new|cap|copy|panic|len|make|delete|append|free\";\n  var builtinConstants = \"nil|true|false\";\n\n  var keywordMapper = this.createKeywordMapper(\n    {\n      keyword: keywords,\n      \"constant.language\": builtinConstants,\n      \"support.function\": builtinFunctions,\n      \"support.type\": builtinTypes\n    },\n    \"\"\n  );\n\n  var stringEscapeRe =\n    \"\\\\\\\\(?:[0-7]{3}|x\\\\h{2}|u{4}|U\\\\h{6}|[abfnrtv'\\\"\\\\\\\\])\".replace(\n      /\\\\h/g,\n      \"[a-fA-F\\\\d]\"\n    );\n\n  this.$rules = {\n    start: [\n      {\n        token: \"comment\",\n        regex: /\\/\\/.*$/\n      },\n      DocCommentHighlightRules.getStartRule(\"doc-start\"),\n      {\n        token: \"comment.start\", // multi line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      },\n      {\n        token: \"string\", // single line\n        regex: /\"(?:[^\"\\\\]|\\\\.)*?\"/\n      },\n      {\n        token: \"string\", // raw\n        regex: \"`\",\n        next: \"bqstring\"\n      },\n      {\n        token: \"support.constant\",\n        regex: /#[a-z_]+/\n      },\n      {\n        token: \"constant.numeric\", // rune\n        regex:\n          \"'(?:[^\\\\'\\uD800-\\uDBFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\" +\n          stringEscapeRe.replace('\"', \"\") +\n          \")'\"\n      },\n      {\n        token: \"constant.numeric\", // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      },\n      {\n        token: \"constant.numeric\", // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      },\n      {\n        token: [\n          \"entity.name.function\",\n          \"text\",\n          \"keyword.operator\",\n          \"text\",\n          \"keyword\"\n        ],\n        regex: \"([a-zA-Z_$][a-zA-Z0-9_$]*)(\\\\s+)(::)(\\\\s+)(proc)\\\\b\"\n      },\n      {\n        token: function (val) {\n          if (val[val.length - 1] == \"(\") {\n            return [\n              {\n                type: keywordMapper(val.slice(0, -1)) || \"support.function\",\n                value: val.slice(0, -1)\n              },\n              {\n                type: \"paren.lparen\",\n                value: val.slice(-1)\n              }\n            ];\n          }\n\n          return keywordMapper(val) || \"identifier\";\n        },\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\\\\(?\"\n      },\n      {\n        token: \"keyword.operator\",\n        regex: operators\n      },\n      {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\,|\\\\;|\\\\.\"\n      },\n      {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      },\n      {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      },\n      {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }\n    ],\n    comment: [\n      {\n        token: \"comment.end\",\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      },\n      {\n        defaultToken: \"comment\"\n      }\n    ],\n    bqstring: [\n      {\n        token: \"string\",\n        regex: \"`\",\n        next: \"start\"\n      },\n      {\n        defaultToken: \"string\"\n      }\n    ]\n  };\n\n  this.embedRules(DocCommentHighlightRules, \"doc-\", [\n    DocCommentHighlightRules.getEndRule(\"start\")\n  ]);\n};\noop.inherits(OdinHighlightRules, TextHighlightRules);\n\nexports.OdinHighlightRules = OdinHighlightRules;\n"],"names":["oop","require","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","exports","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","OdinHighlightRules","CStyleFoldMode","Mode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","type","$id","keywords","cartesian","a","reduce","b","flatMap","d","map","e","flat","parts","join","builtinTypes","operators","concat","operator","builtinFunctions","builtinConstants","keywordMapper","createKeywordMapper","keyword","stringEscapeRe","val","slice","value","comment","bqstring","embedRules"],"sourceRoot":""}