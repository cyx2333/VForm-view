{"version":3,"file":"js/3300.d43a0fd5.js","mappings":"gHAEA,IAAIA,EAAMC,EAAQ,OAClB,MAAM,cAACC,GAAiBD,EAAQ,OAChC,IAAIE,EAAkBF,EAAAA,OAAAA,EAClBG,EAAeH,EAAAA,OAAAA,aACfI,EAAsB,WACtB,IAAIC,EAAgB,IAAIF,EAAa,CAACG,kBAAkB,IAAOC,gBAC/DC,KAAKC,cAAcJ,GACnBG,KAAKE,QAAQR,GAEbM,KAAKG,IAAI,uBAAwB,aAAa,SAAUC,EAAOC,EAAQC,EAAQC,EAASC,GACpF,GAAY,KAARA,EAAa,CACb,IAAIC,EAAWH,EAAOI,oBAAoBC,MACtCC,EAAW,IAAInB,EAAcc,EAASE,EAASI,IAAKJ,EAASK,QAC7DC,EAAQH,EAASI,mBAAqBJ,EAASK,eACnD,IAAKF,EAAO,OACZ,GAAmB,KAAfA,EAAMG,MACN,MAAO,CACHV,KAAM,OACNW,UAAW,CAAC,EAAG,GAG3B,CACJ,GACJ,EAEA5B,EAAI6B,SAASxB,EAAqBF,GAElC2B,EAAQ,EAAsBzB,C,wBC3B9B,IAAIL,EAAMC,EAAQ,OACd8B,EAAY9B,EAAAA,OAAAA,EACZC,EAAgBD,EAAAA,OAAAA,cAEpB,SAAS+B,EAAGR,EAAOS,GACf,OAAOT,GAASA,EAAMS,KAAKC,YAAYD,EAAO,SAAW,CAC7D,CAGA,IAAI7B,EAAe,WAEfK,KAAKG,IAAI,iBAAkB,aAAa,SAAUC,EAAOC,EAAQC,EAAQC,EAASC,GAC9E,GAAY,KAARA,GAAuB,KAARA,EAAa,CAC5B,IAAIkB,EAAQlB,EACRmB,EAAWpB,EAAQqB,IAAIC,aAAavB,EAAOI,qBAC/C,GAAiB,KAAbiB,GAAgC,MAAbA,GAAgC,KAAZA,GAAmBrB,EAAOwB,2BACjE,MAAO,CACHtB,KAAMkB,EAAQC,EAAWD,EACzBP,WAAW,GAInB,IAAIY,EAASzB,EAAO0B,oBAChBC,EAAO1B,EAAQqB,IAAIM,QAAQH,EAAOlB,KAClCsB,EAAYF,EAAKG,UAAUL,EAAOjB,OAAQiB,EAAOjB,OAAS,GAC1DF,EAAW,IAAInB,EAAcc,EAASwB,EAAOlB,IAAKkB,EAAOjB,QACzDC,EAAQH,EAASI,kBAErB,GAAImB,GAAaT,IAAUH,EAAGR,EAAO,oBAAsBQ,EAAGR,EAAO,WAEjE,MAAO,CACHP,KAAM,GACNW,UAAW,CAAC,EAAG,IAOvB,GAHKJ,IACDA,EAAQH,EAASK,iBAEhBF,EACD,OAEJ,MAAOQ,EAAGR,EAAO,mBAAqBQ,EAAGR,EAAO,cAC5CA,EAAQH,EAASK,eAErB,IAAIoB,GAAcF,GAAaA,EAAUG,MAAM,MAC/C,GAAIf,EAAGR,EAAO,sBAAwBsB,GAA2B,KAAbF,IAAsBZ,EAAGR,EAAO,2BAA6BsB,GAA2B,KAAbF,GAC3H,MAAO,CACH3B,KAAMkB,EAAQA,EACdP,UAAW,CAAC,EAAG,GAG3B,CACJ,IAEAnB,KAAKG,IAAI,iBAAkB,YAAY,SAASC,EAAOC,EAAQC,EAAQC,EAASgC,GAC5E,IAAIZ,EAAWpB,EAAQqB,IAAIC,aAAaU,GACxC,IAAKA,EAAMC,gBAA8B,KAAZb,GAA+B,KAAZA,GAAkB,CAC9D,IAAIM,EAAO1B,EAAQqB,IAAIM,QAAQK,EAAM5B,MAAME,KACvCsB,EAAYF,EAAKG,UAAUG,EAAM5B,MAAMG,OAAS,EAAGyB,EAAM5B,MAAMG,OAAS,GAC5E,GAAIqB,GAAaR,EAEb,OADAY,EAAME,IAAI3B,SACHyB,CAEf,CACJ,IAEAvC,KAAKG,IAAI,cAAe,aAAa,SAAUC,EAAOC,EAAQC,EAAQC,EAASC,GAC3E,GAAY,KAARA,EAAa,CACb,IAAIC,EAAWH,EAAOI,oBAAoBC,MACtCC,EAAW,IAAInB,EAAcc,EAASE,EAASI,IAAKJ,EAASK,QAC7DC,EAAQH,EAASI,mBAAqBJ,EAASK,eAGnD,IAAKF,KAAWQ,EAAGR,EAAO,aAAeQ,EAAGR,EAAO,mBAAqBQ,EAAGR,EAAO,mBAAqBQ,EAAGR,EAAO,qBAAuBQ,EAAGR,EAAO,oBAC9I,OAGJ,GAAIQ,EAAGR,EAAO,6BACV,OACJ,GAAIQ,EAAGR,EAAO,mBAAoB,CAC9B,IAAI2B,EAAiB9B,EAAS+B,wBAA0B5B,EAAMG,MAAM0B,OACpE,GAAInC,EAASK,OAAS4B,EAClB,OACJ,GAAIjC,EAASK,QAAU4B,EAAgB,CACnC,IAAIG,EAAYjC,EAASkC,cAEzB,GAAID,GAAatB,EAAGsB,EAAW,mBAC3B,OACJjC,EAASK,cACb,CACJ,CAEA,GAAI,QAAQ8B,KAAKxC,EAAQ2B,QAAQzB,EAASI,KAAKmC,MAAMvC,EAASK,SAC1D,OAGJ,OAAQS,EAAGR,EAAO,YAEd,GADAA,EAAQH,EAASK,eACE,KAAfF,EAAMG,MAAc,CACpBH,EAAQH,EAASkC,cACjB,KACJ,CAGJ,IAAIG,EAAWrC,EAASsC,qBACpBC,EAAcvC,EAAS+B,wBAG3B,GAAIpB,EAAGX,EAASK,eAAgB,gBAC5B,OAEJ,IAAImC,EAAUrC,EAAMG,MAIpB,GAHI+B,GAAYxC,EAASI,MACrBuC,EAAUA,EAAQhB,UAAU,EAAG3B,EAASK,OAASqC,IAEjDnD,KAAKqD,cAAgBrD,KAAKqD,aAAaC,eAAeF,EAAQG,eAC7D,OAEL,MAAO,CACJ/C,KAAM,MAAa4C,EAAU,IAC7BjC,UAAW,CAAC,EAAG,GAEtB,CACJ,IAEAnB,KAAKG,IAAI,aAAc,aAAa,SAAUC,EAAOC,EAAQC,EAAQC,EAASC,GAC1E,GAAY,MAARA,EAAc,CACd,IAAIuB,EAASzB,EAAO0B,oBAChBC,EAAO1B,EAAQ2B,QAAQH,EAAOlB,KAC9BD,EAAW,IAAInB,EAAcc,EAASwB,EAAOlB,IAAKkB,EAAOjB,QACzDC,EAAQH,EAASI,kBAErB,GAAIO,EAAGR,EAAO,MAA4C,IAArCA,EAAMS,KAAKgC,QAAQ,aAAqB,CACzD,GAAmB,MAAfzC,EAAMG,MACN,OAEJ,MAAOH,IAA6C,IAApCA,EAAMS,KAAKgC,QAAQ,YAC/BzC,EAAQH,EAASK,eAGrB,IAAKF,EACD,OAGJ,IAAI0C,EAAM1C,EAAMG,MACZL,EAAMD,EAASsC,qBAInB,GADAnC,EAAQH,EAASK,gBACZF,IAA4C,IAAnCA,EAAMS,KAAKgC,QAAQ,WAC7B,OAGJ,GAAIxD,KAAKqD,eAAiBrD,KAAKqD,aAAaI,KAASzD,KAAKqD,aAAc,CACpE,IAAIR,EAAYtC,EAAQmD,WAAW3B,EAAOlB,IAAKkB,EAAOjB,OAAO,GAEzD6C,GADA1B,EAAO1B,EAAQ2B,QAAQrB,GACVb,KAAK4D,WAAW3B,IAC7B4B,EAASF,EAAapD,EAAQuD,eAElC,OAAIjB,GAAiC,OAApBA,EAAU3B,MAChB,CACHV,KAAM,KAAOqD,EAAS,KAAOF,EAC7BxC,UAAW,CAAC,EAAG0C,EAAOjB,OAAQ,EAAGiB,EAAOjB,SAGrC,CACHpC,KAAM,KAAOqD,EAGzB,CACJ,CACJ,CACJ,GAEJ,EAEAtE,EAAI6B,SAASzB,EAAc2B,GAE3BD,EAAQ1B,aAAeA,C,wBCnLvB,IAAIJ,EAAMC,EAAQ,OACduE,EAAQvE,EAAAA,OAAAA,EACRwE,EAAexE,EAAAA,OAAAA,SAEfyE,EAAW5C,EAAQ,EAAW,SAAS6C,GACnCA,IACAlE,KAAKmE,mBAAqB,IAAIC,OAC1BpE,KAAKmE,mBAAmBE,OAAOC,QAAQ,YAAa,IAAMJ,EAAavD,QAE3EX,KAAKuE,kBAAoB,IAAIH,OACzBpE,KAAKuE,kBAAkBF,OAAOC,QAAQ,YAAa,IAAMJ,EAAazB,MAGlF,EACAlD,EAAI6B,SAAS6C,EAAUD,GAEvB,WAEIhE,KAAKmE,mBAAqB,mCAC1BnE,KAAKuE,kBAAoB,uCACzBvE,KAAKwE,yBAA0B,uBAC/BxE,KAAKyE,yBAA2B,2BAChCzE,KAAK0E,cAAgB,4BAGrB1E,KAAK2E,mBAAqB3E,KAAK4E,cAgB/B5E,KAAK4E,cAAgB,SAASrE,EAASsE,EAAWhE,GAC9C,IAAIoB,EAAO1B,EAAQ2B,QAAQrB,GAE3B,GAAIb,KAAKwE,yBAAyBzB,KAAKd,KAE9BjC,KAAK0E,cAAc3B,KAAKd,KAAUjC,KAAKyE,yBAAyB1B,KAAKd,GACtE,MAAO,GAGf,IAAI6C,EAAK9E,KAAK2E,mBAAmBpE,EAASsE,EAAWhE,GAErD,OAAKiE,GAAM9E,KAAK0E,cAAc3B,KAAKd,GACxB,QAEJ6C,CACX,EAEA9E,KAAK+E,mBAAqB,SAASxE,EAASsE,EAAWhE,EAAKmE,GACxD,IAAI/C,EAAO1B,EAAQ2B,QAAQrB,GAE3B,GAAIb,KAAK0E,cAAc3B,KAAKd,GACxB,OAAOjC,KAAKiF,sBAAsB1E,EAAS0B,EAAMpB,GAErD,IAAIyB,EAAQL,EAAKK,MAAMtC,KAAKmE,oBAC5B,GAAI7B,EAAO,CACP,IAAI4C,EAAI5C,EAAM6C,MAEd,GAAI7C,EAAM,GACN,OAAOtC,KAAKoF,oBAAoB7E,EAAS+B,EAAM,GAAIzB,EAAKqE,GAE5D,IAAI3C,EAAQhC,EAAQ8E,oBAAoBxE,EAAKqE,EAAI5C,EAAM,GAAGM,OAAQ,GASlE,OAPIL,IAAUA,EAAMC,gBACZwC,EACAzC,EAAQvC,KAAKsF,gBAAgB/E,EAASM,GAClB,OAAbgE,IACPtC,EAAQ,OAGTA,CACX,CAEA,GAAkB,cAAdsC,EAAJ,CAGIvC,EAAQL,EAAKK,MAAMtC,KAAKuE,mBAC5B,GAAIjC,EAAO,CACH4C,EAAI5C,EAAM6C,MAAQ7C,EAAM,GAAGM,OAE/B,OAAIN,EAAM,GACCtC,KAAKuF,oBAAoBhF,EAAS+B,EAAM,GAAIzB,EAAKqE,GAErD3E,EAAQ8E,oBAAoBxE,EAAKqE,GAAI,EAChD,CAVU,CAWd,EAEAlF,KAAKsF,gBAAkB,SAAS/E,EAASM,GACrC,IAAIoB,EAAO1B,EAAQ2B,QAAQrB,GACvB2E,EAAcvD,EAAKwD,OAAO,MAC1BC,EAAW7E,EACX8E,EAAc1D,EAAKW,OACvB/B,GAAY,EACZ,IAAI+E,EAAS/E,EACTgF,EAAStF,EAAQuF,YACrB,QAASjF,EAAMgF,EAAQ,CACnB5D,EAAO1B,EAAQ2B,QAAQrB,GACvB,IAAIgD,EAAS5B,EAAKwD,OAAO,MACzB,IAAgB,IAAZ5B,EAAJ,CAEA,GAAK2B,EAAc3B,EACf,MACJ,IAAIkC,EAAW/F,KAAK+E,mBAAmBxE,EAAS,MAAOM,GAEvD,GAAIkF,EAAU,CACV,GAAIA,EAASpF,MAAME,KAAO6E,EACtB,MACG,GAAIK,EAASvD,cAChB3B,EAAMkF,EAAStD,IAAI5B,SAChB,GAAI2E,GAAe3B,EACtB,KAER,CACA+B,EAAS/E,CAdG,CAehB,CAEA,OAAO,IAAIkD,EAAM2B,EAAUC,EAAaC,EAAQrF,EAAQ2B,QAAQ0D,GAAQhD,OAC5E,EAMA5C,KAAKiF,sBAAwB,SAAS1E,EAAS0B,EAAMpB,GACjD,IAAI8E,EAAc1D,EAAKwD,OAAO,QAC1BI,EAAStF,EAAQuF,YACjBJ,EAAW7E,EAEXmF,EAAK,uCACLC,EAAQ,EACZ,QAASpF,EAAMgF,EAAQ,CACnB5D,EAAO1B,EAAQ2B,QAAQrB,GACvB,IAAIqF,EAAIF,EAAGG,KAAKlE,GAChB,GAAKiE,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,KAChB,CAEA,IAAIL,EAAS/E,EACb,GAAI+E,EAASF,EACT,OAAO,IAAI3B,EAAM2B,EAAUC,EAAaC,EAAQ3D,EAAKW,OAE7D,CAEH,EAAEwD,KAAKnC,EAASoC,U,wBC5JjB,IAAI9G,EAAMC,EAAQ,OACd8G,EAAc9G,EAAAA,OAAAA,EACd+G,EAAY/G,EAAAA,OAAAA,EAEZyE,EAAW5C,EAAQ,EAAW,SAAU6C,GACpCA,IACAlE,KAAKmE,mBAAqB,IAAIC,OAC1BpE,KAAKmE,mBAAmBE,OAAOC,QAAQ,YAAa,IAAMJ,EAAavD,QAC3EX,KAAKuE,kBAAoB,IAAIH,OAAOpE,KAAKuE,kBAAkBF,OAAOC,QAAQ,YAAa,IAAMJ,EAAazB,OAG9GzC,KAAKwG,YAAc,IAAIF,CAC3B,EACA/G,EAAI6B,SAAS6C,EAAUsC,GAEvB,WAEIvG,KAAKyG,uBAAyBzG,KAAK+E,mBACnC/E,KAAK0G,kBAAoB1G,KAAK4E,cAE9B5E,KAAK4E,cAAgB,SAAUrE,EAASsE,EAAWhE,GAC/C,IAAIiE,EAAK9E,KAAK0G,kBAAkBnG,EAASsE,EAAWhE,GACpD,OAAKiE,GACM9E,KAAKwG,YAAY5B,cAAcrE,EAASsE,EAAWhE,EAGlE,EAEAb,KAAK+E,mBAAqB,SAAUxE,EAASsE,EAAWhE,EAAKmE,GACzD,IAAIzC,EAAQvC,KAAKyG,uBAAuBlG,EAASsE,EAAWhE,EAAKmE,GACjE,OAAIzC,GAEGvC,KAAKwG,YAAYzB,mBAAmBxE,EAASsE,EAAWhE,EACnE,CAEH,EAAEuF,KAAKnC,EAASoC,U,wBCnCjB,IAAI9G,EAAMC,EAAQ,OACduE,EAAQvE,EAAAA,OAAAA,EACRwE,EAAexE,EAAAA,OAAAA,SAEfyE,EAAW5C,EAAQ,EAAW,SAASgC,EAAcsD,GACrD3C,EAAaoC,KAAKpG,MAClBA,KAAKqD,aAAeA,GAAgB,CAAC,EACrCrD,KAAK2G,gBAAkBpH,EAAIqH,MAAM,CAAC,EAAG5G,KAAKqD,cACtCsD,GACApH,EAAIqH,MAAM5G,KAAK2G,gBAAiBA,EAExC,EACApH,EAAI6B,SAAS6C,EAAUD,GAEvB,IAAI6C,EAAM,WACN7G,KAAK8G,QAAU,GACf9G,KAAK+G,SAAU,EACf/G,KAAKgH,aAAc,EACnBhH,KAAKW,MAAQ,CAACE,IAAK,EAAGC,OAAQ,GAC9Bd,KAAKyC,IAAM,CAAC5B,IAAK,EAAGC,OAAQ,EAChC,EAEA,SAASS,EAAGR,EAAOS,GACf,OAAOT,EAAMS,KAAKC,YAAYD,EAAO,SAAW,CACpD,EAEA,WAEIxB,KAAK4E,cAAgB,SAASrE,EAASsE,EAAWhE,GAC9C,IAAI4C,EAAMzD,KAAKiH,mBAAmB1G,EAASM,GAE3C,OAAK4C,EAGDA,EAAIsD,UAAatD,EAAIqD,SAAWrD,EAAIuD,YACf,iBAAdnC,EAA+B,MAAQ,IAE7CpB,EAAIqD,SAAWrD,EAAIuD,aAAehH,KAAKqD,aAAaC,eAAeG,EAAIqD,QAAQvD,gBAGhFvD,KAAKkH,kBAAkB3G,EAASM,EAAK4C,EAAIqD,QAASrD,EAAIhB,IAAI3B,QAFnD,GAKJ,QAXId,KAAKmH,qBAAqB5G,EAASM,EAYlD,EAEAb,KAAKmH,qBAAuB,SAAS5G,EAASM,GAC1C,MAAI,UAAUkC,KAAKxC,EAAQ6G,SAASvG,KAAS,MAAMkC,KAAKxC,EAAQ2B,QAAQrB,IAC7D,QACJ,EACX,EAKAb,KAAKiH,mBAAqB,SAAS1G,EAASM,GAIxC,IAHA,IAAIwG,EAAS9G,EAAQ+G,UAAUzG,GAC3B4C,EAAM,IAAIoD,EAEL3B,EAAI,EAAGA,EAAImC,EAAOzE,OAAQsC,IAAK,CACpC,IAAInE,EAAQsG,EAAOnC,GACnB,GAAI3D,EAAGR,EAAO,YAAa,CAIvB,GAHA0C,EAAIhB,IAAI3B,OAAS2C,EAAI9C,MAAMG,OAASC,EAAMG,MAAM0B,OAChDa,EAAIsD,QAAUxF,EAAGR,EAAO,gBACxBA,EAAQsG,IAASnC,IACZnE,EACD,OAAO,KAEX,GADA0C,EAAIqD,QAAU/F,EAAMG,MACA,KAAhBH,EAAMG,MAAc,CAEpB,GADAH,EAAQsG,IAASnC,IACZnE,EAAO,OAAO,KACnB0C,EAAIqD,QAAU/F,EAAMG,KACxB,CAEA,IADAuC,EAAIhB,IAAI3B,QAAUC,EAAMG,MAAM0B,OACzBsC,IAAKA,EAAImC,EAAOzE,OAAQsC,IAGzB,GAFAnE,EAAQsG,EAAOnC,GACfzB,EAAIhB,IAAI3B,QAAUC,EAAMG,MAAM0B,OAC1BrB,EAAGR,EAAO,aAAc,CACxB0C,EAAIuD,YAA6B,MAAfjG,EAAMG,MACxB,KACJ,CAEJ,OAAOuC,CACX,CAAO,GAAIlC,EAAGR,EAAO,aAEjB,OADA0C,EAAIuD,YAA6B,MAAfjG,EAAMG,MACjBuC,EAEXA,EAAI9C,MAAMG,QAAUC,EAAMG,MAAM0B,MACpC,CAEA,OAAO,IACX,EAEA5C,KAAKkH,kBAAoB,SAAS3G,EAASM,EAAKiG,EAASnB,GAGrD,IAFA,IAAI0B,EAAS9G,EAAQ+G,UAAUzG,GAC3BC,EAAS,EACJoE,EAAI,EAAGA,EAAImC,EAAOzE,OAAQsC,IAAK,CACpC,IAAInE,EAAQsG,EAAOnC,GAEnB,GADApE,GAAUC,EAAMG,MAAM0B,SAClB9B,EAAS6E,EAAc,IAEvBpE,EAAGR,EAAO,kBACVA,EAAQsG,EAAOnC,EAAI,GACf3D,EAAGR,EAAO,aAA+B,KAAhBA,EAAMG,QAC/BH,EAAQsG,EAAOnC,EAAI,IAEnBnE,GAASA,EAAMG,OAAS4F,GACxB,OAAO,CAEnB,CACA,OAAO,CACX,EAEA9G,KAAK+E,mBAAqB,SAASxE,EAASsE,EAAWhE,GACnD,IAAI0G,EAAWvH,KAAKiH,mBAAmB1G,EAASM,GAChD,IAAK0G,EACD,OAAOvH,KAAKmH,qBAAqB5G,EAASM,IAAQN,EAAQ8E,oBACtDxE,EAAKN,EAAQ2B,QAAQrB,GAAK+B,QAElC,IAAI4E,EAAOjH,EAAQkH,gBAAgB,CAAC5G,IAAKA,EAAKC,OAAQ,IACtD,OAAI0G,EACO,IAAIzD,EACPyD,EAAKE,QAAQjF,IAAI5B,IAAK2G,EAAKE,QAAQjF,IAAI3B,OAAQ0G,EAAKG,SAAShH,MAAME,IAAK2G,EAAKG,SAAShH,MAAMG,aAFpG,CAIJ,CAEH,GAAEsF,KAAKnC,EAASoC,U,uBC9HjB,IAAI9G,EAAMC,EAAQ,OACdoI,EAAiBpI,EAAAA,MAAAA,KACjBqI,EAA0BrI,EAAAA,OAAAA,EAE1BsI,EAAO,WACPF,EAAexB,KAAKpG,MACpBA,KAAK+H,eAAiBF,EACtB7H,KAAKgI,WAAahI,KAAKiI,iBAC3B,EACA1I,EAAI6B,SAAS0G,EAAMF,GAEnB,WAEI5H,KAAKkI,aAAe,WAChB,OAAO,IACX,EAEAlI,KAAKmI,IAAM,qBACXnI,KAAKoI,cAAgB,wBACxB,EAAEhC,KAAK0B,EAAKzB,WAEbhF,EAAQyG,KAAOA,C,wBCrBf,IAAIvI,EAAMC,EAAQ,OACd6I,EAAqB7I,EAAAA,OAAAA,EAErBqI,EAA0B,WAE5B,IAAIS,EAAc,CAChBC,SAAU,oDACV/G,KAAM,qCAGJgH,EAAU,CACZC,SAAU,CACRC,YAAa,0BACbC,aAAc,yBAEhBC,YAAa,CACXD,aAAc,6CAIdE,EAAS,CACXC,OAAQ,wBACRC,UAAW,uBACXC,SAAU,aACVC,QAAS,mBACTC,QAAS,sCAGPC,EAAa,CACfV,SAAU,iDACVG,YAAa,8IAKbQ,KAAM,urLAkGJC,EAAa,CACfZ,SAAU,KACVG,YAAa,CACXU,QAAS,0BACTC,WAAY,oBACZC,QAAS,gBACTC,MAAO,iCAIPC,EAAW,CACbzH,KAAM,CACJ0H,aAAc,YACdC,YAAa,YACbC,YAAa,QAEfC,MAAO,CAAEnJ,MAAO,SAAU8B,IAAK,UAC/BsH,UAAW,CAAEpJ,MAAO,SAAU8B,IAAK,WAGrCzC,KAAKgK,OAAS,CACZ,MAAU,CAER,CACEjJ,MAAQ,sCACRkJ,MAAQP,EAASzH,KAAK0H,cAExB,CACE5I,MAAQ,qCACRkJ,MAAQP,EAASzH,KAAK2H,aAExB,CACE7I,MAAQ,qCACRkJ,MAAQP,EAASzH,KAAK4H,aAExB,CACE9I,MAAQ,wCACRkJ,MAAQP,EAASI,MAAMnJ,MACvBuJ,KAAO,qBAET,CACEnJ,MAAQ,qCACRkJ,MAAQP,EAASK,UAAUpJ,MAC3BuJ,KAAO,yBAGT,CACEnJ,MAAQ,6BACRkJ,MAAQpB,EAAOI,SAGjB,CACElI,MAAQ,iCACRkJ,MAAQpB,EAAOK,SAGjB,CACEnI,MAAQ,mCACRkJ,MAAQZ,EAAWT,YAAYa,OAEjC,CACE1I,MAAQ,qCACRkJ,MAAQZ,EAAWT,YAAYU,SAEjC,CACEvI,MAAQ,qCACRkJ,MAAQZ,EAAWT,YAAYW,YAEjC,CACExI,MAAQ,qCACRkJ,MAAQZ,EAAWT,YAAYY,SAGjC,CACEzI,MAAQf,KAAKmK,oBAAoB,CAE/B,qCAAsC7B,EAAYC,SAClD,+BAAgCD,EAAY9G,KAC5C,iDAAkDgH,EAAQC,SAASC,YACnE,kDAAmDF,EAAQC,SAASE,aACpE,qDAAsDH,EAAQI,YAAYD,aAE1E,qCAAqCE,EAAOC,OAC5C,wCAAyCD,EAAOE,UAChD,sCAAuCF,EAAOG,SAE9C,6BAA8BG,EAAWV,SACzC,6BAA8BU,EAAWP,YACzC,8BAA+BO,EAAWC,MAC3C,wBACDa,MAAQ,+BAEV,CACElJ,MAAQ,kBACRkJ,MAAQ,KAEV,CACElJ,MAAQ,sBACRkJ,MAAQ,KAEV,CACElJ,MAAQ,SACRkJ,MAAQ,SAEV,CACElJ,MAAQ,SACRkJ,MAAQ,WAEV,CACElJ,MAAQ,OACRkJ,MAAQ,SAGZ,kBAAqB,CAAC,CAClBlJ,MAAQ,wCACRkJ,MAAQP,EAASI,MAAMrH,IACvByH,KAAO,SACN,CACDE,aAAe,0CAGnB,sBAAyB,CAAC,CACtBrJ,MAAQ,qCACRkJ,MAAQP,EAASK,UAAUtH,IAC3ByH,KAAO,SACN,CACDE,aAAe,uCAIvB,EAEA7K,EAAI6B,SAASyG,EAAyBQ,GAEtChH,EAAQ,EAA0BwG,C,uBC3QlC,IAAItI,EAAMC,EAAQ,OACd6K,EAAW7K,EAAAA,OAAAA,KACX8K,EAA2B9K,EAAAA,OAAAA,yBAC3B+K,EAAuB/K,EAAAA,OAAAA,qBACvBgL,EAAehL,EAAAA,OAAAA,aACfI,EAAsBJ,EAAAA,OAAAA,EACtBiL,EAAqBjL,EAAAA,OAAAA,EAErBsI,EAAO,WACP9H,KAAK+H,eAAiBuC,EAEtBtK,KAAK0K,SAAW,IAAIH,EACpBvK,KAAKgI,WAAa,IAAIpI,EACtBI,KAAK2K,aAAe,IAAIF,CAC5B,EACAlL,EAAI6B,SAAS0G,EAAMuC,GAEnB,WAEIrK,KAAK4K,iBAAmB,KACxB5K,KAAK6K,aAAe,CAAClK,MAAO,KAAM8B,IAAK,MACvCzC,KAAK8K,QAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC9K,KAAK+K,iBAAmB,CACpB,IAAK,MAGT/K,KAAKgL,kBAAoB,SAAS5K,EAAO6B,EAAMgJ,GAC3C,IAAIpH,EAAS7D,KAAK4D,WAAW3B,GAEzBiJ,EAAgBlL,KAAKmL,eAAeC,cAAcnJ,EAAM7B,GACxDiH,EAAS6D,EAAc7D,OACvBgE,EAAWH,EAAc9K,MAE7B,GAAIiH,EAAOzE,QAA0C,WAAhCyE,EAAOA,EAAOzE,OAAO,GAAGpB,KACzC,OAAOqC,EAGX,GAAa,SAATzD,GAA6B,YAATA,EAAqB,CACzC,IAAIkC,EAAQL,EAAKK,MAAM,mCACnBA,IACAuB,GAAUoH,EAElB,MAAO,GAAa,aAAT7K,IACS,SAAZiL,GAAmC,YAAZA,GACvB,MAAO,GAIf,OAAOxH,CACX,EAEA7D,KAAKsL,aAAe,SAASlL,EAAO6B,EAAMsJ,GACtC,OAAOvL,KAAK0K,SAASY,aAAarJ,EAAMsJ,EAC5C,EAEAvL,KAAKwL,YAAc,SAASpL,EAAOwB,EAAKf,GACpCb,KAAK0K,SAASc,YAAY5J,EAAKf,EACnC,EAEAb,KAAKkI,aAAe,SAAS3H,GACzB,IAAIkL,EAAS,IAAIjB,EAAa,CAAC,OAAQ,6BAA8B,oBAWrE,OAVAiB,EAAOC,iBAAiBnL,EAAQoL,eAEhCF,EAAOG,GAAG,YAAY,SAASC,GAC3BtL,EAAQuL,eAAeD,EAAQE,KACnC,IAEAN,EAAOG,GAAG,aAAa,WACnBrL,EAAQyL,kBACZ,IAEOP,CACX,EAEAzL,KAAKmI,IAAM,sBACXnI,KAAKoI,cAAgB,yBACxB,EAAEhC,KAAK0B,EAAKzB,WAEbhF,EAAQyG,KAAOA,C,wBC9Ef,IAAI/D,EAAQvE,EAAAA,OAAAA,EAER+K,EAAuB,WAAY,GAEvC,WAEIvK,KAAKsL,aAAe,SAASrJ,EAAMsJ,GAC/B,QAAM,QAAQxI,KAAKd,IAGZ,SAASc,KAAKwI,EACzB,EAEAvL,KAAKwL,YAAc,SAAS5J,EAAKf,GAC7B,IAAIoB,EAAOL,EAAIM,QAAQrB,GACnByB,EAAQL,EAAKK,MAAM,YAEvB,IAAKA,EAAO,OAAO,EAEnB,IAAIxB,EAASwB,EAAM,GAAGM,OAClBqJ,EAAerK,EAAIsK,oBAAoB,CAACrL,IAAKA,EAAKC,OAAQA,IAE9D,IAAKmL,GAAgBA,EAAapL,KAAOA,EAAK,OAAO,EAErD,IAAIgD,EAAS7D,KAAK4D,WAAWhC,EAAIM,QAAQ+J,EAAapL,MACtDe,EAAI0C,QAAQ,IAAIP,EAAMlD,EAAK,EAAGA,EAAKC,EAAO,GAAI+C,EAClD,EAEA7D,KAAK4D,WAAa,SAAS3B,GACvB,OAAOA,EAAKK,MAAM,QAAQ,EAC9B,CAEH,GAAE8D,KAAKmE,EAAqBlE,WAE7BhF,EAAQkJ,qBAAuBA,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/behaviour/javascript.js","webpack://admin/./node_modules/ace-code/src/mode/behaviour/xml.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/folding/javascript.js","webpack://admin/./node_modules/ace-code/src/mode/folding/xml.js","webpack://admin/./node_modules/ace-code/src/mode/gobstones.js","webpack://admin/./node_modules/ace-code/src/mode/gobstones_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/javascript.js","webpack://admin/./node_modules/ace-code/src/mode/matching_brace_outdent.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nconst {TokenIterator} = require(\"../../token_iterator\");\nvar CstyleBehaviour = require(\"../behaviour/cstyle\").CstyleBehaviour;\nvar XmlBehaviour = require(\"../behaviour/xml\").XmlBehaviour;\nvar JavaScriptBehaviour = function () {\n    var xmlBehaviours = new XmlBehaviour({closeCurlyBraces: true}).getBehaviours();\n    this.addBehaviours(xmlBehaviours);\n    this.inherit(CstyleBehaviour);\n\n    this.add(\"autoclosing-fragment\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == '>') {\n            var position = editor.getSelectionRange().start;\n            var iterator = new TokenIterator(session, position.row, position.column);\n            var token = iterator.getCurrentToken() || iterator.stepBackward();\n            if (!token) return;\n            if (token.value == '<') {\n                return {\n                    text: \"></>\",\n                    selection: [1, 1]\n                };\n            }\n        }\n    });\n};\n\noop.inherits(JavaScriptBehaviour, CstyleBehaviour);\n\nexports.JavaScriptBehaviour = JavaScriptBehaviour;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Behaviour = require(\"../behaviour\").Behaviour;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\nfunction is(token, type) {\n    return token && token.type.lastIndexOf(type + \".xml\") > -1;\n}\n\n/**@type {(new() => Partial<import(\"../../../ace-internal\").Ace.Behaviour>)}*/\nvar XmlBehaviour = function () {\n\n    this.add(\"string_dquotes\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == '\"' || text == \"'\") {\n            var quote = text;\n            var selected = session.doc.getTextRange(editor.getSelectionRange());\n            if (selected !== \"\" && selected !== \"'\" && selected != '\"' && editor.getWrapBehavioursEnabled()) {\n                return {\n                    text: quote + selected + quote,\n                    selection: false\n                };\n            }\n\n            var cursor = editor.getCursorPosition();\n            var line = session.doc.getLine(cursor.row);\n            var rightChar = line.substring(cursor.column, cursor.column + 1);\n            var iterator = new TokenIterator(session, cursor.row, cursor.column);\n            var token = iterator.getCurrentToken();\n\n            if (rightChar == quote && (is(token, \"attribute-value\") || is(token, \"string\"))) {\n                // Ignore input and move right one if we're typing over the closing quote.\n                return {\n                    text: \"\",\n                    selection: [1, 1]\n                };\n            }\n\n            if (!token)\n                token = iterator.stepBackward();\n\n            if (!token)\n                return;\n\n            while (is(token, \"tag-whitespace\") || is(token, \"whitespace\")) {\n                token = iterator.stepBackward();\n            }\n            var rightSpace = !rightChar || rightChar.match(/\\s/);\n            if (is(token, \"attribute-equals\") && (rightSpace || rightChar == '>') || (is(token, \"decl-attribute-equals\") && (rightSpace || rightChar == '?'))) {\n                return {\n                    text: quote + quote,\n                    selection: [1, 1]\n                };\n            }\n        }\n    });\n\n    this.add(\"string_dquotes\", \"deletion\", function(state, action, editor, session, range) {\n        var selected = session.doc.getTextRange(range);\n        if (!range.isMultiLine() && (selected == '\"' || selected == \"'\")) {\n            var line = session.doc.getLine(range.start.row);\n            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n            if (rightChar == selected) {\n                range.end.column++;\n                return range;\n            }\n        }\n    });\n\n    this.add(\"autoclosing\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == '>') {\n            var position = editor.getSelectionRange().start;\n            var iterator = new TokenIterator(session, position.row, position.column);\n            var token = iterator.getCurrentToken() || iterator.stepBackward();\n\n            // exit if we're not in a tag\n            if (!token || !(is(token, \"tag-name\") || is(token, \"tag-whitespace\") || is(token, \"attribute-name\") || is(token, \"attribute-equals\") || is(token, \"attribute-value\")))\n                return;\n\n            // exit if we're inside of a quoted attribute value\n            if (is(token, \"reference.attribute-value\"))\n                return;\n            if (is(token, \"attribute-value\")) {\n                var tokenEndColumn = iterator.getCurrentTokenColumn() + token.value.length;\n                if (position.column < tokenEndColumn)\n                    return;\n                if (position.column == tokenEndColumn) {\n                    var nextToken = iterator.stepForward();\n                    // TODO also handle non-closed string at the end of the line\n                    if (nextToken && is(nextToken, \"attribute-value\"))\n                        return;\n                    iterator.stepBackward();\n                }\n            }\n\n            if (/^\\s*>/.test(session.getLine(position.row).slice(position.column)))\n                return;\n\n            // find tag name\n            while (!is(token, \"tag-name\")) {\n                token = iterator.stepBackward();\n                if (token.value == \"<\") {\n                    token = iterator.stepForward();\n                    break;\n                }\n            }\n\n            var tokenRow = iterator.getCurrentTokenRow();\n            var tokenColumn = iterator.getCurrentTokenColumn();\n\n            // exit if the tag is ending\n            if (is(iterator.stepBackward(), \"end-tag-open\"))\n                return;\n\n            var element = token.value;\n            if (tokenRow == position.row)\n                element = element.substring(0, position.column - tokenColumn);\n\n            if (this.voidElements && this.voidElements.hasOwnProperty(element.toLowerCase()))\n                 return;\n\n            return {\n               text: \">\" + \"</\" + element + \">\",\n               selection: [1, 1]\n            };\n        }\n    });\n\n    this.add(\"autoindent\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == \"\\n\") {\n            var cursor = editor.getCursorPosition();\n            var line = session.getLine(cursor.row);\n            var iterator = new TokenIterator(session, cursor.row, cursor.column);\n            var token = iterator.getCurrentToken();\n\n            if (is(token, \"\") && token.type.indexOf(\"tag-close\") !== -1) {\n                if (token.value == \"/>\")\n                    return;\n                //get tag name\n                while (token && token.type.indexOf(\"tag-name\") === -1) {\n                    token = iterator.stepBackward();\n                }\n\n                if (!token) {\n                    return;\n                }\n\n                var tag = token.value;\n                var row = iterator.getCurrentTokenRow();\n\n                //don't indent after closing tag\n                token = iterator.stepBackward();\n                if (!token || token.type.indexOf(\"end-tag\") !== -1) {\n                    return;\n                }\n\n                if (this.voidElements && !this.voidElements[tag] || !this.voidElements) {\n                    var nextToken = session.getTokenAt(cursor.row, cursor.column+1);\n                    var line = session.getLine(row);\n                    var nextIndent = this.$getIndent(line);\n                    var indent = nextIndent + session.getTabString();\n\n                    if (nextToken && nextToken.value === \"</\") {\n                        return {\n                            text: \"\\n\" + indent + \"\\n\" + nextIndent,\n                            selection: [1, indent.length, 1, indent.length]\n                        };\n                    } else {\n                        return {\n                            text: \"\\n\" + indent\n                        };\n                    }\n                }\n            }\n        }\n    });\n\n};\n\noop.inherits(XmlBehaviour, Behaviour);\n\nexports.XmlBehaviour = XmlBehaviour;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar XmlFoldMode = require(\"./xml\").FoldMode;\nvar CFoldMode = require(\"./cstyle\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n        this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n\n    this.xmlFoldMode = new XmlFoldMode();\n};\noop.inherits(FoldMode, CFoldMode);\n\n(function () {\n\n    this.getFoldWidgetRangeBase = this.getFoldWidgetRange;\n    this.getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n        var fw = this.getFoldWidgetBase(session, foldStyle, row);\n        if (!fw) {\n            return this.xmlFoldMode.getFoldWidget(session, foldStyle, row);\n        }\n        return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n        var range = this.getFoldWidgetRangeBase(session, foldStyle, row, forceMultiline);\n        if (range) return range;\n\n        return this.xmlFoldMode.getFoldWidgetRange(session, foldStyle, row);\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(voidElements, optionalEndTags) {\n    BaseFoldMode.call(this);\n    this.voidElements = voidElements || {};\n    this.optionalEndTags = oop.mixin({}, this.voidElements);\n    if (optionalEndTags)\n        oop.mixin(this.optionalEndTags, optionalEndTags);\n    \n};\noop.inherits(FoldMode, BaseFoldMode);\n\nvar Tag = function() {\n    this.tagName = \"\";\n    this.closing = false;\n    this.selfClosing = false;\n    this.start = {row: 0, column: 0};\n    this.end = {row: 0, column: 0};\n};\n\nfunction is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n}\n\n(function() {\n\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var tag = this._getFirstTagInLine(session, row);\n\n        if (!tag)\n            return this.getCommentFoldWidget(session, row);\n\n        if (tag.closing || (!tag.tagName && tag.selfClosing))\n            return foldStyle === \"markbeginend\" ? \"end\" : \"\";\n\n        if (!tag.tagName || tag.selfClosing || this.voidElements.hasOwnProperty(tag.tagName.toLowerCase()))\n            return \"\";\n\n        if (this._findEndTagInLine(session, row, tag.tagName, tag.end.column))\n            return \"\";\n\n        return \"start\";\n    };\n    \n    this.getCommentFoldWidget = function(session, row) {\n        if (/comment/.test(session.getState(row)) && /<!-/.test(session.getLine(row)))\n            return \"start\";\n        return \"\";\n    };\n\n    /*\n     * returns a first tag (or a fragment) in a line\n     */\n    this._getFirstTagInLine = function(session, row) {\n        var tokens = session.getTokens(row);\n        var tag = new Tag();\n\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (is(token, \"tag-open\")) {\n                tag.end.column = tag.start.column + token.value.length;\n                tag.closing = is(token, \"end-tag-open\");\n                token = tokens[++i];\n                if (!token)\n                    return null;\n                tag.tagName = token.value;\n                if (token.value === \"\") { //skip empty tag name token for fragment\n                    token = tokens[++i];\n                    if (!token) return null;\n                    tag.tagName = token.value;\n                }\n                tag.end.column += token.value.length;\n                for (i++; i < tokens.length; i++) {\n                    token = tokens[i];\n                    tag.end.column += token.value.length;\n                    if (is(token, \"tag-close\")) {\n                        tag.selfClosing = token.value == '/>';\n                        break;\n                    }\n                }\n                return tag;\n            } else if (is(token, \"tag-close\")) {\n                tag.selfClosing = token.value == '/>';\n                return tag;\n            }\n            tag.start.column += token.value.length;\n        }\n\n        return null;\n    };\n\n    this._findEndTagInLine = function(session, row, tagName, startColumn) {\n        var tokens = session.getTokens(row);\n        var column = 0;\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            column += token.value.length;\n            if (column < startColumn - 1)\n                continue;\n            if (is(token, \"end-tag-open\")) {\n                token = tokens[i + 1];\n                if (is(token, \"tag-name\") && token.value === \"\") {\n                    token = tokens[i + 2];\n                }\n                if (token && token.value == tagName)\n                    return true;\n            }\n        }\n        return false;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var firstTag = this._getFirstTagInLine(session, row);\n        if (!firstTag) {\n            return this.getCommentFoldWidget(session, row) && session.getCommentFoldRange(\n                row, session.getLine(row).length);\n        }\n        var tags = session.getMatchingTags({row: row, column: 0});\n        if (tags) {\n            return new Range(\n                tags.openTag.end.row, tags.openTag.end.column, tags.closeTag.start.row, tags.closeTag.start.column);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar JavaScriptMode = require(\"./javascript\").Mode;\nvar GobstonesHighlightRules = require(\"./gobstones_highlight_rules\").GobstonesHighlightRules;\n\nvar Mode = function() {\n    JavaScriptMode.call(this);\n    this.HighlightRules = GobstonesHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, JavaScriptMode);\n\n(function() {\n\n    this.createWorker = function() {\n        return null;\n    };\n\n    this.$id = \"ace/mode/gobstones\";\n    this.snippetFileId = \"ace/snippets/gobstones\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar GobstonesHighlightRules = function() {\n\n  var definitions = {\n    standard: \"program|procedure|function|interactive|return|let\",\n    type: \"type|is|variant|record|field|case\"\n  };\n\n  var control = {\n    commands: {\n      repetitions: \"repeat|while|foreach|in\",\n      alternatives: \"if|elseif|else|switch\"\n    },\n    expressions: {\n      alternatives: \"choose|when|otherwise|matching|select|on\"\n    }\n  };\n\n  var values = {\n    colors: \"Verde|Rojo|Azul|Negro\",\n    cardinals: \"Norte|Sur|Este|Oeste\",\n    booleans: \"True|False\",\n    numbers: /([-]?)([0-9]+)\\b/,\n    strings: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n  };\n\n  var primitives = {\n    commands: \"Poner|Sacar|Mover|IrAlBorde|VaciarTablero|BOOM\",\n    expressions: \"nroBolitas|hayBolitas|puedeMover|\"+\n                  \"siguiente|previo|opuesto|\"+\n                  \"minBool|maxBool|minDir|maxDir|minColor|maxColor|\"+\n                  \"primero|sinElPrimero|esVacía|\"+\n                  \"boom\",\n    keys: \"K_A|K_B|K_C|K_D|K_E|K_F|K_G|K_G|K_H|K_I|K_J|K_K|K_L|K_M|K_N|K_Ñ|\"+\n      \"K_O|K_P|K_Q|K_R|K_S|K_T|K_U|K_V|K_W|K_X|K_Y|K_Z|\"+\n      \"K_0|K_1|K_2|K_3|K_4|K_5|K_6|K_7|K_8|K_9|\"+\n      \"K_F1|K_F2|K_F3|K_F4|K_F5|K_F6|K_F7|K_F8|K_F9|K_F10|K_F11|K_12|\"+\n      \"K_UP|K_DOWN|K_LEFT|K_RIGHT|K_RETURN|K_BACKSPACE|K_TAB|K_SPACE|K_ESCAPE\"+\n\n      \"K_CTRL_A|K_CTRL_B|K_CTRL_C|K_CTRL_D|K_CTRL_E|K_CTRL_F|K_CTRL_G|K_CTRL_G|\"+\n      \"K_CTRL_H|K_CTRL_I|K_CTRL_J|K_CTRL_K|K_CTRL_L|K_CTRL_M|K_CTRL_N|K_CTRL_Ñ|\"+\n      \"K_CTRL_O|K_CTRL_P|K_CTRL_Q|K_CTRL_R|K_CTRL_S|K_CTRL_T|K_CTRL_U|K_CTRL_V|\"+\n      \"K_CTRL_W|K_CTRL_X|K_CTRL_Y|K_CTRL_Z|\"+\n      \"K_CTRL_0|K_CTRL_1|K_CTRL_2|K_CTRL_3|K_CTRL_4|K_CTRL_5|K_CTRL_6|K_CTRL_7|K_CTRL_8|K_CTRL_9|\"+\n      \"K_CTRL_F1|K_CTRL_F2|K_CTRL_F3|K_CTRL_F4|K_CTRL_F5|K_CTRL_F6|K_CTRL_F7|\"+\n      \"K_CTRL_F8|K_CTRL_F9|K_CTRL_F10|K_CTRL_F11|K_CTRL_F12|\"+\n      \"K_CTRL_UP|K_CTRL_DOWN|K_CTRL_LEFT|K_CTRL_RIGHT|K_CTRL_RETURN|\"+\n      \"K_CTRL_BACKSPACE|K_CTRL_TAB|K_CTRL_SPACE|K_CTRL_ESCAPE\"+\n\n      \"K_ALT_A|K_ALT_B|K_ALT_C|K_ALT_D|K_ALT_E|K_ALT_F|K_ALT_G|K_ALT_G|K_ALT_H|\"+\n      \"K_ALT_I|K_ALT_J|K_ALT_K|K_ALT_L|K_ALT_M|K_ALT_N|K_ALT_Ñ|K_ALT_O|K_ALT_P|\"+\n      \"K_ALT_Q|K_ALT_R|K_ALT_S|K_ALT_T|K_ALT_U|K_ALT_V|K_ALT_W|K_ALT_X|K_ALT_Y|K_ALT_Z|\"+\n      \"K_ALT_0|K_ALT_1|K_ALT_2|K_ALT_3|K_ALT_4|K_ALT_5|K_ALT_6|K_ALT_7|K_ALT_8|K_ALT_9|\"+\n      \"K_ALT_F1|K_ALT_F2|K_ALT_F3|K_ALT_F4|K_ALT_F5|K_ALT_F6|K_ALT_F7|K_ALT_F8|\"+\n      \"K_ALT_F9|K_ALT_F10|K_ALT_F11|K_ALT_F12|\"+\n      \"K_ALT_UP|K_ALT_DOWN|K_ALT_LEFT|K_ALT_RIGHT|K_ALT_RETURN|K_ALT_BACKSPACE|\"+\n      \"K_ALT_TAB|K_ALT_SPACE|K_ALT_ESCAPE\"+\n\n      \"K_SHIFT_A|K_SHIFT_B|K_SHIFT_C|K_SHIFT_D|K_SHIFT_E|K_SHIFT_F|K_SHIFT_G|\"+\n      \"K_SHIFT_G|K_SHIFT_H|K_SHIFT_I|K_SHIFT_J|K_SHIFT_K|K_SHIFT_L|K_SHIFT_M|\"+\n      \"K_SHIFT_N|K_SHIFT_Ñ|K_SHIFT_O|K_SHIFT_P|K_SHIFT_Q|K_SHIFT_R|K_SHIFT_S|\"+\n      \"K_SHIFT_T|K_SHIFT_U|K_SHIFT_V|K_SHIFT_W|K_SHIFT_X|K_SHIFT_Y|K_SHIFT_Z|\"+\n      \"K_SHIFT_0|K_SHIFT_1|K_SHIFT_2|K_SHIFT_3|K_SHIFT_4|K_SHIFT_5|K_SHIFT_6|\"+\n      \"K_SHIFT_7|K_SHIFT_8|K_SHIFT_9|\"+\n      \"K_SHIFT_F1|K_SHIFT_F2|K_SHIFT_F3|K_SHIFT_F4|K_SHIFT_F5|K_SHIFT_F6|\"+\n      \"K_SHIFT_F7|K_SHIFT_F8|K_SHIFT_F9|K_SHIFT_F10|K_SHIFT_F11|K_SHIFT_F12|\"+\n      \"K_SHIFT_UP|K_SHIFT_DOWN|K_SHIFT_LEFT|K_SHIFT_RIGHT|K_SHIFT_RETURN|\"+\n      \"K_SHIFT_BACKSPACE|K_SHIFT_TAB|K_SHIFT_SPACE|K_SHIFT_ESCAPE\"+\n\n      \"K_CTRL_ALT_A|K_CTRL_ALT_B|K_CTRL_ALT_C|K_CTRL_ALT_D|K_CTRL_ALT_E|\"+\n      \"K_CTRL_ALT_F|K_CTRL_ALT_G|K_CTRL_ALT_G|K_CTRL_ALT_H|K_CTRL_ALT_I|\"+\n      \"K_CTRL_ALT_J|K_CTRL_ALT_K|K_CTRL_ALT_L|K_CTRL_ALT_M|K_CTRL_ALT_N|\"+\n      \"K_CTRL_ALT_Ñ|K_CTRL_ALT_O|K_CTRL_ALT_P|K_CTRL_ALT_Q|K_CTRL_ALT_R|\"+\n      \"K_CTRL_ALT_S|K_CTRL_ALT_T|K_CTRL_ALT_U|K_CTRL_ALT_V|K_CTRL_ALT_W|\"+\n      \"K_CTRL_ALT_X|K_CTRL_ALT_Y|K_CTRL_ALT_Z|\"+\n      \"K_CTRL_ALT_0|K_CTRL_ALT_1|K_CTRL_ALT_2|K_CTRL_ALT_3|K_CTRL_ALT_4|\"+\n      \"K_CTRL_ALT_5|K_CTRL_ALT_6|K_CTRL_ALT_7|K_CTRL_ALT_8|K_CTRL_ALT_9|\"+\n      \"K_CTRL_ALT_F1|K_CTRL_ALT_F2|K_CTRL_ALT_F3|K_CTRL_ALT_F4|K_CTRL_ALT_F5|\"+\n      \"K_CTRL_ALT_F6|K_CTRL_ALT_F7|K_CTRL_ALT_F8|K_CTRL_ALT_F9|K_CTRL_ALT_F10|\"+\n      \"K_CTRL_ALT_F11|K_CTRL_ALT_F12|\"+\n      \"K_CTRL_ALT_UP|K_CTRL_ALT_DOWN|K_CTRL_ALT_LEFT|K_CTRL_ALT_RIGHT|\"+\n      \"K_CTRL_ALT_RETURN|K_CTRL_ALT_BACKSPACE|K_CTRL_ALT_TAB|K_CTRL_ALT_SPACE|K_CTRL_ALT_ESCAPE\"+\n\n      \"K_CTRL_SHIFT_A|K_CTRL_SHIFT_B|K_CTRL_SHIFT_C|K_CTRL_SHIFT_D|K_CTRL_SHIFT_E|\"+\n      \"K_CTRL_SHIFT_F|K_CTRL_SHIFT_G|K_CTRL_SHIFT_G|K_CTRL_SHIFT_H|K_CTRL_SHIFT_I|\"+\n      \"K_CTRL_SHIFT_J|K_CTRL_SHIFT_K|K_CTRL_SHIFT_L|K_CTRL_SHIFT_M|K_CTRL_SHIFT_N|\"+\n      \"K_CTRL_SHIFT_Ñ|K_CTRL_SHIFT_O|K_CTRL_SHIFT_P|K_CTRL_SHIFT_Q|K_CTRL_SHIFT_R|\"+\n      \"K_CTRL_SHIFT_S|K_CTRL_SHIFT_T|K_CTRL_SHIFT_U|K_CTRL_SHIFT_V|K_CTRL_SHIFT_W|\"+\n      \"K_CTRL_SHIFT_X|K_CTRL_SHIFT_Y|K_CTRL_SHIFT_Z|\"+\n      \"K_CTRL_SHIFT_0|K_CTRL_SHIFT_1|K_CTRL_SHIFT_2|K_CTRL_SHIFT_3|K_CTRL_SHIFT_4|\"+\n      \"K_CTRL_SHIFT_5|K_CTRL_SHIFT_6|K_CTRL_SHIFT_7|K_CTRL_SHIFT_8|K_CTRL_SHIFT_9|\"+\n      \"K_CTRL_SHIFT_F1|K_CTRL_SHIFT_F2|K_CTRL_SHIFT_F3|K_CTRL_SHIFT_F4|\"+\n      \"K_CTRL_SHIFT_F5|K_CTRL_SHIFT_F6|K_CTRL_SHIFT_F7|K_CTRL_SHIFT_F8|\"+\n      \"K_CTRL_SHIFT_9|K_CTRL_SHIFT_10|K_CTRL_SHIFT_11|K_CTRL_SHIFT_12|\"+\n      \"K_CTRL_SHIFT_UP|K_CTRL_SHIFT_DOWN|K_CTRL_SHIFT_LEFT|K_CTRL_SHIFT_RIGHT|\"+\n      \"K_CTRL_SHIFT_RETURN|K_CTRL_SHIFT_BACKSPACE|K_CTRL_SHIFT_TAB|\"+\n      \"K_CTRL_SHIFT_SPACE|K_CTRL_SHIFT_ESCAPE\"+\n\n      \"K_ALT_SHIFT_A|K_ALT_SHIFT_B|K_ALT_SHIFT_C|K_ALT_SHIFT_D|K_ALT_SHIFT_E|\"+\n      \"K_ALT_SHIFT_F|K_ALT_SHIFT_G|K_ALT_SHIFT_G|K_ALT_SHIFT_H|K_ALT_SHIFT_I|\"+\n      \"K_ALT_SHIFT_J|K_ALT_SHIFT_K|K_ALT_SHIFT_L|K_ALT_SHIFT_M|K_ALT_SHIFT_N|\"+\n      \"K_ALT_SHIFT_Ñ|K_ALT_SHIFT_O|K_ALT_SHIFT_P|K_ALT_SHIFT_Q|K_ALT_SHIFT_R|\"+\n      \"K_ALT_SHIFT_S|K_ALT_SHIFT_T|K_ALT_SHIFT_U|K_ALT_SHIFT_V|K_ALT_SHIFT_W|\"+\n      \"K_ALT_SHIFT_X|K_ALT_SHIFT_Y|K_ALT_SHIFT_Z|\"+\n      \"K_ALT_SHIFT_0|K_ALT_SHIFT_1|K_ALT_SHIFT_2|K_ALT_SHIFT_3|K_ALT_SHIFT_4|\"+\n      \"K_ALT_SHIFT_5|K_ALT_SHIFT_6|K_ALT_SHIFT_7|K_ALT_SHIFT_8|K_ALT_SHIFT_9|\"+\n      \"K_ALT_SHIFT_F1|K_ALT_SHIFT_F2|K_ALT_SHIFT_F3|K_ALT_SHIFT_F4|\"+\n      \"K_ALT_SHIFT_F5|K_ALT_SHIFT_F6|K_ALT_SHIFT_F7|K_ALT_SHIFT_F8|\"+\n      \"K_ALT_SHIFT_9|K_ALT_SHIFT_10|K_ALT_SHIFT_11|K_ALT_SHIFT_12|\"+\n      \"K_ALT_SHIFT_UP|K_ALT_SHIFT_DOWN|K_ALT_SHIFT_LEFT|K_ALT_SHIFT_RIGHT|\"+\n      \"K_ALT_SHIFT_RETURN|K_ALT_SHIFT_BACKSPACE|K_ALT_SHIFT_TAB|K_ALT_SHIFT_SPACE|\"+\n      \"K_ALT_SHIFT_ESCAPE\"+\n\n      \"K_CTRL_ALT_SHIFT_A|K_CTRL_ALT_SHIFT_B|K_CTRL_ALT_SHIFT_C|K_CTRL_ALT_SHIFT_D|\"+\n      \"K_CTRL_ALT_SHIFT_E|K_CTRL_ALT_SHIFT_F|K_CTRL_ALT_SHIFT_G|K_CTRL_ALT_SHIFT_G|\"+\n      \"K_CTRL_ALT_SHIFT_H|K_CTRL_ALT_SHIFT_I|K_CTRL_ALT_SHIFT_J|K_CTRL_ALT_SHIFT_K|\"+\n      \"K_CTRL_ALT_SHIFT_L|K_CTRL_ALT_SHIFT_M|K_CTRL_ALT_SHIFT_N|K_CTRL_ALT_SHIFT_Ñ|\"+\n      \"K_CTRL_ALT_SHIFT_O|K_CTRL_ALT_SHIFT_P|K_CTRL_ALT_SHIFT_Q|K_CTRL_ALT_SHIFT_R|\"+\n      \"K_CTRL_ALT_SHIFT_S|K_CTRL_ALT_SHIFT_T|K_CTRL_ALT_SHIFT_U|K_CTRL_ALT_SHIFT_V|\"+\n      \"K_CTRL_ALT_SHIFT_W|K_CTRL_ALT_SHIFT_X|K_CTRL_ALT_SHIFT_Y|K_CTRL_ALT_SHIFT_Z|\"+\n      \"K_CTRL_ALT_SHIFT_0|K_CTRL_ALT_SHIFT_1|K_CTRL_ALT_SHIFT_2|K_CTRL_ALT_SHIFT_3|\"+\n      \"K_CTRL_ALT_SHIFT_4|K_CTRL_ALT_SHIFT_5|K_CTRL_ALT_SHIFT_6|K_CTRL_ALT_SHIFT_7|\"+\n      \"K_CTRL_ALT_SHIFT_8|K_CTRL_ALT_SHIFT_9|\"+\n      \"K_CTRL_ALT_SHIFT_F1|K_CTRL_ALT_SHIFT_F2|K_CTRL_ALT_SHIFT_F3|K_CTRL_ALT_SHIFT_F4|\"+\n      \"K_CTRL_ALT_SHIFT_F5|K_CTRL_ALT_SHIFT_F6|K_CTRL_ALT_SHIFT_F7|K_CTRL_ALT_SHIFT_F8|\"+\n      \"K_CTRL_ALT_SHIFT_F9|K_CTRL_ALT_SHIFT_F10|K_CTRL_ALT_SHIFT_F11|K_CTRL_ALT_SHIFT_F12|\"+\n      \"K_CTRL_ALT_SHIFT_UP|K_CTRL_ALT_SHIFT_DOWN|K_CTRL_ALT_SHIFT_LEFT|K_CTRL_ALT_SHIFT_RIGHT|\"+\n      \"K_CTRL_ALT_SHIFT_RETURN|K_CTRL_ALT_SHIFT_BACKSPACE|K_CTRL_ALT_SHIFT_TAB|\"+\n      \"K_CTRL_ALT_SHIFT_SPACE|K_CTRL_ALT_SHIFT_ESCAPE\"\n  };\n\n  var operations = {\n    commands: \":=\",\n    expressions: {\n      numeric: \"\\\\+|\\\\-|\\\\*|\\\\^|div|mod\",\n      comparison: \">=|<=|==|\\\\/=|>|<\",\n      boolean: \"\\\\|\\\\||&&|not\",\n      other: \"\\\\+\\\\+|<\\\\-|\\\\[|\\\\]|\\\\_|\\\\->\"\n    }\n  };\n\n  var comments = {\n    line: {\n      double_slash: \"\\\\/\\\\/.*$\",\n      double_dash: \"\\\\-\\\\-.*$\",\n      number_sign: \"#.*$\"\n    },\n    block: { start: \"\\\\/\\\\*\", end: \"\\\\*\\\\/\" },\n    block_alt: { start: \"\\\\{\\\\-\", end: \"\\\\-\\\\}\" }\n  };\n\n  this.$rules = {\n    \"start\" : [\n      // comments\n      {\n        token : \"comment.line.double-slash.gobstones\",\n        regex : comments.line.double_slash\n      },\n      {\n        token : \"comment.line.double-dash.gobstones\",\n        regex : comments.line.double_dash\n      },\n      {\n        token : \"comment.line.number-sign.gobstones\",\n        regex : comments.line.number_sign\n      },\n      {\n        token : \"comment.block.dash-asterisc.gobstones\",\n        regex : comments.block.start,\n        next : \"block_comment_end\"\n      },\n      {\n        token : \"comment.block.brace-dash.gobstones\",\n        regex : comments.block_alt.start,\n        next : \"block_comment_alt_end\"\n      },\n      // numbers\n      {\n        token : \"constant.numeric.gobstones\",\n        regex : values.numbers\n      },\n      // strings\n      {\n        token : \"string.quoted.double.gobstones\",\n        regex : values.strings\n      },\n      //  operations\n      {\n        token : \"keyword.operator.other.gobstones\",\n        regex : operations.expressions.other\n      },\n      {\n        token : \"keyword.operator.numeric.gobstones\",\n        regex : operations.expressions.numeric\n      },\n      {\n        token : \"keyword.operator.compare.gobstones\",\n        regex : operations.expressions.comparison\n      },\n      {\n        token : \"keyword.operator.boolean.gobstones\",\n        regex : operations.expressions.boolean\n      },\n      // keywords\n      {\n        token : this.createKeywordMapper({\n          // basic constructs\n          \"storage.type.definitions.gobstones\": definitions.standard,\n          \"storage.type.types.gobstones\": definitions.type,\n          \"keyword.control.commands.repetitions.gobstones\": control.commands.repetitions,\n          \"keyword.control.commands.alternatives.gobstones\": control.commands.alternatives,\n          \"keyword.control.expressions.alternatives.gobstones\": control.expressions.alternatives,\n          // types\n          \"constant.language.colors.gobstones\":values.colors,\n          \"constant.language.cardinals.gobstones\": values.cardinals,\n          \"constant.language.boolean.gobstones\": values.booleans,\n          // primitives\n          \"support.function.gobstones\": primitives.commands,\n          \"support.variable.gobstones\": primitives.expressions,\n          \"variable.language.gobstones\": primitives.keys\n      }, \"identifier.gobstones\"),\n        regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      },\n      {\n        token : \"comma.gobstones\",\n        regex : \",\"\n      },\n      {\n        token : \"semicolon.gobstones\",\n        regex : \";\"\n      },\n      {\n        token : \"lparen\",\n        regex : \"[[({]\"\n      },\n      {\n        token : \"rparen\",\n        regex : \"[\\\\])}]\"\n      },\n      {\n        token : \"text\",\n        regex : \"\\\\s+\"\n      }\n    ],\n    \"block_comment_end\": [{\n        token : \"comment.block.dash-asterisc.gobstones\",\n        regex : comments.block.end,\n        next : \"start\"\n      }, {\n        defaultToken : \"comment.block.dash-asterisc.gobstones\"\n      }\n    ],\n    \"block_comment_alt_end\": [{\n        token : \"comment.block.brace-dash.gobstones\",\n        regex : comments.block_alt.end,\n        next : \"start\"\n      }, {\n        defaultToken : \"comment.block.brace-dash.gobstones\"\n      }\n    ]\n  };\n};\n\noop.inherits(GobstonesHighlightRules, TextHighlightRules);\n\nexports.GobstonesHighlightRules = GobstonesHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar JavaScriptHighlightRules = require(\"./javascript_highlight_rules\").JavaScriptHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar WorkerClient = require(\"../worker/worker_client\").WorkerClient;\nvar JavaScriptBehaviour = require(\"./behaviour/javascript\").JavaScriptBehaviour;\nvar JavaScriptFoldMode = require(\"./folding/javascript\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = JavaScriptHighlightRules;\n\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new JavaScriptBehaviour();\n    this.foldingRules = new JavaScriptFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$quotes = {'\"': '\"', \"'\": \"'\", \"`\": \"`\"};\n    this.$pairQuotesAfter = {\n        \"`\": /\\w/\n    };\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\" || state == \"no_regex\") {\n            var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\" || endState == \"no_regex\") {\n                return \"\";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.createWorker = function(session) {\n        var worker = new WorkerClient([\"ace\"], \"ace/mode/javascript_worker\", \"JavaScriptWorker\");\n        worker.attachToDocument(session.getDocument());\n\n        worker.on(\"annotate\", function(results) {\n            session.setAnnotations(results.data);\n        });\n\n        worker.on(\"terminate\", function() {\n            session.clearAnnotations();\n        });\n\n        return worker;\n    };\n\n    this.$id = \"ace/mode/javascript\";\n    this.snippetFileId = \"ace/snippets/javascript\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n"],"names":["oop","require","TokenIterator","CstyleBehaviour","XmlBehaviour","JavaScriptBehaviour","xmlBehaviours","closeCurlyBraces","getBehaviours","this","addBehaviours","inherit","add","state","action","editor","session","text","position","getSelectionRange","start","iterator","row","column","token","getCurrentToken","stepBackward","value","selection","inherits","exports","Behaviour","is","type","lastIndexOf","quote","selected","doc","getTextRange","getWrapBehavioursEnabled","cursor","getCursorPosition","line","getLine","rightChar","substring","rightSpace","match","range","isMultiLine","end","tokenEndColumn","getCurrentTokenColumn","length","nextToken","stepForward","test","slice","tokenRow","getCurrentTokenRow","tokenColumn","element","voidElements","hasOwnProperty","toLowerCase","indexOf","tag","getTokenAt","nextIndent","$getIndent","indent","getTabString","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","getCommentFoldRange","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","call","prototype","XmlFoldMode","CFoldMode","xmlFoldMode","getFoldWidgetRangeBase","getFoldWidgetBase","optionalEndTags","mixin","Tag","tagName","closing","selfClosing","_getFirstTagInLine","_findEndTagInLine","getCommentFoldWidget","getState","tokens","getTokens","firstTag","tags","getMatchingTags","openTag","closeTag","JavaScriptMode","GobstonesHighlightRules","Mode","HighlightRules","$behaviour","$defaultBehaviour","createWorker","$id","snippetFileId","TextHighlightRules","definitions","standard","control","commands","repetitions","alternatives","expressions","values","colors","cardinals","booleans","numbers","strings","primitives","keys","operations","numeric","comparison","boolean","other","comments","double_slash","double_dash","number_sign","block","block_alt","$rules","regex","next","createKeywordMapper","defaultToken","TextMode","JavaScriptHighlightRules","MatchingBraceOutdent","WorkerClient","JavaScriptFoldMode","$outdent","foldingRules","lineCommentStart","blockComment","$quotes","$pairQuotesAfter","getNextLineIndent","tab","tokenizedLine","getTokenizer","getLineTokens","endState","checkOutdent","input","autoOutdent","worker","attachToDocument","getDocument","on","results","setAnnotations","data","clearAnnotations","openBracePos","findMatchingBracket"],"sourceRoot":""}