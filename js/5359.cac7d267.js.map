{"version":3,"file":"js/5359.cac7d267.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/lua.js","webpack://admin/./node_modules/ace-code/src/mode/lua.js","webpack://admin/./node_modules/ace-code/src/mode/lua_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/luapage.js","webpack://admin/./node_modules/ace-code/src/mode/luapage_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\n\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /\\b(function|then|do|repeat)\\b|{\\s*$|(\\[=*\\[)/;\n    this.foldingStopMarker = /\\bend\\b|^\\s*}|\\]=*\\]/;\n\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var isStart = this.foldingStartMarker.test(line);\n        var isEnd = this.foldingStopMarker.test(line);\n\n        if (isStart && !isEnd) {\n            var match = line.match(this.foldingStartMarker);\n            if (match[1] == \"then\" && /\\belseif\\b/.test(line))\n                return;\n            if (match[1]) {\n                if (session.getTokenAt(row, match.index + 1).type === \"keyword\")\n                    return \"start\";\n            } else if (match[2]) {\n                var type = session.bgTokenizer.getState(row) || \"\";\n                if (type[0] == \"bracketedComment\" || type[0] == \"bracketedString\")\n                    return \"start\";\n            } else {\n                return \"start\";\n            }\n        }\n        if (foldStyle != \"markbeginend\" || !isEnd || isStart && isEnd)\n            return \"\";\n\n        var match = line.match(this.foldingStopMarker);\n        if (match[0] === \"end\") {\n            if (session.getTokenAt(row, match.index + 1).type === \"keyword\")\n                return \"end\";\n        } else if (match[0][0] === \"]\") {\n            var type = session.bgTokenizer.getState(row - 1) || \"\";\n            if (type[0] == \"bracketedComment\" || type[0] == \"bracketedString\")\n                return \"end\";\n        } else\n            return \"end\";\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.doc.getLine(row);\n        var match = this.foldingStartMarker.exec(line);\n        if (match) {\n            if (match[1])\n                return this.luaBlock(session, row, match.index + 1);\n\n            if (match[2])\n                return session.getCommentFoldRange(row, match.index + 1);\n\n            return this.openingBracketBlock(session, \"{\", row, match.index);\n        }\n\n        var match = this.foldingStopMarker.exec(line);\n        if (match) {\n            if (match[0] === \"end\") {\n                if (session.getTokenAt(row, match.index + 1).type === \"keyword\")\n                    return this.luaBlock(session, row, match.index + 1);\n            }\n\n            if (match[0][0] === \"]\")\n                return session.getCommentFoldRange(row, match.index + 1);\n\n            return this.closingBracketBlock(session, \"}\", row, match.index + match[0].length);\n        }\n    };\n\n    this.luaBlock = function(session, row, column, tokenRange) {\n        var stream = new TokenIterator(session, row, column);\n        var indentKeywords = {\n            \"function\": 1,\n            \"do\": 1,\n            \"then\": 1,\n            \"elseif\": -1,\n            \"end\": -1,\n            \"repeat\": 1,\n            \"until\": -1\n        };\n\n        var token = stream.getCurrentToken();\n        if (!token || token.type != \"keyword\")\n            return;\n\n        var val = token.value;\n        var stack = [val];\n        var dir = indentKeywords[val];\n\n        if (!dir)\n            return;\n\n        var startColumn = dir === -1 ? stream.getCurrentTokenColumn() : session.getLine(row).length;\n        var startRow = row;\n\n        stream.step = dir === -1 ? stream.stepBackward : stream.stepForward;\n        while(token = stream.step()) {\n            if (token.type !== \"keyword\")\n                continue;\n            var level = dir * indentKeywords[token.value];\n\n            if (level > 0) {\n                stack.unshift(token.value);\n            } else if (level <= 0) {\n                stack.shift();\n                if (!stack.length && token.value != \"elseif\")\n                    break;\n                if (level === 0)\n                    stack.unshift(token.value);\n            }\n        }\n\n        if (!token)\n            return null;\n\n        if (tokenRange)\n            return stream.getCurrentTokenRange();\n\n        var row = stream.getCurrentTokenRow();\n        if (dir === -1)\n            return new Range(row, session.getLine(row).length, startRow, startColumn);\n        else\n            return new Range(startRow, startColumn, row, stream.getCurrentTokenColumn());\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar LuaHighlightRules = require(\"./lua_highlight_rules\").LuaHighlightRules;\nvar LuaFoldMode = require(\"./folding/lua\").FoldMode;\nvar Range = require(\"../range\").Range;\nvar WorkerClient = require(\"../worker/worker_client\").WorkerClient;\n\nvar Mode = function() {\n    this.HighlightRules = LuaHighlightRules;\n    \n    this.foldingRules = new LuaFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n   \n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"--[[\", end: \"--]]\"};\n    \n    var indentKeywords = {\n        \"function\": 1,\n        \"then\": 1,\n        \"do\": 1,\n        \"else\": 1,\n        \"elseif\": 1,\n        \"repeat\": 1,\n        \"end\": -1,\n        \"until\": -1\n    };\n    var outdentKeywords = [\n        \"else\",\n        \"elseif\",\n        \"end\",\n        \"until\"\n    ];\n\n    function getNetIndentLevel(tokens) {\n        var level = 0;\n        // Support single-line blocks by decrementing the indent level if\n        // an ending token is found\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (token.type == \"keyword\") {\n                if (token.value in indentKeywords) {\n                    level += indentKeywords[token.value];\n                }\n            } else if (token.type == \"paren.lparen\") {\n                level += token.value.length;\n            } else if (token.type == \"paren.rparen\") {\n                level -= token.value.length;\n            }\n        }\n        // Limit the level to +/- 1 since usually users only indent one level\n        // at a time regardless of the logical nesting level\n        if (level < 0) {\n            return -1;\n        } else if (level > 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        var level = 0;\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (state == \"start\") {\n            level = getNetIndentLevel(tokens);\n        }\n        if (level > 0) {\n            return indent + tab;\n        } else if (level < 0 && indent.substr(indent.length - tab.length) == tab) {\n            // Don't do a next-line outdent if we're going to do a real outdent of this line\n            if (!this.checkOutdent(state, line, \"\\n\")) {\n                return indent.substr(0, indent.length - tab.length);\n            }\n        }\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        if (input != \"\\n\" && input != \"\\r\" && input != \"\\r\\n\")\n            return false;\n\n        if (line.match(/^\\s*[\\)\\}\\]]$/))\n            return true;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n\n        if (!tokens || !tokens.length)\n            return false;\n\n        return (tokens[0].type == \"keyword\" && outdentKeywords.indexOf(tokens[0].value) != -1);\n    };\n\n    this.getMatching = function(session, row, column) {\n        if (row == undefined) {\n            var pos = session.selection.lead;\n            column = pos.column;\n            row = pos.row;\n        }\n\n        var startToken = session.getTokenAt(row, column);\n        if (startToken && startToken.value in indentKeywords)\n            return this.foldingRules.luaBlock(session, row, column, true);\n    };\n\n    this.autoOutdent = function(state, session, row) {\n        var line = session.getLine(row);\n        var column = line.match(/^\\s*/)[0].length;\n        if (!column || !row) return;\n\n        var startRange = this.getMatching(session, row, column + 1);\n        if (!startRange || startRange.start.row == row)\n             return;\n        var indent = this.$getIndent(session.getLine(startRange.start.row));\n        if (indent.length != column) {\n            session.replace(new Range(row, 0, row, column), indent);\n            session.outdentRows(new Range(row + 1, 0, row + 1, 0));\n        }\n    };\n\n    this.createWorker = function(session) {\n        var worker = new WorkerClient([\"ace\"], \"ace/mode/lua_worker\", \"Worker\");\n        worker.attachToDocument(session.getDocument());\n        \n        worker.on(\"annotate\", function(e) {\n            session.setAnnotations(e.data);\n        });\n        \n        worker.on(\"terminate\", function() {\n            session.clearAnnotations();\n        });\n        \n        return worker;\n    };\n\n    this.$id = \"ace/mode/lua\";\n    this.snippetFileId = \"ace/snippets/lua\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LuaHighlightRules = function() {\n\n    var keywords = (\n        \"break|do|else|elseif|end|for|function|if|in|local|repeat|\"+\n         \"return|then|until|while|or|and|not\"\n    );\n\n    var builtinConstants = (\"true|false|nil|_G|_VERSION\");\n\n    var functions = (\n      // builtinFunctions\n        \"string|xpcall|package|tostring|print|os|unpack|require|\"+\n        \"getfenv|setmetatable|next|assert|tonumber|io|rawequal|\"+\n        \"collectgarbage|getmetatable|module|rawset|math|debug|\"+\n        \"pcall|table|newproxy|type|coroutine|_G|select|gcinfo|\"+\n        \"pairs|rawget|loadstring|ipairs|_VERSION|dofile|setfenv|\"+\n        \"load|error|loadfile|\"+\n\n        \"sub|upper|len|gfind|rep|find|match|char|dump|gmatch|\"+\n        \"reverse|byte|format|gsub|lower|preload|loadlib|loaded|\"+\n        \"loaders|cpath|config|path|seeall|exit|setlocale|date|\"+\n        \"getenv|difftime|remove|time|clock|tmpname|rename|execute|\"+\n        \"lines|write|close|flush|open|output|type|read|stderr|\"+\n        \"stdin|input|stdout|popen|tmpfile|log|max|acos|huge|\"+\n        \"ldexp|pi|cos|tanh|pow|deg|tan|cosh|sinh|random|randomseed|\"+\n        \"frexp|ceil|floor|rad|abs|sqrt|modf|asin|min|mod|fmod|log10|\"+\n        \"atan2|exp|sin|atan|getupvalue|debug|sethook|getmetatable|\"+\n        \"gethook|setmetatable|setlocal|traceback|setfenv|getinfo|\"+\n        \"setupvalue|getlocal|getregistry|getfenv|setn|insert|getn|\"+\n        \"foreachi|maxn|foreach|concat|sort|remove|resume|yield|\"+\n        \"status|wrap|create|running|\"+\n      // metatableMethods\n        \"__add|__sub|__mod|__unm|__concat|__lt|__index|__call|__gc|__metatable|\"+\n         \"__mul|__div|__pow|__len|__eq|__le|__newindex|__tostring|__mode|__tonumber\"\n    );\n\n    var stdLibaries = (\"string|package|os|io|math|debug|table|coroutine\");\n\n    var deprecatedIn5152 = (\"setn|foreach|foreachi|gcinfo|log10|maxn\");\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"support.function\": functions,\n        \"keyword.deprecated\": deprecatedIn5152,\n        \"constant.library\": stdLibaries,\n        \"constant.language\": builtinConstants,\n        \"variable.language\": \"self\"\n    }, \"identifier\");\n\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + hexInteger + \")\";\n\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var floatNumber = \"(?:\" + pointFloat + \")\";\n\n    this.$rules = {\n        \"start\" : [{\n            stateName: \"bracketedComment\",\n            onMatch : function(value, currentState, stack){\n                stack.unshift(this.next, value.length - 2, currentState);\n                return \"comment\";\n            },\n            regex : /\\-\\-\\[=*\\[/,\n            next  : [\n                {\n                    onMatch : function(value, currentState, stack) {\n                        if (value.length == stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack.shift();\n                        } else {\n                            this.next = \"\";\n                        }\n                        return \"comment\";\n                    },\n                    regex : /\\]=*\\]/,\n                    next  : \"start\"\n                }, {\n                    defaultToken: \"comment.body\"\n                }\n            ]\n        },\n\n        {\n            token : \"comment\",\n            regex : \"\\\\-\\\\-.*$\"\n        },\n        {\n            stateName: \"bracketedString\",\n            onMatch : function(value, currentState, stack){\n                stack.unshift(this.next, value.length, currentState);\n                return \"string.start\";\n            },\n            regex : /\\[=*\\[/,\n            next  : [\n                {\n                    onMatch : function(value, currentState, stack) {\n                        if (value.length == stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack.shift();\n                        } else {\n                            this.next = \"\";\n                        }\n                        return \"string.end\";\n                    },\n                    \n                    regex : /\\]=*\\]/,\n                    next  : \"start\"\n                }, {\n                    defaultToken : \"string\"\n                }\n            ]\n        },\n        {\n            token : \"string\",           // \" string\n            regex : '\"(?:[^\\\\\\\\]|\\\\\\\\.)*?\"'\n        }, {\n            token : \"string\",           // ' string\n            regex : \"'(?:[^\\\\\\\\]|\\\\\\\\.)*?'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : floatNumber\n        }, {\n            token : \"constant.numeric\", // integer\n            regex : integer + \"\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\/|%|\\\\#|\\\\^|~|<|>|<=|=>|==|~=|=|\\\\:|\\\\.\\\\.\\\\.|\\\\.\\\\.\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+|\\\\w+\"\n        } ]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(LuaHighlightRules, TextHighlightRules);\n\nexports.LuaHighlightRules = LuaHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar HtmlMode = require(\"./html\").Mode;\nvar LuaMode = require(\"./lua\").Mode;\nvar LuaPageHighlightRules = require(\"./luapage_highlight_rules\").LuaPageHighlightRules;\n\nvar Mode = function() {\n    HtmlMode.call(this);\n    \n    this.HighlightRules = LuaPageHighlightRules;\n    this.createModeDelegates({\n        \"lua-\": LuaMode\n    });\n};\noop.inherits(Mode, HtmlMode);\n\n(function() {\n    this.$id = \"ace/mode/luapage\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","// LuaPage implements the LuaPage markup as described by the Kepler Project's CGILua\n// documentation: http://keplerproject.github.com/cgilua/manual.html#templates\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar HtmlHighlightRules = require(\"./html_highlight_rules\").HtmlHighlightRules;\nvar LuaHighlightRules = require(\"./lua_highlight_rules\").LuaHighlightRules;\n\nvar LuaPageHighlightRules = function() {\n    HtmlHighlightRules.call(this);\n\n    var startRules = [\n        {\n            token: \"keyword\",\n            regex: \"<\\\\%\\\\=?\",\n            push: \"lua-start\"\n        }, {\n            token: \"keyword\",\n            regex: \"<\\\\?lua\\\\=?\",\n            push: \"lua-start\"\n        }\n    ];\n\n    var endRules = [\n        {\n            token: \"keyword\",\n            regex: \"\\\\%>\",\n            next: \"pop\"\n        }, {\n            token: \"keyword\",\n            regex: \"\\\\?>\",\n            next: \"pop\"\n        }\n    ];\n\n    this.embedRules(LuaHighlightRules, \"lua-\", endRules, [\"start\"]);\n\n    for (var key in this.$rules)\n        this.$rules[key].unshift.apply(this.$rules[key], startRules);\n\n    this.normalizeRules();\n};\n\noop.inherits(LuaPageHighlightRules, HtmlHighlightRules);\n\nexports.LuaPageHighlightRules = LuaPageHighlightRules;\n"],"names":["oop","require","BaseFoldMode","Range","TokenIterator","FoldMode","exports","inherits","this","foldingStartMarker","foldingStopMarker","getFoldWidget","session","foldStyle","row","line","getLine","isStart","test","isEnd","match","getTokenAt","index","type","bgTokenizer","getState","getFoldWidgetRange","doc","exec","luaBlock","getCommentFoldRange","openingBracketBlock","closingBracketBlock","length","column","tokenRange","stream","indentKeywords","token","getCurrentToken","val","value","stack","dir","startColumn","getCurrentTokenColumn","startRow","step","stepBackward","stepForward","level","unshift","shift","getCurrentTokenRange","getCurrentTokenRow","call","prototype","TextMode","LuaHighlightRules","LuaFoldMode","WorkerClient","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","start","end","outdentKeywords","getNetIndentLevel","tokens","i","getNextLineIndent","state","tab","indent","$getIndent","tokenizedLine","getTokenizer","getLineTokens","substr","checkOutdent","input","trim","indexOf","getMatching","undefined","pos","selection","lead","startToken","autoOutdent","startRange","replace","outdentRows","createWorker","worker","attachToDocument","getDocument","on","e","setAnnotations","data","clearAnnotations","$id","snippetFileId","TextHighlightRules","keywords","builtinConstants","functions","stdLibaries","deprecatedIn5152","keywordMapper","createKeywordMapper","decimalInteger","hexInteger","integer","fraction","intPart","pointFloat","floatNumber","$rules","stateName","onMatch","currentState","next","regex","defaultToken","normalizeRules","HtmlMode","LuaMode","LuaPageHighlightRules","createModeDelegates","HtmlHighlightRules","startRules","push","endRules","key","embedRules","apply"],"sourceRoot":""}