{"version":3,"file":"js/939.40d186bc.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/ext/beautify.js"],"sourcesContent":["// [WIP]\n\n\"use strict\";\nvar TokenIterator = require(\"../token_iterator\").TokenIterator;\n\nfunction is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n}\n\n// do not indent after singleton tags or <html>\nexports.singletonTags = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"html\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\n\n// insert a line break after block level tags\nexports.blockTags = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"dl\", \"fieldset\", \"footer\", \"form\", \"head\", \"header\", \"html\", \"nav\", \"ol\", \"p\", \"script\", \"section\", \"style\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"ul\"];\n\n/**\n * \n * @type {{lineBreaksAfterCommasInCurlyBlock?: boolean}}\n */\nexports.formatOptions = {\n    lineBreaksAfterCommasInCurlyBlock: true\n};\n\n/**\n * \n * @param {import(\"../edit_session\").EditSession} session\n */\nexports.beautify = function(session) {\n    var iterator = new TokenIterator(session, 0, 0);\n    var token = iterator.getCurrentToken();\n    var tabString = session.getTabString();\n    var singletonTags = exports.singletonTags;\n    var blockTags = exports.blockTags;\n    var formatOptions = exports.formatOptions || {};\n    var nextToken;\n    var breakBefore = false;\n    var spaceBefore = false;\n    var spaceAfter = false;\n    var code = \"\";\n    var value = \"\";\n    var tagName = \"\";\n    var depth = 0;\n    var lastDepth = 0;\n    var lastIndent = 0;\n    var indent = 0;\n    var unindent = 0;\n    var roundDepth = 0;\n    var curlyDepth = 0;\n    var row;\n    var curRow = 0;\n    var rowsToAdd = 0;\n    var rowTokens = [];\n    var abort = false;\n    var i;\n    var indentNextLine = false;\n    var inTag = false;\n    var inCSS = false;\n    var inBlock = false;\n    var levels = {0: 0};\n    var parents = [];\n    var caseBody = false;\n\n    var trimNext = function() {\n        if (nextToken && nextToken.value && nextToken.type !== 'string.regexp')\n            nextToken.value = nextToken.value.replace(/^\\s*/, \"\");\n    };\n    \n    var trimLine = function() {\n        var end = code.length - 1;\n\n        while (true) {\n            if (end == 0)\n                break;\n            if (code[end] !== \" \")\n                break;\n            \n            end = end - 1;\n        }\n\n        code = code.slice(0, end + 1);\n    };\n    \n    var trimCode = function() {\n        code = code.trimRight();\n        breakBefore = false;\n    };\n\n    while (token !== null) {\n        curRow = iterator.getCurrentTokenRow();\n        rowTokens = iterator.$rowTokens;\n        nextToken = iterator.stepForward();\n\n        if (typeof token !== \"undefined\") {\n            value = token.value;\n            unindent = 0;\n\n            // mode\n            inCSS = (tagName === \"style\" || session.$modeId === \"ace/mode/css\");\n\n            // in tag\n            if (is(token, \"tag-open\")) {\n                inTag = true;\n\n                // are we in a block tag\n                if (nextToken)\n                    inBlock = (blockTags.indexOf(nextToken.value) !== -1);\n\n                // html indentation\n                if (value === \"</\") {\n                    // line break before closing tag unless we just had one\n                    if (inBlock && !breakBefore && rowsToAdd < 1)\n                        rowsToAdd++;\n\n                    if (inCSS)\n                        rowsToAdd = 1;\n\n                    unindent = 1;\n                    inBlock = false;\n                }\n            } else if (is(token, \"tag-close\")) {\n                inTag = false;\n            // comments\n            } else if (is(token, \"comment.start\")) {\n                inBlock = true;\n            } else if (is(token, \"comment.end\")) {\n                inBlock = false;\n            }\n\n            // line break before }\n            if (!inTag && !rowsToAdd && token.type === \"paren.rparen\" && token.value.substr(0, 1) === \"}\") {\n                rowsToAdd++;\n            }\n\n            // add rows\n            if (curRow !== row) {\n                rowsToAdd = curRow;\n\n                if (row)\n                    rowsToAdd -= row;\n            }\n\n            if (rowsToAdd) {\n                trimCode();\n                for (; rowsToAdd > 0; rowsToAdd--)\n                    code += \"\\n\";\n\n                breakBefore = true;\n\n                // trim value if not in a comment or string\n                if (!is(token, \"comment\") && !token.type.match(/^(comment|string)$/))\n                   value = value.trimLeft();\n            }\n\n            if (value) {\n                // whitespace\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|foreach|while|switch)$/)) {\n                    parents[depth] = value;\n\n                    trimNext();\n                    spaceAfter = true;\n\n                    // space before else, elseif\n                    if (value.match(/^(else|elseif)$/)) {\n                        if (code.match(/\\}[\\s]*$/)) {\n                            trimCode();\n                            spaceBefore = true;\n                        }\n                    }\n                // trim value after opening paren\n                } else if (token.type === \"paren.lparen\") {\n                    trimNext();\n\n                    // whitespace after {\n                    if (value.substr(-1) === \"{\") {\n                        spaceAfter = true;\n                        indentNextLine = false;\n\n                        if(!inTag)\n                            rowsToAdd = 1;\n                    }\n\n                    // ensure curly brace is preceeded by whitespace\n                    if (value.substr(0, 1) === \"{\") {\n                        spaceBefore = true;\n\n                        // collapse square and curly brackets together\n                        if (code.substr(-1) !== '[' && code.trimRight().substr(-1) === '[') {\n                            trimCode();\n                            spaceBefore = false;\n                        } else if (code.trimRight().substr(-1) === ')') {\n                            trimCode();\n                        } else {\n                            trimLine();\n                        }\n                    }\n                // remove space before closing paren\n                } else if (token.type === \"paren.rparen\") {\n                    unindent = 1;\n\n                    // ensure curly brace is preceeded by whitespace\n                    if (value.substr(0, 1) === \"}\") {\n                        if (parents[depth-1] === 'case')\n                            unindent++;\n\n                        if (code.trimRight().substr(-1) === '{') {\n                            trimCode();\n                        } else {\n                            spaceBefore = true;\n\n                            if (inCSS)\n                                rowsToAdd+=2;\n                        }\n                    }\n\n                    // collapse square and curly brackets together\n                    if (value.substr(0, 1) === \"]\") {\n                        if (code.substr(-1) !== '}' && code.trimRight().substr(-1) === '}') {\n                            spaceBefore = false;\n                            indent++;\n                            trimCode();\n                        }\n                    }\n\n                    // collapse round brackets together\n                    if (value.substr(0, 1) === \")\") {\n                        if (code.substr(-1) !== '(' && code.trimRight().substr(-1) === '(') {\n                            spaceBefore = false;\n                            indent++;\n                            trimCode();\n                        }\n                    }\n\n                    trimLine();\n                // add spaces around conditional operators\n                } else if ((token.type === \"keyword.operator\" || token.type === \"keyword\") && value.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)) {\n                    trimCode();\n                    trimNext();\n                    spaceBefore = true;\n                    spaceAfter = true;\n                // remove space before semicolon\n                } else if (token.type === \"punctuation.operator\" && value === ';') {\n                    trimCode();\n                    trimNext();\n                    spaceAfter = true;\n\n                    if (inCSS)\n                        rowsToAdd++;\n                // space after colon or comma\n                } else if (token.type === \"punctuation.operator\" && value.match(/^(:|,)$/)) {\n                    trimCode();\n                    trimNext();\n\n                    // line break after commas in curly block\n                    if (value.match(/^(,)$/) && curlyDepth>0 && roundDepth===0 && formatOptions.lineBreaksAfterCommasInCurlyBlock) {\n                        rowsToAdd++;\n                    } else {\n                        spaceAfter = true;\n                        breakBefore = false;\n                    }\n                // ensure space before php closing tag\n                } else if (token.type === \"support.php_tag\" && value === \"?>\" && !breakBefore) {\n                    trimCode();\n                    spaceBefore = true;\n                // remove excess space before HTML attribute\n                } else if (is(token, \"attribute-name\") && code.substr(-1).match(/^\\s$/)) {\n                    spaceBefore = true;\n                // remove space around attribute equals\n                } else if (is(token, \"attribute-equals\")) {\n                    trimLine();\n                    trimNext();\n                // remove space before HTML closing tag\n                } else if (is(token, \"tag-close\")) {\n                    trimLine();\n                    if(value === \"/>\")\n                        spaceBefore = true;\n                } else if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n                    if (caseBody)\n                        unindent = 1;\n                }\n\n                // add indent to code unless multiline string or comment\n                if (breakBefore && !(token.type.match(/^(comment)$/) && !value.substr(0, 1).match(/^[/#]$/)) && !(token.type.match(/^(string)$/) && !value.substr(0, 1).match(/^['\"@]$/))) {\n\n                    indent = lastIndent;\n\n                    if(depth > lastDepth) {\n                        indent++;\n\n                        for (i=depth; i > lastDepth; i--)\n                            levels[i] = indent;\n                    } else if(depth < lastDepth)\n                        indent = levels[depth];\n\n                    lastDepth = depth;\n                    lastIndent = indent;\n\n                    if(unindent)\n                        indent -= unindent;\n\n                    if (indentNextLine && !roundDepth) {\n                        indent++;\n                        indentNextLine = false;\n                    }\n\n                    for (i = 0; i < indent; i++)\n                        code += tabString;\n                }\n\n                if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n                    if (caseBody === false) {\n                        parents[depth] = value;\n                        depth++;\n                        caseBody = true;\n                    }\n                } else if (token.type === \"keyword\" && value.match(/^(break)$/)) {\n                    if(parents[depth-1] && parents[depth-1].match(/^(case|default)$/)) {\n                        depth--;\n                        caseBody = false;\n                    }\n                }\n\n                // indent one line after if or else\n                if (token.type === \"paren.lparen\") {\n                    roundDepth += (value.match(/\\(/g) || []).length;\n                    curlyDepth += (value.match(/\\{/g) || []).length;\n                    depth += value.length;\n                }\n\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|while)$/)) {\n                    indentNextLine = true;\n                    roundDepth = 0;\n                } else if (!roundDepth && value.trim() && token.type !== \"comment\")\n                    indentNextLine = false;\n\n                if (token.type === \"paren.rparen\") {\n                    roundDepth -= (value.match(/\\)/g) || []).length;\n                    curlyDepth -= (value.match(/\\}/g) || []).length;\n\n                    for (i = 0; i < value.length; i++) {\n                        depth--;\n                        if(value.substr(i, 1)==='}' && parents[depth]==='case') {\n                            depth--;\n                        }\n                    }\n                }\n                \n                if (token.type == \"text\")\n                    value = value.replace(/\\s+$/, \" \");\n\n                // add to code\n                if (spaceBefore && !breakBefore) {\n                    trimLine();\n                    if (code.substr(-1) !== \"\\n\")\n                        code += \" \";\n                }\n\n                code += value;\n\n                if (spaceAfter)\n                    code += \" \";\n\n                breakBefore = false;\n                spaceBefore = false;\n                spaceAfter = false;\n\n                // line break after block tag or doctype\n                if ((is(token, \"tag-close\") && (inBlock || blockTags.indexOf(tagName) !== -1)) || (is(token, \"doctype\") && value === \">\")) {\n                    // undo linebreak if tag is immediately closed\n                    if (inBlock && nextToken && nextToken.value === \"</\")\n                        rowsToAdd = -1;\n                    else\n                        rowsToAdd = 1;\n                }\n\n                // html indentation\n                if (nextToken && singletonTags.indexOf(nextToken.value) === -1) {\n                    if (is(token, \"tag-open\") && value === \"</\") {\n                        depth--;\n                    } else if (is(token, \"tag-open\") && value === \"<\") {\n                        depth++;\n                    } else if (is(token, \"tag-close\") && value === \"/>\"){\n                        depth--;\n                    }\n                }\n                \n                if (is(token, \"tag-name\")) {\n                    tagName = value;\n                }\n\n                row = curRow;\n            }\n        }\n\n        token = nextToken;\n    }\n\n    code = code.trim();\n    session.doc.setValue(code);\n};\n\nexports.commands = [{\n    name: \"beautify\",\n    description: \"Format selection (Beautify)\",\n    exec: function(editor) {\n        exports.beautify(editor.session);\n    },\n    bindKey: \"Ctrl-Shift-B\"\n}];\n"],"names":["TokenIterator","require","is","token","type","lastIndexOf","exports","singletonTags","blockTags","formatOptions","lineBreaksAfterCommasInCurlyBlock","beautify","session","nextToken","row","i","iterator","getCurrentToken","tabString","getTabString","breakBefore","spaceBefore","spaceAfter","code","value","tagName","depth","lastDepth","lastIndent","indent","unindent","roundDepth","curlyDepth","curRow","rowsToAdd","indentNextLine","inTag","inCSS","inBlock","levels","parents","caseBody","trimNext","replace","trimLine","end","length","slice","trimCode","trimRight","getCurrentTokenRow","$rowTokens","stepForward","$modeId","indexOf","substr","match","trimLeft","trim","doc","setValue","commands","name","description","exec","editor","bindKey"],"sourceRoot":""}