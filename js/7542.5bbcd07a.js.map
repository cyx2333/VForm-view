{"version":3,"file":"js/7542.5bbcd07a.js","mappings":"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S,YACV,CACCC,MAAO,CACH,gCACA,wBACA,OACA,2BAEJC,MAAO,wBACR,CACCD,MAAO,CACH,2BACA,OACA,qCAEJC,MAAO,0CACR,CACCD,MAAO,CACH,2BACA,OACA,2BACA,OACA,2BAEJC,MAAO,wDACR,CACCD,MAAO,CACH,2BACA,wBACA,OACA,2BAEJC,MAAO,8BACR,CACCD,MAAO,CACH,2BACA,OACA,2BAEJC,MAAO,8LACR,CACCD,MAAO,CACH,0BACA,OACA,0BACA,OACA,OACA,0BACA,OACA,OACA,2BAEJC,MAAO,0GACR,CACCF,QAAS,UACV,CACCC,MAAO,CACH,oCACA,gDAEJC,MAAO,4BACR,CACCF,QAAS,UACV,CACCC,MAAO,uBACPC,MAAO,QAEX,WAAY,CAAC,CACTF,QAAS,gBACV,CACCA,QAAS,kBAEb,eAAgB,CAAC,CACbC,MAAO,qCACPC,MAAO,aAEX,gBAAiB,CAAC,CACdD,MAAO,mCACPC,MAAO,WAEX,SAAU,CAAC,CACPD,MAAO,CACH,2CACA,kCAEJC,MAAO,yBACR,CACCD,MAAO,CACH,2CACA,2CACA,yBAEJC,MAAO,4BACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,iBACV,CACCK,aAAc,4BAGtB,SAAU,CAAC,CACPL,QAAS,aACV,CACCA,QAAS,WACV,CACCA,QAAS,WACV,CACCA,QAAS,UACV,CACCA,QAAS,YAEb,SAAU,CAAC,CACPC,MAAO,4CACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,0CACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,YACV,CACCA,QAAS,UACV,CACCC,MAAO,qCACPC,MAAO,KACR,CACCD,MAAO,kDACPC,MAAO,WACR,CACCG,aAAc,kCAGtB,YAAa,CAAC,CACVJ,MAAO,2BACPC,MAAO,4BAEX,UAAW,CAAC,CACRD,MAAO,0BACPC,MAAO,qDAEX,UAAW,CAAC,CACRD,MAAO,iDACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,+CACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCA,QAAS,iBACV,CACCK,aAAc,uCAGtB,gBAAiB,CAAC,CACdL,QAAS,YACV,CACCA,QAAS,eACV,CACCC,MAAO,oDACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,+CACPC,MAAO,WACPE,KAAM,OACP,CACCJ,QAAS,UACV,CACCC,MAAO,uDACPC,MAAO,UACR,CACCG,aAAc,4CAEnB,CACCJ,MAAO,uDACPC,MAAO,YAEX,cAAe,CAAC,CACZF,QAAS,mBACV,CACCA,QAAS,eACV,CACCA,QAAS,gBAEb,kBAAmB,CAAC,CAChBC,MAAO,oCACPC,MAAO,wBAEX,cAAe,CAAC,CACZF,QAAS,YAEb,cAAe,CAAC,CACZA,QAAS,YAEb,UAAW,CAAC,CACRA,QAAS,cACV,CACCA,QAAS,WACV,CACCA,QAAS,WACV,CACCA,QAAS,gBAEb,aAAc,CAAC,CACXC,MAAO,6CACPC,MAAO,MACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,MACPE,KAAM,OACP,CACCH,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,kCAGtB,UAAW,CAAC,CACRJ,MAAO,6CACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,kCAGtB,UAAW,CAAC,CACRJ,MAAO,6CACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,2CACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,kCAGtB,cAAe,CAAC,CACZJ,MAAO,sBACPC,MAAO,mCAIf3E,KAAK+E,gBACT,EAEApB,EAAqBqB,SAAW,CAC5BC,KAAM,SACNC,UAAW,CAAC,UACZC,UAAW,gBACXlF,mBAAoB,gBACpBK,kBAAmB,iBAIvBb,EAAIe,SAASmD,EAAsBY,GAEnCzE,EAAQ,EAAuB6D,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/matching_brace_outdent.js","webpack://admin/./node_modules/ace-code/src/mode/smithy.js","webpack://admin/./node_modules/ace-code/src/mode/smithy_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar SmithyHighlightRules = require(\"./smithy_highlight_rules\").SmithyHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = SmithyHighlightRules;\n\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.$quotes = {'\"': '\"'};\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    \n    this.$id = \"ace/mode/smithy\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/* This file was autogenerated from https://raw.githubusercontent.com/awslabs/smithy-vscode/master/syntaxes/smithy.tmLanguage (uuid: ) */\n/****************************************************************************************\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\n * fileTypes                                                                            *\n ****************************************************************************************/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SmithyHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        start: [{\n            include: \"#comment\"\n        }, {\n            token: [\n                \"meta.keyword.statement.smithy\",\n                \"variable.other.smithy\",\n                \"text\",\n                \"keyword.operator.smithy\"\n            ],\n            regex: /^(\\$)(\\s+.+)(\\s*)(=)/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"entity.name.type.namespace.smithy\"\n            ],\n            regex: /^(namespace)(\\s+)([A-Z-a-z0-9_\\.#$-]+)/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"entity.name.type.smithy\"\n            ],\n            regex: /^(use)(\\s+)(shape|trait)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"variable.other.smithy\",\n                \"text\",\n                \"keyword.operator.smithy\"\n            ],\n            regex: /^(metadata)(\\s+.+)(\\s*)(=)/\n        }, {\n            token: [\n                \"keyword.statement.smithy\",\n                \"text\",\n                \"entity.name.type.smithy\"\n            ],\n            regex: /^(apply|byte|short|integer|long|float|double|bigInteger|bigDecimal|boolean|blob|string|timestamp|service|resource|trait|list|map|set|structure|union|document)(\\s+)([A-Z-a-z0-9_\\.#$-]+)\\b/\n        }, {\n            token: [\n                \"keyword.operator.smithy\",\n                \"text\",\n                \"entity.name.type.smithy\",\n                \"text\",\n                \"text\",\n                \"support.function.smithy\",\n                \"text\",\n                \"text\",\n                \"support.function.smithy\"\n            ],\n            regex: /^(operation)(\\s+)([A-Z-a-z0-9_\\.#$-]+)(\\(.*\\))(?:(\\s*)(->)(\\s*[A-Z-a-z0-9_\\.#$-]+))?(?:(\\s+)(errors))?/\n        }, {\n            include: \"#trait\"\n        }, {\n            token: [\n                \"support.type.property-name.smithy\",\n                \"punctuation.separator.dictionary.pair.smithy\"\n            ],\n            regex: /([A-Z-a-z0-9_\\.#$-]+)(:)/\n        }, {\n            include: \"#value\"\n        }, {\n            token: \"keyword.other.smithy\",\n            regex: /\\->/\n        }],\n        \"#comment\": [{\n            include: \"#doc_comment\"\n        }, {\n            include: \"#line_comment\"\n        }],\n        \"#doc_comment\": [{\n            token: \"comment.block.documentation.smithy\",\n            regex: /\\/\\/\\/.*/\n        }],\n        \"#line_comment\": [{\n            token: \"comment.line.double-slash.smithy\",\n            regex: /\\/\\/.*/\n        }],\n        \"#trait\": [{\n            token: [\n                \"punctuation.definition.annotation.smithy\",\n                \"storage.type.annotation.smithy\"\n            ],\n            regex: /(@)([0-9a-zA-Z\\.#-]+)/\n        }, {\n            token: [\n                \"punctuation.definition.annotation.smithy\",\n                \"punctuation.definition.object.end.smithy\",\n                \"meta.structure.smithy\"\n            ],\n            regex: /(@)([0-9a-zA-Z\\.#-]+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.object.end.smithy\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                include: \"#object_inner\"\n            }, {\n                defaultToken: \"meta.structure.smithy\"\n            }]\n        }],\n        \"#value\": [{\n            include: \"#constant\"\n        }, {\n            include: \"#number\"\n        }, {\n            include: \"#string\"\n        }, {\n            include: \"#array\"\n        }, {\n            include: \"#object\"\n        }],\n        \"#array\": [{\n            token: \"punctuation.definition.array.begin.smithy\",\n            regex: /\\[/,\n            push: [{\n                token: \"punctuation.definition.array.end.smithy\",\n                regex: /\\]/,\n                next: \"pop\"\n            }, {\n                include: \"#comment\"\n            }, {\n                include: \"#value\"\n            }, {\n                token: \"punctuation.separator.array.smithy\",\n                regex: /,/\n            }, {\n                token: \"invalid.illegal.expected-array-separator.smithy\",\n                regex: /[^\\s\\]]/\n            }, {\n                defaultToken: \"meta.structure.array.smithy\"\n            }]\n        }],\n        \"#constant\": [{\n            token: \"constant.language.smithy\",\n            regex: /\\b(?:true|false|null)\\b/\n        }],\n        \"#number\": [{\n            token: \"constant.numeric.smithy\",\n            regex: /-?(?:0|[1-9]\\d*)(?:(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)?/\n        }],\n        \"#object\": [{\n            token: \"punctuation.definition.dictionary.begin.smithy\",\n            regex: /\\{/,\n            push: [{\n                token: \"punctuation.definition.dictionary.end.smithy\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#trait\"\n            }, {\n                include: \"#object_inner\"\n            }, {\n                defaultToken: \"meta.structure.dictionary.smithy\"\n            }]\n        }],\n        \"#object_inner\": [{\n            include: \"#comment\"\n        }, {\n            include: \"#string_key\"\n        }, {\n            token: \"punctuation.separator.dictionary.key-value.smithy\",\n            regex: /:/,\n            push: [{\n                token: \"punctuation.separator.dictionary.pair.smithy\",\n                regex: /,|(?=\\})/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n                regex: /[^\\s,]/\n            }, {\n                defaultToken: \"meta.structure.dictionary.value.smithy\"\n            }]\n        }, {\n            token: \"invalid.illegal.expected-dictionary-separator.smithy\",\n            regex: /[^\\s\\}]/\n        }],\n        \"#string_key\": [{\n            include: \"#identifier_key\"\n        }, {\n            include: \"#dquote_key\"\n        }, {\n            include: \"#squote_key\"\n        }],\n        \"#identifier_key\": [{\n            token: \"support.type.property-name.smithy\",\n            regex: /[A-Z-a-z0-9_\\.#$-]+/\n        }],\n        \"#dquote_key\": [{\n            include: \"#dquote\"\n        }],\n        \"#squote_key\": [{\n            include: \"#squote\"\n        }],\n        \"#string\": [{\n            include: \"#textblock\"\n        }, {\n            include: \"#dquote\"\n        }, {\n            include: \"#squote\"\n        }, {\n            include: \"#identifier\"\n        }],\n        \"#textblock\": [{\n            token: \"punctuation.definition.string.begin.smithy\",\n            regex: /\"\"\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.smithy\",\n                regex: /\"\"\"/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.smithy\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.smithy\"\n            }]\n        }],\n        \"#dquote\": [{\n            token: \"punctuation.definition.string.begin.smithy\",\n            regex: /\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.smithy\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.smithy\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.smithy\"\n            }]\n        }],\n        \"#squote\": [{\n            token: \"punctuation.definition.string.begin.smithy\",\n            regex: /'/,\n            push: [{\n                token: \"punctuation.definition.string.end.smithy\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.smithy\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.single.smithy\"\n            }]\n        }],\n        \"#identifier\": [{\n            token: \"storage.type.smithy\",\n            regex: /[A-Z-a-z_][A-Z-a-z0-9_\\.#$-]*/\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nSmithyHighlightRules.metaData = {\n    name: \"Smithy\",\n    fileTypes: [\"smithy\"],\n    scopeName: \"source.smithy\",\n    foldingStartMarker: \"(\\\\{|\\\\[)\\\\s*\",\n    foldingStopMarker: \"\\\\s*(\\\\}|\\\\])\"\n};\n\n\noop.inherits(SmithyHighlightRules, TextHighlightRules);\n\nexports.SmithyHighlightRules = SmithyHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","SmithyHighlightRules","CStyleFoldMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","foldingRules","lineCommentStart","$quotes","state","$id","TextHighlightRules","$rules","include","token","regex","push","next","defaultToken","normalizeRules","metaData","name","fileTypes","scopeName"],"sourceRoot":""}