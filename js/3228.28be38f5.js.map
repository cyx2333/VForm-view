{"version":3,"file":"js/3228.28be38f5.js","mappings":"2GACA,IAKIA,EAAOC,EALPC,EAAcC,EAAAA,OAAAA,YACdC,EAASD,EAAAA,MAAAA,EACTE,EAAiBF,EAAAA,MAAAA,EACjBG,EAAQH,EAAAA,OAAAA,EACRI,EAASJ,EAAQ,OAOrB,MAAMK,EAIFC,YAAAA,CAAaC,GACTC,KAAKC,IAAMF,EACXC,KAAKE,YAAcH,EAAOI,QAAQC,eAC7Bf,IACDA,EAAQgB,OAAO,UACnB,IAAIC,EAAYjB,EAAMiB,WAAajB,EAAMG,QAAQ,aACjDc,EAAUC,YAAY,cAAeP,KAAKE,aAC1CF,KAAKQ,QAAU,KACfR,KAAKQ,QAAUR,KAAKS,WACxB,CAWAC,iBAAAA,GAEI,IAAIC,EAAQX,KAAKC,IAAIS,oBACjBE,EAAMZ,KAAKC,IAAIE,QAAQS,IAC3B,MAAO,CACHC,MAAOD,EAAIE,gBAAgBH,EAAME,OACjCE,IAAKH,EAAIE,gBAAgBH,EAAMI,KAEvC,CAcAC,eAAAA,CAAgBH,EAAOE,GACnB,IAAIH,EAAMZ,KAAKC,IAAIE,QAAQS,IAC3BZ,KAAKC,IAAIgB,UAAUC,SAAS,CACxBL,MAAOD,EAAIO,gBAAgBN,GAC3BE,IAAKH,EAAIO,gBAAgBJ,IAEjC,CAUAK,mBAAAA,GACI,IAAInB,EAAMD,KAAKC,IACXoB,EAAMpB,EAAIqB,oBAAoBD,IAC9BE,EAAatB,EAAIE,QAAQqB,QAAQH,GAAKI,OACtCC,EAAQzB,EAAIE,QAAQS,IAAIE,gBAAgB,CAACO,IAAKA,EAAKM,OAAQ,IAC/D,MAAO,CACHd,MAAOa,EACPX,IAAKW,EAAQH,EAErB,CAMAK,WAAAA,GACI,IAAIC,EAAM7B,KAAKC,IAAIqB,oBACnB,OAAOtB,KAAKC,IAAIE,QAAQS,IAAIE,gBAAgBe,EAChD,CAMAC,WAAAA,CAAYJ,GACR,IAAIG,EAAM7B,KAAKC,IAAIE,QAAQS,IAAIO,gBAAgBO,GAC/C1B,KAAKC,IAAIgB,UAAUc,eAAeF,EACtC,CAMAG,cAAAA,GACI,IAAIX,EAAMrB,KAAKC,IAAIqB,oBAAoBD,IACvC,OAAOrB,KAAKC,IAAIE,QAAQqB,QAAQH,EACpC,CAsBAY,cAAAA,CAAeC,EAAOrB,EAAOE,EAAKoB,GACnB,MAAPpB,IACAA,EAAe,MAATF,EAAgBb,KAAKoC,aAAaX,OAASZ,GACxC,MAATA,IACAA,EAAQ,GAEZ,IAAId,EAASC,KAAKC,IACdW,EAAMb,EAAOI,QAAQS,IACrBD,EAAQhB,EAAM0C,WAAWzB,EAAIO,gBAAgBN,GAAQD,EAAIO,gBAAgBJ,IAC7EhB,EAAOI,QAAQmC,OAAO3B,GAEtBA,EAAMI,IAAMJ,EAAME,MAGlBqB,EAAQlC,KAAKuC,gBAAgBL,GAC7BxC,EAAe8C,cAAczC,EAAQmC,EACzC,CAMAE,UAAAA,GACI,OAAOpC,KAAKC,IAAIwC,UACpB,CAMAhC,SAAAA,GACI,GAAIT,KAAKQ,QACL,OAAOR,KAAKQ,QAChB,IAAIkC,EAAS1C,KAAKC,IAAIE,QAAQwC,QAAQC,MAAM,KAAKC,MACjD,GAAc,QAAVH,GAA8B,OAAVA,EAAiB,CACrC,IAAII,EAAS9C,KAAKC,IAAIqB,oBAElByB,EAAQ/C,KAAKC,IAAIE,QAAQ6C,SAASF,EAAOzB,KACzB,iBAAT0B,IACPA,EAAQA,EAAM,IACdA,IACAA,EAAQA,EAAMH,MAAM,KAChBG,EAAMtB,OAAS,EACfiB,EAASK,EAAM,GACA,OAAVL,IACLA,EAAS,QAErB,CACA,OAAOA,CACX,CAMAO,cAAAA,GACI,IAAI3C,EAAYjB,EAAMiB,WAAajB,EAAMG,QAAQ,aACjD,OAAQQ,KAAKS,aACX,IAAK,MAAO,MAAO,MACnB,IAAK,MACL,IAAK,MACH,MAAO,MACT,IAAK,OACH,IAAIyC,EAAU5C,EAAU6C,YAAY,WAIpC,OAFKD,IACDA,GAAqF,GAA3ElD,KAAKC,IAAIE,QAAQiD,SAAS,EAAE,GAAGC,KAAK,IAAIC,OAAO,wBAAgC,QAAS,QAC/FJ,EACT,QACE,IAAIK,EAAOvD,KAAKC,IAAIE,QAAQqD,MAC5B,OAAOD,EAAKE,aAAeF,EAAKE,YAAYP,SAAW,QAE/D,CAQAQ,MAAAA,CAAOC,GACH,OAAOD,OAAOC,EAClB,CAOAC,YAAAA,GACI,OAAO5D,KAAKC,IAAIE,QAAQ0D,cAC5B,CAOAC,WAAAA,GACI,MAAO,EACX,CAUAvB,eAAAA,CAAgBL,GACZ,IAAI6B,EAAO,IACPC,EAAW,EACXC,EAAW,KACXC,EAAK7E,EAAM8E,UAAY9E,EAAMG,QAAQ,YACrCc,EAAYjB,EAAMiB,WAAajB,EAAMG,QAAQ,aAC7C4E,EAAW9D,EAAU+D,cAAc,QACnCC,EAAiB,CACjBC,QAAS,SAASC,GACd,IAAIC,EAAQC,SAASF,EAAKC,MAAO,IAC7BE,EAAmB,IAAVF,EACTE,EACAF,IAAUT,EAEVS,GAASV,EAEb,IAAIa,EAAcJ,EAAKI,YACnBA,IAEAA,EAAcV,EAAGW,YAAYD,EAAaN,IAG9C,IAAIQ,EAAS,KAAOL,GAASG,EAAc,IAAMA,EAAc,IAAM,IAMrE,OAJID,IACAV,EAAW,CAACO,EAAK3D,MAAOiE,IAGrBA,CACX,EACAC,OAAQ,SAASC,GACb,MAAU,KAANA,EAAkB,MACZ,MAANA,EAAmB,OAChBA,CACX,GAKJ,GAFA9C,EAAQgC,EAAGW,YAAY3C,EAAOoC,GAE1BF,EAASa,UAAU,0BAA4B,WAAWC,KAAKhD,GAC/DA,GAAS,YACN,GAAI+B,EAAU,CACjB,IAAIkB,EAAS9F,EAAM+F,MAAQ/F,EAAM+F,MAAMD,OAAS9F,EAAMG,QAAQ,SAC9D0C,EAAQiD,EAAOE,iBAAiBnD,EAAO,OAAQ+B,EAAS,GAAIA,EAAS,GACzE,CAEA,OAAO/B,CACX,EAIJ,IAAIoD,EAAS,CACTC,oBAAqB,CAAC,IAAO,aAAc,IAAO,SAClDC,mBAAoB,CAAC,IAAO,SAAU,IAAO,UAC7CC,kBAAmB,CAAC,IAAO,SAAU,IAAO,gBAC5CC,cAAe,CAAC,IAAO,aAAc,IAAO,SAC5CC,gBAAiB,YACjBC,gBAAiB,WACjBC,eAAgB,CAAC,IAAO,YAAa,IAAO,UAC5CC,eAAgB,CAAC,IAAO,kBAAmB,IAAO,gBAClDC,WAAY,CAAC,IAAO,YAAa,IAAO,gBACxCC,yBAA0B,CAAC,IAAO,kBAAmB,IAAO,gBAC5DC,sBAAuB,UACvBC,sBAAuB,YACvBC,uBAAwB,SACxBC,uBAAwB,WACxBC,uBAAwB,CAAC,IAAO,iBAAkB,IAAO,gBACzDC,uBAAwB,CAAC,IAAO,mBAAoB,IAAO,kBAC3DC,iBAAkB,CAAC,IAAO,kBAAmB,IAAO,gBACpDC,qBAAsB,CAAC,IAAO,kBAAmB,IAAO,gBACxDC,kBAAmB,CAAC,IAAO,kBAAmB,IAAO,gBAErDC,uBAAwB,CAAC,IAAO,eAAgB,IAAO,UAIvDC,6BAA8B,MAC9BC,uBAAwB,CAAC,IAAO,eAAgB,IAAO,iBAGvDC,EAAc,IAAIhH,EAyCtB,IAAK,IAAIiH,KAxCTC,EAAQC,SAAW,IAAIzH,EAKvBwH,EAAQE,gBAAkB,SAASA,EAAgBlH,GAC/C,GAAmB,gCAAfC,KAAKkH,OAA0C,CAC/C,IAAKnH,EAAOkB,UAAUkG,UAClB,OAAO,EACX,IAAItF,EAAM9B,EAAOkB,UAAUmG,KACvBC,EAAQtH,EAAOI,QAAQmH,WAAWzF,EAAIR,IAAKQ,EAAIF,QACnD,GAAI0F,GAAS,UAAUnC,KAAKmC,EAAME,MAC9B,OAAO,CACf,CACA,IACIV,EAAY/G,aAAaC,GACzB,IAAIyH,EAAUnI,EAAMmI,SAAWnI,EAAMG,QAAQ,WAE7C,GAAmB,0BAAfQ,KAAKkH,OAEL,OAAOO,YAAW,WACdD,EAAQE,IAAI,yBAA0Bb,EAC1C,GAAG,GAGP,IAAI/B,EAAS0C,EAAQE,IAAI1H,KAAKkH,OAAQL,EAC1C,CAAE,MAAMc,GACJ,IAAKtI,EAAO,CACR,IAAIuI,EAAUb,EAAQc,KAAKZ,EAAgBa,KAAK9H,KAAMD,IACtD,MAAmB,gCAAfC,KAAKkH,QAEFU,CACX,CACA7H,EAAOgI,QAAQ,eAA4B,iBAALJ,EAAgBA,EAAIA,EAAEK,SAC5DpI,EAAOqI,KAAKN,GACZ7C,GAAS,CACb,CACA,OAAOA,CACX,EAEoBQ,EAChByB,EAAQC,SAASkB,WAAW,CACxBC,KAAM,SAAWrB,EACjBI,OAAQJ,EACRsB,QAAS9C,EAAOwB,GAChBuB,KAAMtB,EAAQE,gBACdqB,kBAAmB,YAQ3BvB,EAAQwB,eAAiB,SAASxI,EAAQyI,GAClCA,EACAzI,EAAO0I,WAAWC,mBAAmB3B,EAAQC,UAE7CjH,EAAO0I,WAAWE,sBAAsB5B,EAAQC,SAExD,EAEAD,EAAQ6B,gBAAkB,SAASrF,GAC/B,IAAKA,EAAM,OAAO,EAClB,GAAIA,EAAKE,YAAa,OAAO,EAC7B,IAAIoF,EAAKtF,EAAKuF,KAAOvF,EACrB,MAAO,yDAAyD2B,KAAK2D,EACzE,EAOA9B,EAAQgC,YAAc,SAAShJ,EAAQ+G,GACnC,GAAI,kDAAkD5B,KAAK4B,GACvD,OAAO,EACX,IAAIvD,EAAOxD,EAAOI,QAAQqD,MACtBwF,EAAcjC,EAAQ6B,gBAAgBrF,GAC1C,GAAIyF,GAAezF,EAAK0F,OAEpB,IACIpC,EAAY/G,aAAaC,GACrB,SAASmF,KAAK2B,EAAYpG,eAC1BuI,GAAc,EACtB,CAAE,MAAMrB,GAAI,CAEhB,OAAOqB,CACX,EAEA,IAAIE,EAAe,SAASvB,EAAGwB,GAC3B,IAAIpJ,EAASoJ,EACb,GAAKpJ,EAAL,CAEA,IAAIyI,EAAUzB,EAAQ6B,gBAAgB7I,EAAOI,QAAQqD,QAC/B,IAAlBmE,EAAEyB,cACFZ,GAAU,GACVA,GACAzB,EAAQc,OACZd,EAAQwB,eAAexI,EAAQyI,EANrB,CAOd,EAEAzB,EAAQc,KAAO,SAASwB,GACpB,MAAyB,kBAAd/J,GACPM,EAAOqI,KAAK,wCACL,IAEXrI,EAAO0J,WAAWhK,GAAW,WACzBA,EAAY,KACZ+J,GAAMA,GACV,KACO,EACX,EAEAtC,EAAQlH,eAAiBA,EACzBD,EAAO2J,cAAc9J,EAAO+J,UAAW,SAAU,CAC7CJ,YAAa,CACTK,IAAK,SAASC,GACV1J,KAAK0J,EAAM,KAAO,kBAAkB,aAAcR,GAClDA,EAAa,CAACE,cAAeM,GAAM1J,KACvC,EACAkC,OAAO,KAIf6E,EAAQ4C,QAAU,SAAShC,GACP,iBAALA,EACRrI,EAAYqI,EAEZtI,EAAQsI,CACf,C","sources":["webpack://admin/./node_modules/ace-code/src/ext/emmet.js"],"sourcesContent":["\"use strict\";\nvar HashHandler = require(\"../keyboard/hash_handler\").HashHandler;\nvar Editor = require(\"../editor\").Editor;\nvar snippetManager = require(\"../snippets\").snippetManager;\nvar Range = require(\"../range\").Range;\nvar config = require(\"../config\");\nvar emmet, emmetPath;\n\n/**\n * Implementation of {@link IEmmetEditor} interface for Ace\n */\n\nclass AceEmmetEditor {\n    /**\n     * @param {Editor} editor\n     */\n    setupContext(editor) {\n        this.ace = editor;\n        this.indentation = editor.session.getTabString();\n        if (!emmet)\n            emmet = window[\"emmet\"];\n        var resources = emmet.resources || emmet.require(\"resources\");\n        resources.setVariable(\"indentation\", this.indentation);\n        this.$syntax = null;\n        this.$syntax = this.getSyntax();\n    }\n    /**\n     * Returns character indexes of selected text: object with <code>start</code>\n     * and <code>end</code> properties. If there's no selection, should return\n     * object with <code>start</code> and <code>end</code> properties referring\n     * to current caret position\n     * @return {Object}\n     * @example\n     * var selection = editor.getSelectionRange();\n     * alert(selection.start + ', ' + selection.end);\n     */\n    getSelectionRange() {\n        // TODO should start be caret position instead?\n        var range = this.ace.getSelectionRange();\n        var doc = this.ace.session.doc;\n        return {\n            start: doc.positionToIndex(range.start),\n            end: doc.positionToIndex(range.end)\n        };\n    }\n\n    /**\n     * Creates selection from <code>start</code> to <code>end</code> character\n     * indexes. If <code>end</code> is ommited, this method should place caret\n     * and <code>start</code> index\n     * @param {Number} start\n     * @param {Number} [end]\n     * @example\n     * editor.createSelection(10, 40);\n     *\n     * //move caret to 15th character\n     * editor.createSelection(15);\n     */\n    createSelection(start, end) {\n        var doc = this.ace.session.doc;\n        this.ace.selection.setRange({\n            start: doc.indexToPosition(start),\n            end: doc.indexToPosition(end)\n        });\n    }\n\n    /**\n     * Returns current line's start and end indexes as object with <code>start</code>\n     * and <code>end</code> properties\n     * @return {Object}\n     * @example\n     * var range = editor.getCurrentLineRange();\n     * alert(range.start + ', ' + range.end);\n     */\n    getCurrentLineRange() {\n        var ace = this.ace;\n        var row = ace.getCursorPosition().row;\n        var lineLength = ace.session.getLine(row).length;\n        var index = ace.session.doc.positionToIndex({row: row, column: 0});\n        return {\n            start: index,\n            end: index + lineLength\n        };\n    }\n\n    /**\n     * Returns current caret position\n     * @return {Number|null}\n     */\n    getCaretPos(){\n        var pos = this.ace.getCursorPosition();\n        return this.ace.session.doc.positionToIndex(pos);\n    }\n\n    /**\n     * Set new caret position\n     * @param {Number} index Caret position\n     */\n    setCaretPos(index){\n        var pos = this.ace.session.doc.indexToPosition(index);\n        this.ace.selection.moveToPosition(pos);\n    }\n\n    /**\n     * Returns content of current line\n     * @return {String}\n     */\n    getCurrentLine() {\n        var row = this.ace.getCursorPosition().row;\n        return this.ace.session.getLine(row);\n    }\n\n    /**\n     * Replace editor's content or it's part (from <code>start</code> to\n     * <code>end</code> index). If <code>value</code> contains\n     * <code>caret_placeholder</code>, the editor will put caret into\n     * this position. If you skip <code>start</code> and <code>end</code>\n     * arguments, the whole target's content will be replaced with\n     * <code>value</code>.\n     *\n     * If you pass <code>start</code> argument only,\n     * the <code>value</code> will be placed at <code>start</code> string\n     * index of current content.\n     *\n     * If you pass <code>start</code> and <code>end</code> arguments,\n     * the corresponding substring of current target's content will be\n     * replaced with <code>value</code>.\n     * @param {String} value Content you want to paste\n     * @param {Number} [start] Start index of editor's content\n     * @param {Number} [end] End index of editor's content\n     * @param {Boolean} [noIndent] Do not auto indent <code>value</code>\n     */\n    replaceContent(value, start, end, noIndent) {\n        if (end == null)\n            end = start == null ? this.getContent().length : start;\n        if (start == null)\n            start = 0;        \n        \n        var editor = this.ace;\n        var doc = editor.session.doc;\n        var range = Range.fromPoints(doc.indexToPosition(start), doc.indexToPosition(end));\n        editor.session.remove(range);\n        \n        range.end = range.start;\n        //editor.selection.setRange(range);\n        \n        value = this.$updateTabstops(value);\n        snippetManager.insertSnippet(editor, value);\n    }\n\n    /**\n     * Returns editor's content\n     * @return {String}\n     */\n    getContent(){\n        return this.ace.getValue();\n    }\n\n    /**\n     * Returns current editor's syntax mode\n     * @return {String}\n     */\n    getSyntax() {\n        if (this.$syntax)\n            return this.$syntax;\n        var syntax = this.ace.session.$modeId.split(\"/\").pop();\n        if (syntax == \"html\" || syntax == \"php\") {\n            var cursor = this.ace.getCursorPosition();\n            /**@type {string | string[]} */\n            var state = this.ace.session.getState(cursor.row);\n            if (typeof state != \"string\")\n                state = state[0];\n            if (state) {\n                state = state.split(\"-\");\n                if (state.length > 1)\n                    syntax = state[0];\n                else if (syntax == \"php\")\n                    syntax = \"html\";\n            }\n        }\n        return syntax;\n    }\n\n    /**\n     * Returns current output profile name (@see emmet#setupProfile)\n     * @return {String}\n     */\n    getProfileName() {\n        var resources = emmet.resources || emmet.require(\"resources\");\n        switch (this.getSyntax()) {\n          case \"css\": return \"css\";\n          case \"xml\":\n          case \"xsl\":\n            return \"xml\";\n          case \"html\":\n            var profile = resources.getVariable(\"profile\");\n            // no forced profile, guess from content html or xhtml?\n            if (!profile)\n                profile = this.ace.session.getLines(0,2).join(\"\").search(/<!DOCTYPE[^>]+XHTML/i) != -1 ? \"xhtml\": \"html\";\n            return profile;\n          default:\n            var mode = this.ace.session.$mode;\n            return mode.emmetConfig && mode.emmetConfig.profile || \"xhtml\";\n        }\n    }\n\n    /**\n     * Ask user to enter something\n     * @param {String} title Dialog title\n     * @return {String} Entered data\n     * @since 0.65\n     */\n    prompt(title) {\n        return prompt(title); // eslint-disable-line no-alert\n    }\n\n    /**\n     * Returns current selection\n     * @return {String}\n     * @since 0.65\n     */\n    getSelection() {\n        return this.ace.session.getTextRange();\n    }\n\n    /**\n     * Returns current editor's file path\n     * @return {String}\n     * @since 0.65\n     */\n    getFilePath() {\n        return \"\";\n    }\n    \n    // update tabstops: make sure all caret placeholders are unique\n    // by default, abbreviation parser generates all unlinked (un-mirrored)\n    // tabstops as ${0}, so we have upgrade all caret tabstops with unique\n    // positions but make sure that all other tabstops are not linked accidentally\n    // based on https://github.com/sergeche/emmet-sublime/blob/master/editor.js#L119-L171\n    /**\n     * @param {string} value\n     */\n    $updateTabstops(value) {\n        var base = 1000;\n        var zeroBase = 0;\n        var lastZero = null;\n        var ts = emmet.tabStops || emmet.require('tabStops');\n        var resources = emmet.resources || emmet.require(\"resources\");\n        var settings = resources.getVocabulary(\"user\");\n        var tabstopOptions = {\n            tabstop: function(data) {\n                var group = parseInt(data.group, 10);\n                var isZero = group === 0;\n                if (isZero)\n                    group = ++zeroBase;\n                else\n                    group += base;\n\n                var placeholder = data.placeholder;\n                if (placeholder) {\n                    // recursively update nested tabstops\n                    placeholder = ts.processText(placeholder, tabstopOptions);\n                }\n\n                var result = '${' + group + (placeholder ? ':' + placeholder : '') + '}';\n\n                if (isZero) {\n                    lastZero = [data.start, result];\n                }\n\n                return result;\n            },\n            escape: function(ch) {\n                if (ch == '$') return '\\\\$';\n                if (ch == '\\\\') return '\\\\\\\\';\n                return ch;\n            }\n        };\n\n        value = ts.processText(value, tabstopOptions);\n\n        if (settings.variables['insert_final_tabstop'] && !/\\$\\{0\\}$/.test(value)) {\n            value += '${0}';\n        } else if (lastZero) {\n            var common = emmet.utils ? emmet.utils.common : emmet.require('utils');\n            value = common.replaceSubstring(value, '${0}', lastZero[0], lastZero[1]);\n        }\n        \n        return value;\n    }\n}\n\n\nvar keymap = {\n    expand_abbreviation: {\"mac\": \"ctrl+alt+e\", \"win\": \"alt+e\"},\n    match_pair_outward: {\"mac\": \"ctrl+d\", \"win\": \"ctrl+,\"},\n    match_pair_inward: {\"mac\": \"ctrl+j\", \"win\": \"ctrl+shift+0\"},\n    matching_pair: {\"mac\": \"ctrl+alt+j\", \"win\": \"alt+j\"},\n    next_edit_point: \"alt+right\",\n    prev_edit_point: \"alt+left\",\n    toggle_comment: {\"mac\": \"command+/\", \"win\": \"ctrl+/\"},\n    split_join_tag: {\"mac\": \"shift+command+'\", \"win\": \"shift+ctrl+`\"},\n    remove_tag: {\"mac\": \"command+'\", \"win\": \"shift+ctrl+;\"},\n    evaluate_math_expression: {\"mac\": \"shift+command+y\", \"win\": \"shift+ctrl+y\"},\n    increment_number_by_1: \"ctrl+up\",\n    decrement_number_by_1: \"ctrl+down\",\n    increment_number_by_01: \"alt+up\",\n    decrement_number_by_01: \"alt+down\",\n    increment_number_by_10: {\"mac\": \"alt+command+up\", \"win\": \"shift+alt+up\"},\n    decrement_number_by_10: {\"mac\": \"alt+command+down\", \"win\": \"shift+alt+down\"},\n    select_next_item: {\"mac\": \"shift+command+.\", \"win\": \"shift+ctrl+.\"},\n    select_previous_item: {\"mac\": \"shift+command+,\", \"win\": \"shift+ctrl+,\"},\n    reflect_css_value: {\"mac\": \"shift+command+r\", \"win\": \"shift+ctrl+r\"},\n\n    encode_decode_data_url: {\"mac\": \"shift+ctrl+d\", \"win\": \"ctrl+'\"},\n    // update_image_size: {\"mac\": \"shift+ctrl+i\", \"win\": \"ctrl+u\"},\n    // expand_as_you_type: \"ctrl+alt+enter\",\n    // wrap_as_you_type: {\"mac\": \"shift+ctrl+g\", \"win\": \"shift+ctrl+g\"},\n    expand_abbreviation_with_tab: \"Tab\",\n    wrap_with_abbreviation: {\"mac\": \"shift+ctrl+a\", \"win\": \"shift+ctrl+a\"}\n};\n\nvar editorProxy = new AceEmmetEditor();\nexports.commands = new HashHandler();\n/**\n * @param {Editor} editor\n * @return {number|boolean}\n */\nexports.runEmmetCommand = function runEmmetCommand(editor) {\n    if (this.action == \"expand_abbreviation_with_tab\") {\n        if (!editor.selection.isEmpty())\n            return false;\n        var pos = editor.selection.lead;\n        var token = editor.session.getTokenAt(pos.row, pos.column);\n        if (token && /\\btag\\b/.test(token.type))\n            return false;\n    }\n    try {\n        editorProxy.setupContext(editor);\n        var actions = emmet.actions || emmet.require(\"actions\");\n        \n        if (this.action == \"wrap_with_abbreviation\") {\n            // without setTimeout prompt doesn't work on firefox\n            return setTimeout(function() {\n                actions.run(\"wrap_with_abbreviation\", editorProxy);\n            }, 0);\n        }\n        \n        var result = actions.run(this.action, editorProxy);\n    } catch(e) {\n        if (!emmet) {\n            var loading = exports.load(runEmmetCommand.bind(this, editor));\n            if (this.action == \"expand_abbreviation_with_tab\")\n                return false;\n            return loading;\n        }\n        editor._signal(\"changeStatus\", typeof e == \"string\" ? e : e.message);\n        config.warn(e);\n        result = false;\n    }\n    return result;\n};\n\nfor (var command in keymap) {\n    exports.commands.addCommand({\n        name: \"emmet:\" + command,\n        action: command,\n        bindKey: keymap[command],\n        exec: exports.runEmmetCommand,\n        multiSelectAction: \"forEach\"\n    });\n}\n\n/**\n * @param {Editor} editor\n * @param {boolean} [enabled]\n */\nexports.updateCommands = function(editor, enabled) {\n    if (enabled) {\n        editor.keyBinding.addKeyboardHandler(exports.commands);\n    } else {\n        editor.keyBinding.removeKeyboardHandler(exports.commands);\n    }\n};\n\nexports.isSupportedMode = function(mode) {\n    if (!mode) return false;\n    if (mode.emmetConfig) return true;\n    var id = mode.$id || mode;\n    return /css|less|scss|sass|stylus|html|php|twig|ejs|handlebars/.test(id);\n};\n\n/**\n * @param {Editor} editor\n * @param {string} command\n * @return {boolean}\n */\nexports.isAvailable = function(editor, command) {\n    if (/(evaluate_math_expression|expand_abbreviation)$/.test(command))\n        return true;\n    var mode = editor.session.$mode;\n    var isSupported = exports.isSupportedMode(mode);\n    if (isSupported && mode.$modes) {\n        // TODO refactor mode delegates to make this simpler\n        try {\n            editorProxy.setupContext(editor);\n            if (/js|php/.test(editorProxy.getSyntax()))\n                isSupported = false;\n        } catch(e) {}\n    }\n    return isSupported;\n};\n\nvar onChangeMode = function(e, target) {\n    var editor = target;\n    if (!editor)\n        return;\n    var enabled = exports.isSupportedMode(editor.session.$mode);\n    if (e.enableEmmet === false)\n        enabled = false;\n    if (enabled)\n        exports.load();\n    exports.updateCommands(editor, enabled);\n};\n\nexports.load = function(cb) {\n    if (typeof emmetPath !== \"string\") {\n        config.warn(\"script for emmet-core is not loaded\");\n        return false;\n    }\n    config.loadModule(emmetPath, function() {\n        emmetPath = null;\n        cb && cb();\n    });\n    return true;\n};\n\nexports.AceEmmetEditor = AceEmmetEditor;\nconfig.defineOptions(Editor.prototype, \"editor\", {\n    enableEmmet: {\n        set: function(val) {\n            this[val ? \"on\" : \"removeListener\"](\"changeMode\", onChangeMode);\n            onChangeMode({enableEmmet: !!val}, this);\n        },\n        value: true\n    }\n});\n\nexports.setCore = function(e) {\n    if (typeof e == \"string\")\n       emmetPath = e;\n    else\n       emmet = e;\n};\n"],"names":["emmet","emmetPath","HashHandler","require","Editor","snippetManager","Range","config","AceEmmetEditor","setupContext","editor","this","ace","indentation","session","getTabString","window","resources","setVariable","$syntax","getSyntax","getSelectionRange","range","doc","start","positionToIndex","end","createSelection","selection","setRange","indexToPosition","getCurrentLineRange","row","getCursorPosition","lineLength","getLine","length","index","column","getCaretPos","pos","setCaretPos","moveToPosition","getCurrentLine","replaceContent","value","noIndent","getContent","fromPoints","remove","$updateTabstops","insertSnippet","getValue","syntax","$modeId","split","pop","cursor","state","getState","getProfileName","profile","getVariable","getLines","join","search","mode","$mode","emmetConfig","prompt","title","getSelection","getTextRange","getFilePath","base","zeroBase","lastZero","ts","tabStops","settings","getVocabulary","tabstopOptions","tabstop","data","group","parseInt","isZero","placeholder","processText","result","escape","ch","variables","test","common","utils","replaceSubstring","keymap","expand_abbreviation","match_pair_outward","match_pair_inward","matching_pair","next_edit_point","prev_edit_point","toggle_comment","split_join_tag","remove_tag","evaluate_math_expression","increment_number_by_1","decrement_number_by_1","increment_number_by_01","decrement_number_by_01","increment_number_by_10","decrement_number_by_10","select_next_item","select_previous_item","reflect_css_value","encode_decode_data_url","expand_abbreviation_with_tab","wrap_with_abbreviation","editorProxy","command","exports","commands","runEmmetCommand","action","isEmpty","lead","token","getTokenAt","type","actions","setTimeout","run","e","loading","load","bind","_signal","message","warn","addCommand","name","bindKey","exec","multiSelectAction","updateCommands","enabled","keyBinding","addKeyboardHandler","removeKeyboardHandler","isSupportedMode","id","$id","isAvailable","isSupported","$modes","onChangeMode","target","enableEmmet","cb","loadModule","defineOptions","prototype","set","val","setCore"],"sourceRoot":""}