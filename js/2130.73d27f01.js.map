{"version":3,"file":"js/2130.73d27f01.js","mappings":"2GAOA,IAAIA,EAAMC,EAAQ,OACdC,EAAeD,EAAAA,OAAAA,SACfE,EAAQF,EAAAA,OAAAA,EAERG,EAAWC,EAAQ,EAAW,WAAY,EAC9CL,EAAIM,SAASF,EAAUF,GAEvB,WAIEK,KAAKC,UAAY,SAAUC,EAAQC,GAC/B,IAAIC,EAAU,iBACVC,EAAQH,EAAQI,UAAUH,GAAK,GACnC,OAAY,GAALA,GAAWE,GAAgD,IAAvCA,EAAME,KAAKC,YAAYJ,EAAS,EAC/D,EAEAJ,KAAKS,cAAgB,SAASP,EAASQ,EAAWP,GAC9C,GAAIH,KAAKC,UAAUC,EAAQC,GACzB,MAAO,QACF,GAAkB,iBAAdO,IAAkC,QAAQC,KAAKT,EAAQU,QAAQT,IAAO,CAC/E,IAAIU,EAASX,EAAQY,YACrB,QAASX,EAAMU,EACb,IAAM,QAAQF,KAAKT,EAAQU,QAAQT,IAC/B,MAGN,GAAIA,GAAKU,GAAUb,KAAKC,UAAUC,EAAQC,GACxC,MAAO,KAEX,CACA,MAAO,EACX,EAGAH,KAAKe,mBAAqB,SAASb,EAASQ,EAAWP,GACnD,IAAIa,EAAOd,EAAQU,QAAQT,GACvBc,EAAcD,EAAKE,OACnBL,EAASX,EAAQY,YACjBK,EAAWhB,EACXiB,EAASjB,EAEb,GAAIH,KAAKC,UAAUC,EAAQC,GAAM,CAC7B,QAASA,EAAMU,EACX,GAAIb,KAAKC,UAAUC,EAAQC,GAAK,CAC9BA,IACA,KACF,CAKJ,GAFAiB,EAASjB,EAELiB,EAASD,EACT,MAAOC,EAASD,GAAY,QAAQR,KAAKT,EAAQU,QAAQQ,IACrDA,IAGR,GAAIA,EAASD,EAAU,CACnB,IAAIE,EAAYnB,EAAQU,QAAQQ,GAAQF,OACxC,OAAO,IAAItB,EAAMuB,EAAUF,EAAaG,EAAQC,EACpD,CAEJ,MAAO,GAAkD,QAA9CrB,KAAKS,cAAcP,EAASQ,EAAWP,GAAa,CACzDiB,EAASjB,EACTkB,EAAYnB,EAAQU,QAAQQ,GAAQF,OACxC,QAASf,GAAK,EACZ,GAAIH,KAAKC,UAAUC,EAAQC,GACzB,MAGAa,EAAOd,EAAQU,QAAQT,GACvBc,EAAcD,EAAKE,OACvB,OAAO,IAAItB,EAAMO,EAAKc,EAAaG,EAAQC,EAC7C,CACF,CAEH,EAAEC,KAAKzB,EAAS0B,U,wBC7EjB,IAAI9B,EAAMC,EAAQ,OACd8B,EAAW9B,EAAAA,OAAAA,KACX+B,EAAsB/B,EAAAA,OAAAA,EACtBG,EAAWH,EAAAA,OAAAA,EAEXgC,EAAO,WACP1B,KAAK2B,eAAiBF,EACtBzB,KAAK4B,aAAe,IAAI/B,EACxBG,KAAK6B,WAAa7B,KAAK8B,iBAC3B,EACArC,EAAIM,SAAS2B,EAAMF,GAEnB,WACIxB,KAAK+B,iBAAmB,KACxB/B,KAAKgC,aAAe,KACpBhC,KAAKiC,IAAM,wBACd,EAAEX,KAAKI,EAAKH,WAEbzB,EAAQ4B,KAAOA,C,wBClBf,IAAIjC,EAAMC,EAAQ,OACdwC,EAAqBxC,EAAAA,OAAAA,EAErB+B,EAAsB,WAItBzB,KAAKmC,OAAS,CACV,MAAU,CACN,CACI9B,MAAQ,UACR+B,MAAQ,cACT,CACC/B,MAAO,CAAC,WACR+B,MAAO,2BACR,CACC/B,MAAQ,mBACR+B,MAAQ,2BACT,CACC/B,MAAQ,4BACR+B,MAAQ,kDACT,CACC/B,MAAQ,iBACR+B,MAAQ,aAIxB,EAEA3C,EAAIM,SAAS0B,EAAqBS,GAElCpC,EAAQ,EAAsB2B,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/haskell_cabal.js","webpack://admin/./node_modules/ace-code/src/mode/haskell_cabal.js","webpack://admin/./node_modules/ace-code/src/mode/haskell_cabal_highlight_rules.js"],"sourcesContent":["/*\n* Folding mode for Cabal files (Haskell): allow folding each seaction, including\n* the initial general section.\n*/\n\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n  /**\n  is the row a heading?\n  */\n  this.isHeading = function (session,row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row==0 || (token && token.type.lastIndexOf(heading, 0) === 0);\n  };\n\n  this.getFoldWidget = function(session, foldStyle, row) {\n      if (this.isHeading(session,row)){\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !(/^\\s*$/.test(session.getLine(row)))){\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n          if (!(/^\\s*$/.test(session.getLine(row)))){\n              break;\n          }\n        }\n        if (row==maxRow || this.isHeading(session,row)){\n          return \"end\";\n        }\n      }\n      return \"\";\n  };\n\n\n  this.getFoldWidgetRange = function(session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      // go until next heading\n      if (this.isHeading(session,row)) {\n          while (++row < maxRow) {\n              if (this.isHeading(session,row)){\n                row--;\n                break;\n              }\n          }\n\n          endRow = row;\n          // remove empty lines at end\n          if (endRow > startRow) {\n              while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow)))\n                  endRow--;\n          }\n\n          if (endRow > startRow) {\n              var endColumn = session.getLine(endRow).length;\n              return new Range(startRow, startColumn, endRow, endColumn);\n          }\n      // go back to heading\n      } else if (this.getFoldWidget(session, foldStyle, row)===\"end\"){\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n        while (--row>=0){\n          if (this.isHeading(session,row)){\n            break;\n          }\n        }\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n\n}).call(FoldMode.prototype);\n","/**\n* Haskell Cabal files mode (https://www.haskell.org/cabal/users-guide/developing-packages.html)\n**/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CabalHighlightRules = require(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\nvar FoldMode = require(\"./folding/haskell_cabal\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/**\n * Haskell Cabal files highlighter (https://www.haskell.org/cabal/users-guide/developing-packages.html)\n **/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar CabalHighlightRules = function() {\n\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"^\\\\s*--.*$\"\n            }, {\n                token: [\"keyword\"],\n                regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n            }, {\n                token : \"markup.heading\",\n                regex : /^(\\w.*)$/\n            }\n        ]};\n\n};\n\noop.inherits(CabalHighlightRules, TextHighlightRules);\n\nexports.CabalHighlightRules = CabalHighlightRules;\n"],"names":["oop","require","BaseFoldMode","Range","FoldMode","exports","inherits","this","isHeading","session","row","heading","token","getTokens","type","lastIndexOf","getFoldWidget","foldStyle","test","getLine","maxRow","getLength","getFoldWidgetRange","line","startColumn","length","startRow","endRow","endColumn","call","prototype","TextMode","CabalHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","TextHighlightRules","$rules","regex"],"sourceRoot":""}