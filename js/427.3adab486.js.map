{"version":3,"file":"js/427.3adab486.js","mappings":"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MAAO,sCACR,CACCD,MAAO,mBACPC,MAAO,mEACR,CACCD,MAAO,mBACPC,MAAO,sEACR,CACCD,MAAO,4BACPC,MAAO,qBAEX,CACID,MAAO,CAAC,+BAAgC,OAAQ,QAChDC,MAAO,4IACR,CACCD,MAAO,CACH,0BACA,OACA,OACA,OACA,mCAEJC,MAAO,oEAEX,CACID,MAAO,CACH,0BACA,OACA,OACA,OACA,mCAEJC,MAAO,25BACR,CACCD,MAAO,0BACPC,MAAO,8GACR,CACCD,MAAO,CACH,sCACA,OACA,8BACA,OACA,gEAEJC,MAAO,wCACP6E,KAAM,CAAC,CACH9E,MAAO,6DACPC,MAAO,KACPO,KAAM,OACP,CACCL,aAAc,WAEnB,CACCH,MAAO4E,EACP3E,MAAO,+BACR,CACCD,MAAO,mBACPC,MAAO,kIACR,CACCD,MAAO,SACPC,MAAO,SACR,CACCD,MAAO,SACPC,MAAO,WACR,CACCD,MAAO,OACPC,MAAO,SAGf,QAAW,CACP,CACID,MAAO,UACPC,MAAO,SACPO,KAAM,SACP,CACCL,aAAc,aAM1BL,KAAKiF,WAAWlF,EAA0B,OACtC,CAACA,EAAyBY,WAAW,WACzCX,KAAKkF,gBACT,EAEAtF,EAAIW,SAASyD,EAAsBlE,GAEnCc,EAAQ,EAAuBoD,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/scrypt.js","webpack://admin/./node_modules/ace-code/src/mode/scrypt_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar scryptHighlightRules = require(\"./scrypt_highlight_rules\").scryptHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function () {\n    this.HighlightRules = scryptHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n        start: \"/*\",\n        end: \"*/\"\n    };\n    this.$quotes = {\n        '\"': '\"',\n        \"'\": \"'\"\n    };\n\n    this.createWorker = function (session) {\n\n        return null;\n    };\n\n\n    this.$id = \"ace/mode/scrypt\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/* This file was autogenerated from ./tmthemes/tmscrypt.tmLanguage (uuid: ) */\n/****************************************************************************************\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\n * fileTypes                                                                            *\n ****************************************************************************************/\n\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n    var scryptHighlightRules = function () {\n\n        var keywords = (\n            \"contract|library|loop|new|private|\" +\n            \"public|if|else|struct|type|\" +\n            \"require|static|const|import|exit|return|asm\"\n        );\n\n        var buildinConstants = (\"true|false\");\n\n\n        var langClasses = (\n            \"function|auto|constructor|bytes|int|bool|SigHashPreimage|PrivKey|PubKey|Sig|Ripemd160|Sha1|Sha256|\" +\n            \"SigHashType|SigHashPreimage|OpCodeType\"\n        );\n\n        var keywordMapper = this.createKeywordMapper({\n            \"variable.language\": \"this\",\n            \"keyword\": keywords,\n            \"constant.language\": buildinConstants,\n            \"support.function\": langClasses\n        }, \"identifier\");\n\n        // regexp must not have capturing parentheses. Use (?:) instead.\n        // regexps are ordered -> the first match is used\n\n        this.$rules = {\n            \"start\": [\n                {\n                    token: \"comment\",\n                    regex: \"\\\\/\\\\/.*$\"\n                },\n                DocCommentHighlightRules.getStartRule(\"doc-start\"),\n                {\n                    token: \"comment\", // multi line comment\n                    regex: \"\\\\/\\\\*\",\n                    next: \"comment\"\n                }, {\n                    token: \"string\", // single line\n                    regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n                }, {\n                    token: \"string\", // single line\n                    regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n                }, {\n                    token: \"constant.numeric\", // hex\n                    regex: /0(?:[xX][0-9a-fA-F][0-9a-fA-F_]*|[bB][01][01_]*)[LlSsDdFfYy]?\\b/\n                }, {\n                    token: \"constant.numeric\", // float\n                    regex: /[+-]?\\d[\\d_]*(?:(?:\\.[\\d_]*)?(?:[eE][+-]?[\\d_]+)?)?[LlSsDdFfYy]?\\b/\n                }, {\n                    token: \"constant.language.boolean\",\n                    regex: \"(?:true|false)\\\\b\"\n                },\n                {\n                    token: [\"support.function.math.scrypt\", \"text\", \"text\"],\n                    regex: /\\b(abs|min|max|within|ripemd160|sha1|sha256|hash160|hash256|checkSig|checkMultiSig|num2bin|pack|unpack|len|reverseBytes|repeat)(\\s*)(\\()/\n                }, {\n                    token: [\n                        \"entity.name.type.scrypt\",\n                        \"text\",\n                        \"text\",\n                        \"text\",\n                        \"variable.object.property.scrypt\"\n                    ],\n                    regex: /\\b(SigHash)(\\s*)(\\.)(\\s*)(ANYONECANPAY|ALL|FORKID|NONE|SINGLE)\\b/\n                },\n                {\n                    token: [\n                        \"entity.name.type.scrypt\",\n                        \"text\",\n                        \"text\",\n                        \"text\",\n                        \"variable.object.property.scrypt\"\n                    ],\n                    regex: /\\b(OpCode)(\\s*)(\\.)(\\s*)(OP_PUSHDATA1|OP_PUSHDATA2|OP_PUSHDATA4|OP_0|OP_FALSE|OP_1NEGATE|OP_1|OP_TRUE|OP_2|OP_3|OP_4|OP_5|OP_6|OP_7|OP_8|OP_9|OP_10|OP_11|OP_12|OP_13|OP_14|OP_15|OP_16|OP_1ADD|OP_1SUB|OP_NEGATE|OP_ABS|OP_NOT|OP_0NOTEQUAL|OP_ADD|OP_SUB|OP_MUL|OP_DIV|OP_MOD|OP_LSHIFT|OP_RSHIFT|OP_BOOLAND|OP_BOOLOR|OP_NUMEQUAL|OP_NUMEQUALVERIFY|OP_NUMNOTEQUAL|OP_LESSTHAN|OP_GREATERTHAN|OP_LESSTHANOREQUAL|OP_GREATERTHANOREQUAL|OP_MIN|OP_MAX|OP_WITHIN|OP_CAT|OP_SPLIT|OP_BIN2NUM|OP_NUM2BIN|OP_SIZE|OP_NOP|OP_IF|OP_NOTIF|OP_ELSE|OP_ENDIF|OP_VERIFY|OP_RETURN|OP_TOALTSTACK|OP_FROMALTSTACK|OP_IFDUP|OP_DEPTH|OP_DROP|OP_DUP|OP_NIP|OP_OVER|OP_PICK|OP_ROLL|OP_ROT|OP_SWAP|OP_TUCK|OP_2DROP|OP_2DUP|OP_3DUP|OP_2OVER|OP_2ROT|OP_2SWAP|OP_RIPEMD160|OP_SHA1|OP_SHA256|OP_HASH160|OP_HASH256|OP_CODESEPARATOR|OP_CHECKSIG|OP_CHECKSIGVERIFY|OP_CHECKMULTISIG|OP_CHECKMULTISIGVERIFY|OP_INVERT|OP_AND|OP_OR|OP_XOR|OP_EQUAL|OP_EQUALVERIFY)\\b/\n                }, {\n                    token: \"entity.name.type.scrypt\",\n                    regex: /\\b(?:P2PKH|P2PK|Tx|HashPuzzleRipemd160|HashPuzzleSha1|HashPuzzleSha256|HashPuzzleHash160|OpCode|SigHash)\\b/\n                }, {\n                    token: [\n                        \"punctuation.separator.period.scrypt\",\n                        'text',\n                        \"entity.name.function.scrypt\",\n                        \"text\",\n                        \"punctuation.definition.parameters.begin.bracket.round.scrypt\"\n                    ],\n                    regex: /(\\.)([^\\S$\\r]*)([\\w][\\w\\d]*)(\\s*)(\\()/, \n                    push: [{\n                        token: \"punctuation.definition.parameters.end.bracket.round.scrypt\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"start\"\n                    }]\n                }, {\n                    token: keywordMapper,\n                    regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n                }, {\n                    token: \"keyword.operator\",\n                    regex: \"!|\\\\$|%|&|\\\\||\\\\^|\\\\*|\\\\/|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?|\\\\:|\\\\*=|\\\\/=|%=|\\\\+=|\\\\-=|&=|\\\\|=|\\\\^=\"\n                }, {\n                    token: \"lparen\",\n                    regex: \"[[({]\"\n                }, {\n                    token: \"rparen\",\n                    regex: \"[\\\\])}]\"\n                }, {\n                    token: \"text\",\n                    regex: \"\\\\s+\"\n                }\n            ],\n            \"comment\": [\n                {\n                    token: \"comment\", // closing comment\n                    regex: \"\\\\*\\\\/\",\n                    next: \"start\"\n                }, {\n                    defaultToken: \"comment\"\n                }\n            ]\n        };\n\n\n        this.embedRules(DocCommentHighlightRules, \"doc-\",\n            [DocCommentHighlightRules.getEndRule(\"start\")]);\n        this.normalizeRules();\n    };\n\n    oop.inherits(scryptHighlightRules, TextHighlightRules);\n\n    exports.scryptHighlightRules = scryptHighlightRules;\n"],"names":["oop","require","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","exports","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","scryptHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$quotes","createWorker","$id","keywords","buildinConstants","langClasses","keywordMapper","createKeywordMapper","push","embedRules","normalizeRules"],"sourceRoot":""}