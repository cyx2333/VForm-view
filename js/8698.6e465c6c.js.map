{"version":3,"file":"js/8698.6e465c6c.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/pythonic.js","webpack://admin/./node_modules/ace-code/src/mode/robot.js","webpack://admin/./node_modules/ace-code/src/mode/robot_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n  \nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar RobotHighlightRules = require(\"./robot_highlight_rules\").RobotHighlightRules;\nvar FoldMode = require(\"./folding/pythonic\").FoldMode;\n\nvar Mode = function() {\n  this.HighlightRules = RobotHighlightRules;\n  this.foldingRules = new FoldMode();\n  this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n  this.lineCommentStart = \"#\";\n  this.$id = \"ace/mode/robot\";\n  this.snippetFileId = \"ace/snippets/robot\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","'use strict';\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar RobotHighlightRules = function() {\n    var builtinConstantsRegex = new RegExp(\n        /\\$\\{CURDIR\\}|\\$\\{TEMPDIR\\}|\\$\\{EXECDIR\\}|\\$\\{\\/\\}|\\$\\{\\:\\}|\\$\\{\\\\n\\}|\\$\\{true\\}|\\$\\{false\\}|\\$\\{none\\}|\\$\\{null\\}|\\$\\{space(?:\\s*\\*\\s+[0-9]+)?\\}|\\$\\{empty\\}|&\\{empty\\}|@\\{empty\\}|\\$\\{TEST NAME\\}|@\\{TEST[\\s_]TAGS\\}|\\$\\{TEST[\\s_]DOCUMENTATION\\}|\\$\\{TEST[\\s_]STATUS\\}|\\$\\{TEST[\\s_]MESSAGE\\}|\\$\\{PREV[\\s_]TEST[\\s_]NAME\\}|\\$\\{PREV[\\s_]TEST[\\s_]STATUS\\}|\\$\\{PREV[\\s_]TEST[\\s_]MESSAGE\\}|\\$\\{SUITE[\\s_]NAME\\}|\\$\\{SUITE[\\s_]SOURCE\\}|\\$\\{SUITE[\\s_]DOCUMENTATION\\}|&\\{SUITE[\\s_]METADATA\\}|\\$\\{SUITE[\\s_]STATUS\\}|\\$\\{SUITE[\\s_]MESSAGE\\}|\\$\\{KEYWORD[\\s_]STATUS\\}|\\$\\{KEYWORD[\\s_]MESSAGE\\}|\\$\\{LOG[\\s_]LEVEL\\}|\\$\\{OUTPUT[\\s_]FILE\\}|\\$\\{LOG[\\s_]FILE\\}|\\$\\{REPORT[\\s_]FILE\\}|\\$\\{DEBUG[\\s_]FILE\\}|\\$\\{OUTPUT[\\s_]DIR\\}/\n    );\n\n    this.$rules = {\n        \"start\" : [ {\n            token: \"string.robot.header\",\n            regex: /^\\*{3}\\s+(?:settings?|metadata|(?:user )?keywords?|test ?cases?|tasks?|variables?)/,\n            caseInsensitive: true,\n            push: [{\n                token: \"string.robot.header\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string.robot.header\"\n            }],\n            comment: \"start of a table\"\n        }, {\n            token: \"comment.robot\",\n            regex: /(?:^|\\s{2,}|\\t|\\|\\s{1,})(?=[^\\\\])#/,\n            push: [{\n                token: \"comment.robot\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.robot\"\n            }]\n        }, {\n            token: \"comment\",\n            regex: /^\\s*\\[?Documentation\\]?/,\n            caseInsensitive: true,\n            push: [{\n                token: \"comment\",\n                regex: /^(?!\\s*\\.\\.\\.)/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment\"\n            }]\n        }, {\n            token: \"storage.type.method.robot\",\n            regex: /\\[(?:Arguments|Setup|Teardown|Precondition|Postcondition|Template|Return|Timeout)\\]/,\n            caseInsensitive: true,\n            comment: \"testcase settings\"\n        }, {\n            token: \"storage.type.method.robot\",\n            regex: /\\[Tags\\]/,\n            caseInsensitive: true,\n            push: [{\n                token: \"storage.type.method.robot\",\n                regex: /^(?!\\s*\\.\\.\\.)/,\n                next: \"pop\"\n            }, {\n                token: \"comment\",\n                regex: /^\\s*\\.\\.\\./\n            }, {\n                defaultToken: \"storage.type.method.robot\"\n            }],\n            comment: \"test tags\"\n        }, {\n            token: \"constant.language\",\n            regex: builtinConstantsRegex,\n            caseInsensitive: true\n        }, {\n            token: \"entity.name.variable.wrapper\",\n            regex: /[$@&%]\\{\\{?/,\n            push: [{\n                token: \"entity.name.variable.wrapper\",\n                regex: /\\}\\}?(\\s?=)?/,\n                next: \"pop\"\n            }, {\n                include: \"$self\"\n            }, {\n                token: \"entity.name.variable\",\n                regex: /./\n            }, {\n                defaultToken: \"entity.name.variable\"\n            }]\n        }, {\n            token: \"keyword.control.robot\",\n            regex: /^[^\\s\\t*$|]+|(?=^\\|)\\s+[^\\s\\t*$|]+/,\n            push: [{\n                token: \"keyword.control.robot\",\n                regex: /(?=\\s{2})|\\t|$|\\s+(?=\\|)/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"keyword.control.robot\"\n            }]\n        }, {\n            token: \"constant.numeric.robot\",\n            regex: /\\b[0-9]+(?:\\.[0-9]+)?\\b/\n        }, {\n            token: \"keyword\",\n            regex: /\\s{2,}(for|in range|in|end|else if|if|else|with name)(\\s{2,}|$)/,\n            caseInsensitive: true\n        }, {\n            token: \"storage.type.function\",\n            regex: /^(?:\\s{2,}\\s+)[^ \\t*$@&%[.|]+/,\n            push: [{\n                token: \"storage.type.function\",\n                regex: /(?=\\s{2})|\\t|$|\\s+(?=\\|)/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"storage.type.function\"\n            }]\n        }]\n    };\n    this.normalizeRules();\n};\n\nRobotHighlightRules.metadata = {\n  fileTypes: ['robot'],\n  name: 'Robot',\n  scopeName: 'source.robot'\n};\n\noop.inherits(RobotHighlightRules, TextHighlightRules);\n\nexports.RobotHighlightRules = RobotHighlightRules;\n"],"names":["oop","require","BaseFoldMode","FoldMode","exports","markers","this","foldingStartMarker","RegExp","inherits","getFoldWidgetRange","session","foldStyle","row","line","getLine","match","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","RobotHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","snippetFileId","TextHighlightRules","builtinConstantsRegex","$rules","token","regex","caseInsensitive","push","next","defaultToken","comment","include","normalizeRules","metadata","fileTypes","name","scopeName"],"sourceRoot":""}