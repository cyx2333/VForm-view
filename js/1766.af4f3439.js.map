{"version":3,"file":"js/1766.af4f3439.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/nim.js","webpack://admin/./node_modules/ace-code/src/mode/nim_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar NimHighlightRules = require(\"./nim_highlight_rules\").NimHighlightRules;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = NimHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\n\noop.inherits(Mode, TextMode);\n\n\n(function () {\n    this.lineCommentStart = \"#\";\n    this.blockComment = {start: \"#[\", end: \"]#\", nestable: true};\n\n\n    this.$id = \"ace/mode/nim\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar NimHighlightRules = function () {\n\n    var keywordMapper = this.createKeywordMapper({\n        \"variable\": \"var|let|const\",\n        \"keyword\": \"assert|parallel|spawn|export|include|from|template|mixin|bind|import|concept|raise|defer|try|finally|except|converter|proc|func|macro|method|and|or|not|xor|shl|shr|div|mod|in|notin|is|isnot|of|static|if|elif|else|case|of|discard|when|return|yield|block|break|while|echo|continue|asm|using|cast|addr|unsafeAddr|type|ref|ptr|do|declared|defined|definedInScope|compiles|sizeOf|is|shallowCopy|getAst|astToStr|spawn|procCall|for|iterator|as\",\n        \"storage.type\": \"newSeq|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|float|char|bool|string|set|pointer|float32|float64|enum|object|cstring|array|seq|openArray|varargs|UncheckedArray|tuple|set|distinct|void|auto|openarray|range\",\n        \"support.function\": \"lock|ze|toU8|toU16|toU32|ord|low|len|high|add|pop|contains|card|incl|excl|dealloc|inc\",\n        \"constant.language\": \"nil|true|false\"\n    }, \"identifier\");\n\n    var hexNumber = \"(?:0[xX][\\\\dA-Fa-f][\\\\dA-Fa-f_]*)\";\n    var decNumber = \"(?:[0-9][\\\\d_]*)\";\n    var octNumber = \"(?:0o[0-7][0-7_]*)\";\n    var binNumber = \"(?:0[bB][01][01_]*)\";\n    var intNumber = \"(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:'?[iIuU](?:8|16|32|64)|u)?\\\\b\";\n    var exponent = \"(?:[eE][+-]?[\\\\d][\\\\d_]*)\";\n    var floatNumber = \"(?:[\\\\d][\\\\d_]*(?:[.][\\\\d](?:[\\\\d_]*)\" + exponent + \"?)|\" + exponent + \")\";\n    var floatNumberExt = \"(?:\" + hexNumber + \"(?:'(?:(?:[fF](?:32|64)?)|[dD])))|(?:\" + floatNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:'(?:(?:[fF](?:32|64)?)|[dD]))\";\n    var stringEscape = \"\\\\\\\\([abeprcnlftv\\\\\\\"']|x[0-9A-Fa-f]{2}|[0-2][0-9]{2}|u[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    var identifier = '[a-zA-Z][a-zA-Z0-9_]*';\n    this.$rules = {\n        \"start\": [{\n            token: [\"identifier\", \"keyword.operator\", \"support.function\"],\n            regex: \"(\" + identifier + \")([.]{1})(\" + identifier + \")(?=\\\\()\"\n        }, {//pragmas\n            token: \"paren.lparen\",\n            regex: \"(\\\\{\\\\.)\",\n            next: [{\n                token: \"paren.rparen\",\n                regex: '(\\\\.\\\\}|\\\\})',\n                next: \"start\"\n            }, {\n                include: \"methods\"\n            }, {\n                token: \"identifier\",\n                regex: identifier\n            }, {\n                token: \"punctuation\",\n                regex: /[,]/\n            }, {\n                token: \"keyword.operator\",\n                regex: /[=:.]/\n            }, {\n                token: \"paren.lparen\",\n                regex: /[[(]/\n            }, {\n                token: \"paren.rparen\",\n                regex: /[\\])]/\n            }, {\n                include: \"math\"\n            }, {\n                include: \"strings\"\n            }, {\n                defaultToken: \"text\"\n            }]\n        }, {\n            token: \"comment.doc.start\",\n            regex: /##\\[(?!])/,\n            push: \"docBlockComment\"\n        }, {\n            token: \"comment.start\",\n            regex: /#\\[(?!])/,\n            push: \"blockComment\"\n        }, {\n            token: \"comment.doc\",\n            regex: '##.*$'\n        }, {\n            token: \"comment\",\n            regex: '#.*$'\n        }, {\n            include: \"strings\"\n        }, {// character\n            token: \"string\",\n            regex: \"'(?:\\\\\\\\(?:[abercnlftv]|x[0-9A-Fa-f]{2}|[0-2][0-9]{2}|u[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})|.{1})?'\"\n        }, {\n            include: \"methods\"\n        }, {\n            token: keywordMapper,\n            regex: \"[a-zA-Z][a-zA-Z0-9_]*\\\\b\"\n        }, {\n            token: [\"keyword.operator\", \"text\", \"storage.type\"],\n            regex: \"([:])(\\\\s+)(\" + identifier + \")(?=$|\\\\)|\\\\[|,|\\\\s+=|;|\\\\s+\\\\{)\"\n        }, {\n            token: \"paren.lparen\",\n            regex: /\\[\\.|{\\||\\(\\.|\\[:|[[({`]/\n        }, {\n            token: \"paren.rparen\",\n            regex: /\\.\\)|\\|}|\\.]|[\\])}]/\n        }, {\n            token: \"keyword.operator\",\n            regex: /[=+\\-*\\/<>@$~&%|!?^.:\\\\]/\n        }, {\n            token: \"punctuation\",\n            regex: /[,;]/\n        }, {\n            include: \"math\"\n        }],\n        blockComment: [{\n            regex: /#\\[]/,\n            token: \"comment\"\n        }, {\n            regex: /#\\[(?!])/,\n            token: \"comment.start\",\n            push: \"blockComment\"\n        }, {\n            regex: /]#/,\n            token: \"comment.end\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment\"\n        }],\n        docBlockComment: [{\n            regex: /##\\[]/,\n            token: \"comment.doc\"\n        }, {\n            regex: /##\\[(?!])/,\n            token: \"comment.doc.start\",\n            push: \"docBlockComment\"\n        }, {\n            regex: /]##/,\n            token: \"comment.doc.end\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment.doc\"\n        }],\n        math: [{\n            token: \"constant.float\",\n            regex: floatNumberExt\n        }, {\n            token: \"constant.float\",\n            regex: floatNumber\n        }, {\n            token: \"constant.integer\",\n            regex: intNumber\n        }],\n        methods: [{\n            token: \"support.function\",\n            regex: \"(\\\\w+)(?=\\\\()\"\n        }],\n        strings: [{\n            token: \"string\",\n            regex: '(\\\\b' + identifier + ')?\"\"\"',\n            push: [{\n                token: \"string\",\n                regex: '\"\"\"',\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token: \"string\",\n            regex: \"\\\\b\" + identifier + '\"(?=.)',\n            push: [{\n                token: \"string\",\n                regex: '\"|$',\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token: \"string\",\n            regex: '\"',\n            push: [{\n                token: \"string\",\n                regex: '\"|$',\n                next: \"pop\"\n            }, {\n                token: \"constant.language.escape\",\n                regex: stringEscape\n            }, {\n                defaultToken: \"string\"\n            }]\n        }]\n    };\n    this.normalizeRules();\n};\n\n\noop.inherits(NimHighlightRules, TextHighlightRules);\n\nexports.NimHighlightRules = NimHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","NimHighlightRules","CStyleFoldMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","nestable","$id","TextHighlightRules","keywordMapper","createKeywordMapper","hexNumber","decNumber","octNumber","binNumber","intNumber","exponent","floatNumber","floatNumberExt","stringEscape","identifier","$rules","token","regex","next","include","defaultToken","push","docBlockComment","math","methods","strings","normalizeRules"],"sourceRoot":""}