{"version":3,"file":"js/2921.2bd4a6a1.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/swift.js","webpack://admin/./node_modules/ace-code/src/mode/swift_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./swift_highlight_rules\").HighlightRules;\n// TODO: pick appropriate fold mode\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\", nestable: true};\n    \n    this.$id = \"ace/mode/swift\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar lang = require(\"../lib/lang\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SwiftHighlightRules = function() {\n   var keywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"\",\n        \"keyword\": \"__COLUMN__|__FILE__|__FUNCTION__|__LINE__\"\n            + \"|as|associativity|break|case|class|continue|default|deinit|didSet\"\n            + \"|do|dynamicType|else|enum|extension|fallthrough|for|func|get|if|import\"\n            + \"|in|infix|init|inout|is|left|let|let|mutating|new|none|nonmutating\"\n            + \"|operator|override|postfix|precedence|prefix|protocol|return|right\"\n            + \"|safe|Self|self|set|struct|subscript|switch|Type|typealias\"\n            + \"|unowned|unsafe|var|weak|where|while|willSet\"\n            + \"|convenience|dynamic|final|infix|lazy|mutating|nonmutating|optional|override|postfix\"\n            + \"|prefix|required|static|guard|defer\",\n        \"storage.type\": \"bool|double|Double\"\n            + \"|extension|float|Float|int|Int|open|internal|fileprivate|private|public|string|String\",\n        \"constant.language\":\n            \"false|Infinity|NaN|nil|no|null|null|off|on|super|this|true|undefined|yes\",\n        \"support.function\":\n            \"\"\n    }, \"identifier\");\n    \n    function string(start, options) {\n        var nestable = options.nestable || options.interpolation;\n        var interpStart = options.interpolation && options.interpolation.nextState || \"start\";\n        var mainRule = {\n            regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n            token: \"string.start\"\n        };\n        var nextState = [\n            options.escape && {\n                regex: options.escape,\n                token: \"character.escape\"\n            },\n            options.interpolation && {\n                token : \"paren.quasi.start\",\n                regex : lang.escapeRegExp(options.interpolation.lead + options.interpolation.open),\n                push  : interpStart\n            },\n            options.error && {\n                regex: options.error,\n                token: \"error.invalid\"\n            }, \n            {\n                regex: start + (options.multiline ? \"\" : \"|$\"),\n                token: \"string.end\",\n                next: nestable ? \"pop\" : \"start\"\n            }, {\n                defaultToken: \"string\"\n            }\n        ].filter(Boolean);\n        \n        if (nestable)\n            mainRule.push = nextState;\n        else\n            mainRule.next = nextState;\n        \n        if (!options.interpolation)\n            return mainRule;\n        \n        var open = options.interpolation.open;\n        var close = options.interpolation.close;\n        var counter = {\n            regex: \"[\" + lang.escapeRegExp(open + close) + \"]\",\n            onMatch: function(val, state, stack) {\n                this.next = val == open ? this.nextState : \"\";\n                if (val == open && stack.length) {\n                    stack.unshift(\"start\", state);\n                    return \"paren\";\n                }\n                if (val == close && stack.length) {\n                    stack.shift();\n                    this.next = stack.shift();\n                    if (this.next.indexOf(\"string\") != -1)\n                        return \"paren.quasi.end\";\n                }\n                return val == open ? \"paren.lparen\" : \"paren.rparen\";\n            },\n            nextState: interpStart\n        }; \n        return [counter, mainRule];\n    }\n    \n    function comments() {\n        return [{\n                token : \"comment\",\n                regex : /\\/\\//,\n                next : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment\", regex : \"$|^\", next: \"start\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment.start\",\n                regex : /\\/\\*/,\n                stateName: \"nested_comment\",\n                push : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment.start\", regex : /\\/\\*/, push: \"nested_comment\"},\n                    {token : \"comment.end\", regex : \"\\\\*\\\\/\", next : \"pop\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            }\n        ];\n    }\n    \n\n    this.$rules = {\n        start: [\n            string('\"\"\"', {\n                escape: /\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,\n                interpolation: {lead: \"\\\\\", open: \"(\", close: \")\"},\n                error: /\\\\./,\n                multiline: true\n            }),\n            string('\"', {\n                escape: /\\\\(?:[0\\\\tnr\"']|u{[a-fA-F1-9]{0,8}})/,\n                interpolation: {lead: \"\\\\\", open: \"(\", close: \")\"},\n                error: /\\\\./,\n                multiline: false\n            }),\n            comments(),\n            {\n                 regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                 token: \"variable.parameter\"\n            },\n            {\n                regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                token: keywordMapper\n            },  \n            {\n                token : \"constant.numeric\", \n                regex : /[+-]?(?:0(?:b[01]+|o[0-7]+|x[\\da-fA-F])|\\d+(?:(?:\\.\\d*)?(?:[PpEe][+-]?\\d+)?)\\b)/\n            }, {\n                token : \"keyword.operator\",\n                regex : /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?:|[!$%&*+\\-~\\/^]=?/,\n                next  : \"start\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : /[?:,;.]/,\n                next  : \"start\"\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[({]/,\n                next  : \"start\"\n            }, {\n                token : \"paren.rparen\",\n                regex : /[\\])}]/\n            } \n            \n        ]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    \n    this.normalizeRules();\n};\n\n\noop.inherits(SwiftHighlightRules, TextHighlightRules);\n\nexports.HighlightRules = SwiftHighlightRules;\nexports.SwiftHighlightRules = SwiftHighlightRules;\n"],"names":["oop","require","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","exports","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","HighlightRules","Mode","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","nestable","$id","lang","SwiftHighlightRules","keywordMapper","createKeywordMapper","string","options","interpolation","interpStart","nextState","mainRule","multiline","escape","escapeRegExp","lead","open","push","error","filter","Boolean","close","counter","onMatch","val","state","stack","unshift","shift","indexOf","comments","stateName","embedRules","normalizeRules"],"sourceRoot":""}