{"version":3,"file":"js/5574.5517c5b9.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/alda.js","webpack://admin/./node_modules/ace-code/src/mode/alda_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js"],"sourcesContent":["/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar AldaHighlightRules = require(\"./alda_highlight_rules\").AldaHighlightRules;\n// TODO: pick appropriate fold mode\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = AldaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    // this.lineCommentStart = \"\"\\\\(comment\\\\b\"\";\n    // this.blockComment = {start: \"\"/*\"\", end: \"\"*/\"\"};\n    // Extra logic goes here.\n    this.$id = \"ace/mode/alda\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","/* This file was autogenerated from ../../src/alda.JSON-tmLanguage (uuid: ) */\n/****************************************************************************************\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\n * fileTypes                                                                            *\n ****************************************************************************************/\n\n    \"use strict\";\n    \n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n    \n    var AldaHighlightRules = function() {\n        // regexp must not have capturing parentheses. Use (?:) instead.\n        // regexps are ordered -> the first match is used\n    \n        this.$rules = {\n            pitch: [{\n                token: \"variable.parameter.operator.pitch.alda\",\n                regex: /(?:[+\\-]+|\\=)/\n            }, {\n                token: \"\",\n                regex: \"\",\n                next: \"timing\"\n            }],\n            timing: [{\n                token: \"string.quoted.operator.timing.alda\",\n                regex: /\\d+(?:s|ms)?/\n            }, {\n                token: \"\",\n                regex: \"\",\n                next: \"start\"\n            }],\n            start: [{\n                token: [\n                    \"constant.language.instrument.alda\",\n                    \"constant.language.instrument.alda\",\n                    \"meta.part.call.alda\",\n                    \"storage.type.nickname.alda\",\n                    \"meta.part.call.alda\"\n                ],\n                regex: /^([a-zA-Z]{2}[\\w\\-+\\'()]*)((?:\\s*\\/\\s*[a-zA-Z]{2}[\\w\\-+\\'()]*)*)(?:(\\s*)(\\\"[a-zA-Z]{2}[\\w\\-+\\'()]*\\\"))?(\\s*:)/\n            }, {\n                token: [\n                    \"text\",\n                    \"entity.other.inherited-class.voice.alda\",\n                    \"text\"\n                ],\n                regex: /^(\\s*)(V\\d+)(:)/\n            }, {\n                token: \"comment.line.number-sign.alda\",\n                regex: /#.*$/\n            }, {\n                token: \"entity.name.function.pipe.measure.alda\",\n                regex: /\\|/\n            }, {\n                token: \"comment.block.inline.alda\",\n                regex: /\\(comment\\b/,\n                push: [{\n                    token: \"comment.block.inline.alda\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    defaultToken: \"comment.block.inline.alda\"\n                }]\n            }, {\n                token: \"entity.name.function.marker.alda\",\n                regex: /%[a-zA-Z]{2}[\\w\\-+\\'()]*/\n            }, {\n                token: \"entity.name.function.at-marker.alda\",\n                regex: /@[a-zA-Z]{2}[\\w\\-+\\'()]*/\n            }, {\n                token: \"keyword.operator.octave-change.alda\",\n                regex: /\\bo\\d+\\b/\n            }, {\n                token: \"keyword.operator.octave-shift.alda\",\n                regex: /[><]/\n            }, {\n                token: \"keyword.operator.repeat.alda\",\n                regex: /\\*\\s*\\d+/\n            }, {\n                token: \"string.quoted.operator.timing.alda\",\n                regex: /[.]|r\\d*(?:s|ms)?/\n            },{\n                token: \"text\",\n                regex: /([cdefgab])/,\n                next: \"pitch\"\n            }, {\n                token: \"string.quoted.operator.timing.alda\",\n                regex: /~/,\n                next: \"timing\"\n            }, {\n                token: \"punctuation.section.embedded.cram.alda\",\n                regex: /\\}/,\n                next: \"timing\"\n            }, {\n                token: \"constant.numeric.subchord.alda\",\n                regex: /\\//\n            }, {\n                todo: {\n                    token: \"punctuation.section.embedded.cram.alda\",\n                    regex: /\\{/,\n                    push: [{\n                        token: \"punctuation.section.embedded.cram.alda\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"$self\"\n                    }]\n                }\n            }, {\n                todo: {\n                    token: \"keyword.control.sequence.alda\",\n                    regex: /\\[/,\n                    push: [{\n                        token: \"keyword.control.sequence.alda\",\n                        regex: /\\]/,\n                        next: \"pop\"\n                    }, {\n                        include: \"$self\"\n                    }]\n                }\n            }, {\n                token: \"meta.inline.clojure.alda\",\n                regex: /\\(/,\n                push: [{\n                    token: \"meta.inline.clojure.alda\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"source.clojure\"\n                }, {\n                    defaultToken: \"meta.inline.clojure.alda\"\n                }]\n            }]\n        };\n        \n        this.normalizeRules();\n    };\n    \n    AldaHighlightRules.metaData = {\n        scopeName: \"source.alda\",\n        fileTypes: [\"alda\"],\n        name: \"Alda\"\n    };\n    \n    \n    oop.inherits(AldaHighlightRules, TextHighlightRules);\n    \n    exports.AldaHighlightRules = AldaHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","AldaHighlightRules","FoldMode","Mode","this","HighlightRules","foldingRules","inherits","$id","call","prototype","exports","TextHighlightRules","$rules","pitch","token","regex","next","timing","start","push","defaultToken","todo","include","normalizeRules","metaData","scopeName","fileTypes","name","Range","BaseFoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec"],"sourceRoot":""}