{"version":3,"file":"js/3118.32b20c0f.js","mappings":"0GAMA,IAAIA,EAAMC,EAAQ,OACdC,EAAWD,EAAAA,OAAAA,KACXE,EAAkBF,EAAAA,OAAAA,EAClBG,EAAWH,EAAAA,OAAAA,EAEXI,EAAO,WACPC,KAAKC,eAAiBJ,EACtBG,KAAKE,aAAe,IAAIJ,EACxBE,KAAKG,WAAaH,KAAKI,iBAC3B,EACAV,EAAIW,SAASN,EAAMH,GAEnB,WACII,KAAKM,iBAAmB,KACxBN,KAAKO,aAAe,CAACC,MAAO,KAAMC,IAAK,MACvCT,KAAKU,IAAM,YACd,EAAEC,KAAKZ,EAAKa,WAEbC,EAAQd,KAAOA,C,wBCtBf,IAAIL,EAAMC,EAAQ,OACdmB,EAA2BnB,EAAAA,OAAAA,EAC3BoB,EAAqBpB,EAAAA,OAAAA,EAErBE,EAAkB,WAElB,IAAImB,EACA,4IAIAC,EACA,mJAIAC,EACA,6NAMAC,EACA,8MAKAC,EACA,mDAGAC,EAAoB,CACpBC,MAAO,2BACPC,MAAO,4GAIPC,EACA,+IAKAC,EACA,6TAOAC,EAAgB1B,KAAK2B,UAAY3B,KAAK4B,oBAAoB,CAC1D,mBAAqBT,EACrB,kBAAqBF,EACrB,eAAqBC,EACrB,QAAqBF,EACrB,kBAAqBI,EACrB,WAAc,6BACd,mBAAqBK,EACrB,oBAAqBD,GACtB,cAECK,EAAe,kCAKnB7B,KAAK8B,OAAS,CACV,MAAU,CACN,CACIR,MAAQ,UACRC,MAAQ,aAEZT,EAAyBiB,aAAa,aACtC,CACIT,MAAQ,UACRC,MAAQ,SACRS,KAAO,gBACR,CACCV,MAAO,kBACPC,MAAO,aACR,CACCD,MAAQ,UACRC,MAAQ,SACRS,KAAM,gBACP,CACCC,QAAS,SAASC,EAAOC,EAAcC,GAEnC,OADAA,EAAMC,QAAQrC,KAAKgC,KAAME,EAAMI,OAAO,IAC/B,QACX,EACAf,MAAO,wBACPS,KAAM,2BACP,CACCC,QAAS,SAASC,EAAOC,EAAcC,GAEnC,OADAA,EAAMC,QAAQrC,KAAKgC,KAAME,EAAMI,OAAO,IAC/B,QACX,EACAf,MAAO,oBACPS,KAAM,6BACP,CACCV,MAAQ,SACRC,MAAQ,SACRS,KAAO,gBACR,CACCV,MAAQ,SACRC,MAAQ,SACRS,KAAO,mBACR,CACCV,MAAQ,SACRC,MAAQ,iDACT,CACCD,MAAO,CAAC,UAAW,OAAQ,gBAC3BC,MAAO,gBACPS,KAAM,SACP,CACCV,MAAO,CAAC,UAAW,OAAQ,eAAgB,qBAC3CC,MAAO,yBAAyBM,EAAa,KAC9C,CACCP,MAAO,CAAC,UAAW,OAAQ,mBAC3BC,MAAO,4BAA4BM,EAAa,WACjD,CACCP,MAAO,CAAC,kBAAmB,OAAQ,oBACnCC,MAAO,IAAIH,EAAS,WAAWS,EAAa,KAC7C,CACCP,MAAO,CAAC,UAAW,OAAQ,mBAAoB,QAC/CC,MAAO,yBAAyBM,EAAa,WAC9C,CACCP,MAAQ,mBACRC,MAAQ,6CACT,CACCD,MAAQ,mBACRC,MAAQ,mFACT,CACCD,MAAO,8BACPC,MAAO,IAAIM,GACZ,CACCP,MAAQI,EACRH,MAAQ,6BACT,CACCD,MAAQ,mBACRC,MAAQE,GACT,CACCH,MAAQ,uBACRC,MAAQ,2BACT,CACCD,MAAQ,eACRC,MAAQ,SACT,CACCD,MAAQ,eACRC,MAAQ,WACT,CACCD,MAAQ,OACRC,MAAQ,SAGhB,eAAiB,CACb,CACID,MAAQ,UACRC,MAAQ,SACRS,KAAO,SACR,CACCO,aAAc,YAGtB,eAAiB,CACb,CACIjB,MAAQ,UACRC,MAAQ,SACRS,KAAO,SACR,CACCO,aAAc,YAItB,eAAiB,CACdlB,EACA,CACKC,MAAQ,SACRC,MAAQ,UACRS,KAAO,SACR,CACCO,aAAc,WAItB,kBAAoB,CACjBlB,EACA,CACKC,MAAQ,SACRC,MAAQ,UACRS,KAAO,SACR,CACCO,aAAc,WAItB,0BAA2B,CACvB,CACIN,QAAS,SAASC,EAAOC,EAAcC,GACnCF,EAAQA,EAAMM,UAAUN,EAAMO,OAAO,EAAGP,EAAMO,OAAO,GACrD,IAAIC,EAAM,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAGvC,OAFuC,GAApCC,OAAOC,KAAKF,GAAKG,QAAQX,KACxBA,EAAQQ,EAAIR,IACbA,GAASE,EAAM,KAClBA,EAAMU,QACNV,EAAMU,SAFuB,QAKjC,EACAvB,MAAO,mBACPS,KAAM,SACP,CACCV,MAAO,SACPC,MAAO,iBAIf,4BAA6B,CACzB,CACIU,QAAS,SAASC,EAAOC,EAAcC,GAEnC,OADAF,EAAQA,EAAMM,UAAU,EAAGN,EAAMO,OAAO,GACrCP,GAASE,EAAM,KAClBA,EAAMU,QACNV,EAAMU,SAFuB,QAKjC,EACAvB,MAAO,8BACPS,KAAM,SACP,CACCV,MAAO,SACPC,MAAO,iBAIf,QAAS,CACL,CACID,MAAO,eACPC,MAAO,MACPS,KAAM,SACP,CACCV,MAAO,sBACPC,MAAO,YACPS,KAAM,qBACP,CACCV,MAAO,OACPC,MAAO,SAKf,oBAAqB,CACjB,CACID,MAAO,oBACPC,MAAO,oFACR,CACCD,MAAO,aACPC,MAAO,aACR,CACCD,MAAO,SACPC,MAAO,WACR,CACCD,MAAO,UACPC,MAAO,SACR,CACCD,MAAO,mBACPC,MAAO,eACR,CACCD,MAAO,uBACPC,MAAO,OACR,CACCD,MAAO,uBACPC,MAAO,IACPS,KAAM,SACP,CACCV,MAAO,OACPC,MAAO,UAKnBvB,KAAK+C,WAAWjC,EAA0B,OACtC,CAAEA,EAAyBkC,WAAW,UAC9C,EAEAnD,EAAgBoD,SAAW,CACrBC,QAAS,aACTC,UAAW,CAAE,IAAK,MAClBC,eAAgB,wBAChBC,mBAAoB,oGACpBC,kBAAmB,2BACnBC,cAAe,MACfC,KAAM,IACNC,UAAW,YAEjB/D,EAAIW,SAASR,EAAiBkB,GAE9BF,EAAQ,EAAkBhB,C,wBC3S1B,IAAIH,EAAMC,EAAQ,OACdoB,EAAqBpB,EAAAA,OAAAA,EAErBmB,EAA2B,WAC3Bd,KAAK8B,OAAS,CACV,MAAS,CACL,CACIR,MAAO,kBACPC,MAAO,kBACRT,EAAyB4C,aAAc,CACtCnB,aAAc,mBACdoB,iBAAiB,IAIjC,EAEAjE,EAAIW,SAASS,EAA0BC,GAEvCD,EAAyB4C,WAAa,SAASlD,GAC3C,MAAO,CACHc,MAAQ,+BACRC,MAAQ,gCAEhB,EAEAT,EAAyBiB,aAAe,SAASvB,GAC7C,MAAO,CACHc,MAAQ,cACRC,MAAO,eACPS,KAAQxB,EAEhB,EAEAM,EAAyBkC,WAAa,SAAUxC,GAC5C,MAAO,CACHc,MAAQ,cACRC,MAAQ,SACRS,KAAQxB,EAEhB,EAGAK,EAAQ,EAA2BC,C,wBC3CnC,IAAIpB,EAAMC,EAAQ,OACdiE,EAAQjE,EAAAA,OAAAA,EACRkE,EAAelE,EAAAA,OAAAA,SAEfG,EAAWe,EAAQ,EAAW,SAASiD,GACnCA,IACA9D,KAAKqD,mBAAqB,IAAIU,OAC1B/D,KAAKqD,mBAAmBW,OAAOC,QAAQ,YAAa,IAAMH,EAAatD,QAE3ER,KAAKsD,kBAAoB,IAAIS,OACzB/D,KAAKsD,kBAAkBU,OAAOC,QAAQ,YAAa,IAAMH,EAAarD,MAGlF,EACAf,EAAIW,SAASP,EAAU+D,GAEvB,WAEI7D,KAAKqD,mBAAqB,mCAC1BrD,KAAKsD,kBAAoB,uCACzBtD,KAAKkE,yBAA0B,uBAC/BlE,KAAKmE,yBAA2B,2BAChCnE,KAAKoE,cAAgB,4BAGrBpE,KAAKqE,mBAAqBrE,KAAKsE,cAgB/BtE,KAAKsE,cAAgB,SAASC,EAASC,EAAWC,GAC9C,IAAIC,EAAOH,EAAQI,QAAQF,GAE3B,GAAIzE,KAAKkE,yBAAyBU,KAAKF,KAE9B1E,KAAKoE,cAAcQ,KAAKF,KAAU1E,KAAKmE,yBAAyBS,KAAKF,GACtE,MAAO,GAGf,IAAIG,EAAK7E,KAAKqE,mBAAmBE,EAASC,EAAWC,GAErD,OAAKI,GAAM7E,KAAKoE,cAAcQ,KAAKF,GACxB,QAEJG,CACX,EAEA7E,KAAK8E,mBAAqB,SAASP,EAASC,EAAWC,EAAKM,GACxD,IAAIL,EAAOH,EAAQI,QAAQF,GAE3B,GAAIzE,KAAKoE,cAAcQ,KAAKF,GACxB,OAAO1E,KAAKgF,sBAAsBT,EAASG,EAAMD,GAErD,IAAIQ,EAAQP,EAAKO,MAAMjF,KAAKqD,oBAC5B,GAAI4B,EAAO,CACP,IAAIC,EAAID,EAAME,MAEd,GAAIF,EAAM,GACN,OAAOjF,KAAKoF,oBAAoBb,EAASU,EAAM,GAAIR,EAAKS,GAE5D,IAAIG,EAAQd,EAAQe,oBAAoBb,EAAKS,EAAID,EAAM,GAAGxC,OAAQ,GASlE,OAPI4C,IAAUA,EAAME,gBACZR,EACAM,EAAQrF,KAAKwF,gBAAgBjB,EAASE,GAClB,OAAbD,IACPa,EAAQ,OAGTA,CACX,CAEA,GAAkB,cAAdb,EAAJ,CAGIS,EAAQP,EAAKO,MAAMjF,KAAKsD,mBAC5B,GAAI2B,EAAO,CACHC,EAAID,EAAME,MAAQF,EAAM,GAAGxC,OAE/B,OAAIwC,EAAM,GACCjF,KAAKyF,oBAAoBlB,EAASU,EAAM,GAAIR,EAAKS,GAErDX,EAAQe,oBAAoBb,EAAKS,GAAI,EAChD,CAVU,CAWd,EAEAlF,KAAKwF,gBAAkB,SAASjB,EAASE,GACrC,IAAIC,EAAOH,EAAQI,QAAQF,GACvBiB,EAAchB,EAAKiB,OAAO,MAC1BC,EAAWnB,EACXoB,EAAcnB,EAAKjC,OACvBgC,GAAY,EACZ,IAAIqB,EAASrB,EACTsB,EAASxB,EAAQyB,YACrB,QAASvB,EAAMsB,EAAQ,CACnBrB,EAAOH,EAAQI,QAAQF,GACvB,IAAIwB,EAASvB,EAAKiB,OAAO,MACzB,IAAgB,IAAZM,EAAJ,CAEA,GAAKP,EAAcO,EACf,MACJ,IAAIC,EAAWlG,KAAK8E,mBAAmBP,EAAS,MAAOE,GAEvD,GAAIyB,EAAU,CACV,GAAIA,EAAS1F,MAAMiE,KAAOmB,EACtB,MACG,GAAIM,EAASX,cAChBd,EAAMyB,EAASzF,IAAIgE,SAChB,GAAIiB,GAAeO,EACtB,KAER,CACAH,EAASrB,CAdG,CAehB,CAEA,OAAO,IAAIb,EAAMgC,EAAUC,EAAaC,EAAQvB,EAAQI,QAAQmB,GAAQrD,OAC5E,EAMAzC,KAAKgF,sBAAwB,SAAST,EAASG,EAAMD,GACjD,IAAIoB,EAAcnB,EAAKiB,OAAO,QAC1BI,EAASxB,EAAQyB,YACjBJ,EAAWnB,EAEX0B,EAAK,uCACLC,EAAQ,EACZ,QAAS3B,EAAMsB,EAAQ,CACnBrB,EAAOH,EAAQI,QAAQF,GACvB,IAAI4B,EAAIF,EAAGG,KAAK5B,GAChB,GAAK2B,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,KAChB,CAEA,IAAIN,EAASrB,EACb,GAAIqB,EAASF,EACT,OAAO,IAAIhC,EAAMgC,EAAUC,EAAaC,EAAQpB,EAAKjC,OAE7D,CAEH,EAAE9B,KAAKb,EAASc,U","sources":["webpack://admin/./node_modules/ace-code/src/mode/d.js","webpack://admin/./node_modules/ace-code/src/mode/d_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js"],"sourcesContent":["/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar DHighlightRules = require(\"./d_highlight_rules\").DHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = DHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/d\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DHighlightRules = function() {\n\n    var keywords = (\n        \"this|super|import|module|body|mixin|__traits|invariant|alias|asm|delete|\"+\n        \"typeof|typeid|sizeof|cast|new|in|is|typedef|__vector|__parameters\"\n    );\n\n    var keywordControls = (\n        \"break|case|continue|default|do|else|for|foreach|foreach_reverse|goto|if|\" +\n        \"return|switch|while|catch|try|throw|finally|version|assert|unittest|with\"\n    );\n    \n    var types = (\n        \"auto|bool|char|dchar|wchar|byte|ubyte|float|double|real|\" +\n        \"cfloat|creal|cdouble|cent|ifloat|ireal|idouble|\" +\n        \"int|long|short|void|uint|ulong|ushort|ucent|\" +\n        \"function|delegate|string|wstring|dstring|size_t|ptrdiff_t|hash_t|Object\"\n    );\n\n    var modifiers = (\n        \"abstract|align|debug|deprecated|export|extern|const|final|in|inout|out|\" +\n        \"ref|immutable|lazy|nothrow|override|package|pragma|private|protected|\" +\n        \"public|pure|scope|shared|__gshared|synchronized|static|volatile\"\n    );\n    \n    var storages = (\n        \"class|struct|union|template|interface|enum|macro\"\n    );\n    \n    var stringEscapesSeq =  {\n        token: \"constant.language.escape\",\n        regex: \"\\\\\\\\(?:(?:x[0-9A-F]{2})|(?:[0-7]{1,3})|(?:['\\\"\\\\?0abfnrtv\\\\\\\\])|\" +\n            \"(?:u[0-9a-fA-F]{4})|(?:U[0-9a-fA-F]{8}))\"\n    };\n\n    var builtinConstants = (\n        \"null|true|false|\"+\n        \"__DATE__|__EOF__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__|\"+\n        \"__FILE__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__\"\n    );\n    \n    var operators = (\n        \"/|/\\\\=|&|&\\\\=|&&|\\\\|\\\\|\\\\=|\\\\|\\\\||\\\\-|\\\\-\\\\=|\\\\-\\\\-|\\\\+|\" +\n        \"\\\\+\\\\=|\\\\+\\\\+|\\\\<|\\\\<\\\\=|\\\\<\\\\<|\\\\<\\\\<\\\\=|\\\\<\\\\>|\\\\<\\\\>\\\\=|\\\\>|\\\\>\\\\=|\\\\>\\\\>\\\\=|\" +\n        \"\\\\>\\\\>\\\\>\\\\=|\\\\>\\\\>|\\\\>\\\\>\\\\>|\\\\!|\\\\!\\\\=|\\\\!\\\\<\\\\>|\\\\!\\\\<\\\\>\\\\=|\\\\!\\\\<|\\\\!\\\\<\\\\=|\" +\n        \"\\\\!\\\\>|\\\\!\\\\>\\\\=|\\\\?|\\\\$|\\\\=|\\\\=\\\\=|\\\\*|\\\\*\\\\=|%|%\\\\=|\" +\n        \"\\\\^|\\\\^\\\\=|\\\\^\\\\^|\\\\^\\\\^\\\\=|~|~\\\\=|\\\\=\\\\>|#\"\n    );\n\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword.modifier\" : modifiers,\n        \"keyword.control\" :  keywordControls,\n        \"keyword.type\" :     types,\n        \"keyword\":           keywords,\n        \"keyword.storage\":   storages,\n        \"punctation\": \"\\\\.|\\\\,|;|\\\\.\\\\.|\\\\.\\\\.\\\\.\",\n        \"keyword.operator\" : operators,\n        \"constant.language\": builtinConstants\n    }, \"identifier\");\n    \n    var identifierRe = \"[a-zA-Z_\\u00a1-\\uffff][a-zA-Z\\\\d_\\u00a1-\\uffff]*\\\\b\";\n\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        \"start\" : [\n            {     //-------------------------------------------------------- COMMENTS\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"star-comment\"\n            }, {\n                token: \"comment.shebang\",\n                regex: \"^\\\\s*#!.*\"\n            }, {\n                token : \"comment\",\n                regex : \"\\\\/\\\\+\",\n                next: \"plus-comment\"\n            }, {  //-------------------------------------------------------- STRINGS\n                onMatch: function(value, currentState, state) {\n                    state.unshift(this.next, value.substr(2));\n                    return \"string\";\n                },\n                regex: 'q\"(?:[\\\\[\\\\(\\\\{\\\\<]+)',\n                next: 'operator-heredoc-string'\n            }, {\n                onMatch: function(value, currentState, state) {\n                    state.unshift(this.next, value.substr(2));\n                    return \"string\";\n                },\n                regex: 'q\"(?:[a-zA-Z_]+)$',\n                next: 'identifier-heredoc-string'\n            }, {\n                token : \"string\", // multi line string start\n                regex : '[xr]?\"',\n                next : \"quote-string\"\n            }, {\n                token : \"string\", // multi line string start\n                regex : '[xr]?`',\n                next : \"backtick-string\"\n            }, {\n                token : \"string\", // single line\n                regex : \"[xr]?['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?['][cdw]?\"\n            }, {  //-------------------------------------------------------- RULES\n                token: [\"keyword\", \"text\", \"paren.lparen\"],\n                regex: /(asm)(\\s*)({)/,\n                next: \"d-asm\"\n            }, {\n                token: [\"keyword\", \"text\", \"paren.lparen\", \"constant.language\"],\n                regex: \"(__traits)(\\\\s*)(\\\\()(\"+identifierRe+\")\"\n            }, { // import|module abc\n                token: [\"keyword\", \"text\", \"variable.module\"],\n                regex: \"(import|module)(\\\\s+)((?:\"+identifierRe+\"\\\\.?)*)\"\n            }, { // storage Name\n                token: [\"keyword.storage\", \"text\", \"entity.name.type\"],\n                regex: \"(\"+storages+\")(\\\\s*)(\"+identifierRe+\")\"\n            }, { // alias|typedef foo bar;\n                token: [\"keyword\", \"text\", \"variable.storage\", \"text\"],\n                regex: \"(alias|typedef)(\\\\s*)(\"+identifierRe+\")(\\\\s*)\"\n            }, {  //-------------------------------------------------------- OTHERS\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F_]+(l|ul|u|f|F|L|U|UL)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d[\\\\d_]*(?:(?:\\\\.[\\\\d_]*)?(?:[eE][+-]?[\\\\d_]+)?)?(l|ul|u|f|F|L|U|UL)?\\\\b\"\n            }, {\n                token: \"entity.other.attribute-name\",\n                regex: \"@\"+identifierRe\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : operators\n            }, {\n                token : \"punctuation.operator\",\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.|\\\\:\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"star-comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken: 'comment'\n            }\n        ],\n        \"plus-comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\+\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken: 'comment'\n            }\n        ],\n        \n        \"quote-string\" : [\n           stringEscapesSeq,\n           {\n                token : \"string\",\n                regex : '\"[cdw]?',\n                next : \"start\"\n            }, {\n                defaultToken: 'string'\n            }\n        ],\n        \n        \"backtick-string\" : [\n           stringEscapesSeq,\n           {\n                token : \"string\",\n                regex : '`[cdw]?',\n                next : \"start\"\n            }, {\n                defaultToken: 'string'\n            }\n        ],\n        \n        \"operator-heredoc-string\": [\n            {\n                onMatch: function(value, currentState, state) {\n                    value = value.substring(value.length-2, value.length-1);\n                    var map = {'>':'<',']':'[',')':'(','}':'{'};\n                    if(Object.keys(map).indexOf(value) != -1)\n                        value = map[value];\n                    if(value != state[1]) return \"string\";\n                    state.shift();\n                    state.shift();\n                    \n                    return \"string\";\n                },\n                regex: '(?:[\\\\]\\\\)}>]+)\"',\n                next: 'start'\n            }, {\n                token: 'string',\n                regex: '[^\\\\]\\\\)}>]+'\n            }\n        ],\n        \n        \"identifier-heredoc-string\": [\n            {\n                onMatch: function(value, currentState, state) {\n                    value = value.substring(0, value.length-1);\n                    if(value != state[1]) return \"string\";\n                    state.shift();\n                    state.shift();\n                    \n                    return \"string\";\n                },\n                regex: '^(?:[A-Za-z_][a-zA-Z0-9]+)\"',\n                next: 'start'\n            }, {\n                token: 'string',\n                regex: '[^\\\\]\\\\)}>]+'\n            }\n        ],\n        \n        \"d-asm\": [\n            {\n                token: \"paren.rparen\",\n                regex: \"\\\\}\",\n                next: \"start\"\n            }, {\n                token: 'keyword.instruction',\n                regex: '[a-zA-Z]+',\n                next: 'd-asm-instruction' \n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        \n        // minimal asm support\n        'd-asm-instruction': [\n            {\n                token: 'constant.language',\n                regex: /AL|AH|AX|EAX|BL|BH|BX|EBX|CL|CH|CX|ECX|DL|DH|DX|EDX|BP|EBP|SP|ESP|DI|EDI|SI|ESI/i\n            }, {\n                token: 'identifier',\n                regex: '[a-zA-Z]+'\n            }, {\n                token: 'string',\n                regex: '\"[^\"]*\"'\n            }, {\n                token: 'comment',\n                regex: '//.*$'\n            }, {\n                token: 'constant.numeric',\n                regex: '[0-9.xA-F]+'\n            }, {\n                token: 'punctuation.operator',\n                regex: '\\\\,'\n            }, {\n                token: 'punctuation.operator',\n                regex: ';',\n                next: 'd-asm'\n            }, {\n                token: 'text',\n                regex: '\\\\s+'\n            }\n        ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\nDHighlightRules.metaData = {\n      comment: 'D language',\n      fileTypes: [ 'd', 'di' ],\n      firstLineMatch: '^#!.*\\\\b[glr]?dmd\\\\b.',\n      foldingStartMarker: '(?x)/\\\\*\\\\*(?!\\\\*)|^(?![^{]*?//|[^{]*?/\\\\*(?!.*?\\\\*/.*?\\\\{)).*?\\\\{\\\\s*($|//|/\\\\*(?!.*?\\\\*/.*\\\\S))',\n      foldingStopMarker: '(?<!\\\\*)\\\\*\\\\*/|^\\\\s*\\\\}',\n      keyEquivalent: '^~D',\n      name: 'D',\n      scopeName: 'source.d'\n};\noop.inherits(DHighlightRules, TextHighlightRules);\n\nexports.DHighlightRules = DHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","DHighlightRules","FoldMode","Mode","this","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","inherits","lineCommentStart","blockComment","start","end","$id","call","prototype","exports","DocCommentHighlightRules","TextHighlightRules","keywords","keywordControls","types","modifiers","storages","stringEscapesSeq","token","regex","builtinConstants","operators","keywordMapper","$keywords","createKeywordMapper","identifierRe","$rules","getStartRule","next","onMatch","value","currentState","state","unshift","substr","defaultToken","substring","length","map","Object","keys","indexOf","shift","embedRules","getEndRule","metaData","comment","fileTypes","firstLineMatch","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","getTagRule","caseInsensitive","Range","BaseFoldMode","commentRegex","RegExp","source","replace","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec"],"sourceRoot":""}