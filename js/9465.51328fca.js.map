{"version":3,"file":"js/9465.51328fca.js","mappings":"2GAEA,IAAIA,EAAMC,EAAQ,OACdC,EAAQD,EAAAA,OAAAA,EACRE,EAAeF,EAAAA,OAAAA,SAEfG,EAAWC,EAAQ,EAAW,SAASC,GACnCA,IACAC,KAAKC,mBAAqB,IAAIC,OAC1BF,KAAKC,mBAAmBE,OAAOC,QAAQ,YAAa,IAAML,EAAaM,QAE3EL,KAAKM,kBAAoB,IAAIJ,OACzBF,KAAKM,kBAAkBH,OAAOC,QAAQ,YAAa,IAAML,EAAaQ,MAGlF,EACAd,EAAIe,SAASX,EAAUD,GAEvB,WAEII,KAAKC,mBAAqB,mCAC1BD,KAAKM,kBAAoB,uCACzBN,KAAKS,yBAA0B,uBAC/BT,KAAKU,yBAA2B,2BAChCV,KAAKW,cAAgB,4BAGrBX,KAAKY,mBAAqBZ,KAAKa,cAgB/Bb,KAAKa,cAAgB,SAASC,EAASC,EAAWC,GAC9C,IAAIC,EAAOH,EAAQI,QAAQF,GAE3B,GAAIhB,KAAKS,yBAAyBU,KAAKF,KAE9BjB,KAAKW,cAAcQ,KAAKF,KAAUjB,KAAKU,yBAAyBS,KAAKF,GACtE,MAAO,GAGf,IAAIG,EAAKpB,KAAKY,mBAAmBE,EAASC,EAAWC,GAErD,OAAKI,GAAMpB,KAAKW,cAAcQ,KAAKF,GACxB,QAEJG,CACX,EAEApB,KAAKqB,mBAAqB,SAASP,EAASC,EAAWC,EAAKM,GACxD,IAAIL,EAAOH,EAAQI,QAAQF,GAE3B,GAAIhB,KAAKW,cAAcQ,KAAKF,GACxB,OAAOjB,KAAKuB,sBAAsBT,EAASG,EAAMD,GAErD,IAAIQ,EAAQP,EAAKO,MAAMxB,KAAKC,oBAC5B,GAAIuB,EAAO,CACP,IAAIC,EAAID,EAAME,MAEd,GAAIF,EAAM,GACN,OAAOxB,KAAK2B,oBAAoBb,EAASU,EAAM,GAAIR,EAAKS,GAE5D,IAAIG,EAAQd,EAAQe,oBAAoBb,EAAKS,EAAID,EAAM,GAAGM,OAAQ,GASlE,OAPIF,IAAUA,EAAMG,gBACZT,EACAM,EAAQ5B,KAAKgC,gBAAgBlB,EAASE,GAClB,OAAbD,IACPa,EAAQ,OAGTA,CACX,CAEA,GAAkB,cAAdb,EAAJ,CAGIS,EAAQP,EAAKO,MAAMxB,KAAKM,mBAC5B,GAAIkB,EAAO,CACHC,EAAID,EAAME,MAAQF,EAAM,GAAGM,OAE/B,OAAIN,EAAM,GACCxB,KAAKiC,oBAAoBnB,EAASU,EAAM,GAAIR,EAAKS,GAErDX,EAAQe,oBAAoBb,EAAKS,GAAI,EAChD,CAVU,CAWd,EAEAzB,KAAKgC,gBAAkB,SAASlB,EAASE,GACrC,IAAIC,EAAOH,EAAQI,QAAQF,GACvBkB,EAAcjB,EAAKkB,OAAO,MAC1BC,EAAWpB,EACXqB,EAAcpB,EAAKa,OACvBd,GAAY,EACZ,IAAIsB,EAAStB,EACTuB,EAASzB,EAAQ0B,YACrB,QAASxB,EAAMuB,EAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,GACvB,IAAIyB,EAASxB,EAAKkB,OAAO,MACzB,IAAgB,IAAZM,EAAJ,CAEA,GAAKP,EAAcO,EACf,MACJ,IAAIC,EAAW1C,KAAKqB,mBAAmBP,EAAS,MAAOE,GAEvD,GAAI0B,EAAU,CACV,GAAIA,EAASrC,MAAMW,KAAOoB,EACtB,MACG,GAAIM,EAASX,cAChBf,EAAM0B,EAASnC,IAAIS,SAChB,GAAIkB,GAAeO,EACtB,KAER,CACAH,EAAStB,CAdG,CAehB,CAEA,OAAO,IAAIrB,EAAMyC,EAAUC,EAAaC,EAAQxB,EAAQI,QAAQoB,GAAQR,OAC5E,EAMA9B,KAAKuB,sBAAwB,SAAST,EAASG,EAAMD,GACjD,IAAIqB,EAAcpB,EAAKkB,OAAO,QAC1BI,EAASzB,EAAQ0B,YACjBJ,EAAWpB,EAEX2B,EAAK,uCACLC,EAAQ,EACZ,QAAS5B,EAAMuB,EAAQ,CACnBtB,EAAOH,EAAQI,QAAQF,GACvB,IAAI6B,EAAIF,EAAGG,KAAK7B,GAChB,GAAK4B,IACDA,EAAE,GAAID,IACLA,KAEAA,GAAO,KAChB,CAEA,IAAIN,EAAStB,EACb,GAAIsB,EAASF,EACT,OAAO,IAAIzC,EAAMyC,EAAUC,EAAaC,EAAQrB,EAAKa,OAE7D,CAEH,EAAEiB,KAAKlD,EAASmD,U,wBCxJjB,IAAIvD,EAAMC,EAAQ,OACduD,EAAWvD,EAAAA,OAAAA,KACXwD,EAAuBxD,EAAAA,OAAAA,EACvBG,EAAWH,EAAAA,OAAAA,EAEXyD,EAAO,WACPnD,KAAKoD,eAAiBF,EACtBlD,KAAKqD,aAAe,IAAIxD,EACxBG,KAAKsD,WAAatD,KAAKuD,iBAC3B,EACA9D,EAAIe,SAAS2C,EAAMF,GAEnB,WACIjD,KAAKwD,iBAAmB,KACxBxD,KAAKyD,aAAe,CAACpD,MAAO,KAAME,IAAK,MAEvCP,KAAK0D,IAAM,iBACd,EAAEX,KAAKI,EAAKH,WAEblD,EAAQqD,KAAOA,C,wBCvBf,IAAI1D,EAAMC,EAAQ,OACdiE,EAAqBjE,EAAAA,OAAAA,EAErBwD,EAAuB,WAIvB,IAAIU,EAAgB5D,KAAK6D,UAAY7D,KAAK8D,oBAAoB,CAC1D,0BAA2B,sRAI3B,QAAW,4KAEX,2BAA4B,6BAC5B,8BAA+B,WAChC,cAEH9D,KAAK+D,OAAS,CACV1D,MAAO,CAAC,CACJ2D,QAAS,aACV,CACCC,MAAO,CACH,OACA,uBACA,OACA,6BACA,QAEJC,MAAO,6CACR,CACCD,MAAO,UACPC,MAAO,aACR,CACCF,QAAS,YACV,CACCA,QAAS,gBACV,CACCC,MAAO,SACPC,MAAO,yBACR,CACCD,MAAO,CAAC,uBAAwB,OAAQ,+BACxCC,MAAO,sCACR,CACCD,MAAO,CAAC,uBAAwB,OAAQ,8BAA+B,gBACvEC,MAAO,sBACPC,KAAM,CAAC,CACHF,MAAO,CAAC,qCAAsC,OAAQ,oBACtDC,MAAO,iBACR,CACCD,MAAO,eACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,aACV,CACCA,QAAS,UACV,CACCA,QAAS,kBAEd,CACCC,MAAO,CAAC,OAAQ,UAAU,OAAQ,cAClCC,MAAO,gCACPE,KAAM,YACP,CACCH,MAAO,CAAC,aAAc,gBACtBC,MAAO,sBACPC,KAAM,CAAC,CACHH,QAAS,aACV,CACCA,QAAS,iBACV,CACCC,MAAO,cACPC,MAAO,IACPE,KAAM,SAEX,CACCH,MAAOL,EACPM,MAAO,oBACR,CACCD,MAAO,eACPC,MAAO,UACR,CACCD,MAAO,eACPC,MAAO,WAEX,YAAa,CAAC,CACVD,MAAO,UACPC,MAAO,OACPC,KAAM,CAAC,CACHF,MAAO,UACPC,MAAO,OACPE,KAAM,OACP,CACCC,aAAc,aAEnB,CACCJ,MAAO,CACH,OACA,WAEJC,MAAO,mBAEX,aAAc,CAAC,CACXD,MAAO,0BACPC,MAAO,6GACR,CACCD,MAAO,wBACPC,MAAO,wBAEX,eAAgB,CAAC,CACbF,QAAS,YACV,CACCA,QAAS,cACV,CACCA,QAAS,cAEb,WAAY,CAAC,CACTC,MAAO,CACH,OACA,uBACA,OACA,wBAEJC,MAAO,0CAEX,YAAa,CAAC,CACVD,MAAO,cACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,cACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,8BACPC,MAAO,OACR,CACCD,MAAO,mBACPC,MAAO,KACR,CACCD,MAAO,cACPC,MAAO,KACR,CACCF,QAAS,gBAGjB,WAAY,CAAC,CACTA,QAAS,aACV,CACCC,MAAO,UACPC,MAAO,8BACR,CACCD,MAAO,SACPC,MAAO,yBACR,CACCD,MAAO,OACPC,MAAO,aACPE,KAAM,UAEV,YAAa,CAAC,CACVH,MAAO,0BACPC,MAAO,wCACR,CACCD,MAAO,qCACPC,MAAO,KACR,CACCD,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,cACPE,KAAM,OACP,CACCJ,QAAS,YAEd,CACCC,MAAO,8BACPC,MAAO,MACR,CACCD,MAAO,8CACPC,MAAO,aACR,CACCD,MAAO,qCACPC,MAAO,iBACR,CACCD,MAAO,4CACPC,MAAO,mBACR,CACCD,MAAO,kCACPC,MAAO,aACR,CACCD,MAAO,gCACPC,MAAO,QACR,CACCD,MAAO,qBACPC,MAAO,SAEX,SAAU,CAAC,CACPF,QAAS,iBACV,CACCC,MAAO,eACPC,MAAO,KACPC,KAAM,CAAC,CACHF,MAAO,eACPC,MAAO,KACPE,KAAM,OACP,CACCJ,QAAS,iBACV,CACCC,MAAO,cACPC,MAAO,OAEZ,CACCF,QAAS,aACV,CACCC,MAAO,sCACPC,MAAO,MACR,CACCD,MAAO,eACPC,MAAO,MACR,CACCD,MAAO,sCACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,OACPC,MAAO,cACPE,KAAM,OACP,CACCJ,QAAS,aAGjB,gBAAiB,CAAC,CACdC,MAAO,8BACPC,MAAO,uNAEX,WAAY,CAAC,CACTD,MAAO,SACPC,MAAO,MACPC,KAAM,CAAC,CACHF,MAAO,SACPC,MAAO,MACPE,KAAM,OACP,CACCH,MAAO,qCACPC,MAAO,mBACR,CACCD,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,YAEnB,CACCJ,MAAO,SACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,SACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,qCACPC,MAAO,sBACR,CACCD,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,YAEnB,CACCJ,MAAO,SACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,SACPC,MAAO,IACPE,KAAM,OACP,CACCH,MAAO,mCACPC,MAAO,OACR,CACCG,aAAc,YAEnB,CACCJ,MAAO,SACPC,MAAO,IACPC,KAAM,CAAC,CACHF,MAAO,SACPC,MAAO,IACPE,KAAM,OACP,CACCC,aAAc,cAK1BrE,KAAKsE,gBACT,EAEApB,EAAqBqB,SAAW,CAC5BC,UAAW,CAAC,KAAM,OAClBC,KAAM,SACNC,UAAW,iBAIfjF,EAAIe,SAAS0C,EAAsBS,GAEnC7D,EAAQ,EAAuBoD,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/kotlin.js","webpack://admin/./node_modules/ace-code/src/mode/kotlin_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    // Extra logic goes here.\n    this.$id = \"ace/mode/kotlin\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar KotlinHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"storage.modifier.kotlin\": \"var|val|public|private|protected|abstract|final|enum|open|attribute|\"\n            + \"annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|\"\n            + \"yield|typealias|typeof|sealed|inner|value|lateinit|external|suspend|noinline|crossinline|reified|\"\n            + \"expect|actual\",\n        \"keyword\": \"companion|class|object|interface|namespace|type|fun|constructor|if|else|while|for|do|return|when|\"\n            + \"where|break|continue|try|catch|finally|throw|in|is|as|assert|constructor\",\n        \"constant.language.kotlin\": \"true|false|null|this|super\",\n        \"entity.name.function.kotlin\": \"get|set\"\n    }, \"identifier\");\n\n    this.$rules = {\n        start: [{\n            include: \"#comments\"\n        }, {\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"entity.name.package.kotlin\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n        }, {\n            token: \"comment\",\n            regex: /^\\s*#!.*$/\n        }, {\n            include: \"#imports\"\n        }, {\n            include: \"#expressions\"\n        }, {\n            token: \"string\",\n            regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n        }, {\n            token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\"],\n            regex: /\\b(var|val)(\\s+)([a-zA-Z_][\\w]*)\\b/\n        }, {\n            token: [\"keyword.other.kotlin\", \"text\", \"entity.name.variable.kotlin\", \"paren.lparen\"],\n            regex: /(fun)(\\s+)(\\w+)(\\()/,\n            push: [{\n                token: [\"variable.parameter.function.kotlin\", \"text\", \"keyword.operator\"],\n                regex: /(\\w+)(\\s*)(:)/\n            }, {\n                token: \"paren.rparen\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#comments\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            token: [\"text\", \"keyword\",\"text\", \"identifier\"],\n            regex: /^(\\s*)(class)(\\s*)([a-zA-Z]+)/,\n            next: \"#classes\"\n        }, {\n            token: [\"identifier\", \"punctuaction\"],\n            regex: /([a-zA-Z_][\\w]*)(<)/,\n            push: [{\n                include: \"#generics\"\n            }, {\n                include: \"#defaultTypes\"\n            }, {\n                token: \"punctuation\",\n                regex: />/,\n                next: \"pop\"\n            }]\n        }, {\n            token: keywordMapper,\n            regex: /[a-zA-Z_][\\w]*\\b/\n        }, {\n            token: \"paren.lparen\",\n            regex: /[{(\\[]/\n        }, {\n            token: \"paren.rparen\",\n            regex: /[})\\]]/\n        }],\n        \"#comments\": [{\n            token: \"comment\",\n            regex: /\\/\\*/,\n            push: [{\n                token: \"comment\",\n                regex: /\\*\\//,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment\"\n            }]\n        }, {\n            token: [\n                \"text\",\n                \"comment\"\n            ],\n            regex: /(\\s*)(\\/\\/.*$)/\n        }],\n        \"#constants\": [{\n            token: \"constant.numeric.kotlin\",\n            regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n        }, {\n            token: \"constant.other.kotlin\",\n            regex: /\\b[A-Z][A-Z0-9_]+\\b/\n        }],\n        \"#expressions\": [{\n            include: \"#strings\"\n        }, {\n            include: \"#constants\"\n        }, {\n            include: \"#keywords\"\n        }],\n        \"#imports\": [{\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"keyword.other.kotlin\"\n            ],\n            regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n        }],\n        \"#generics\": [{\n            token: \"punctuation\",\n            regex: /</,\n            push: [{\n                token: \"punctuation\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                token: \"storage.type.generic.kotlin\",\n                regex: /\\w+/\n            }, {\n                token: \"keyword.operator\",\n                regex: /:/\n            }, {\n                token: \"punctuation\",\n                regex: /,/\n            }, {\n                include: \"#generics\"\n            }]\n        }],\n        \"#classes\": [{\n            include: \"#generics\"\n        }, {\n            token: \"keyword\",\n            regex: /public|private|constructor/\n        }, {\n            token: \"string\",\n            regex: /@[a-zA-Z][a-zA-Z:]*\\b/\n        }, {\n            token: \"text\",\n            regex: /(?=$|\\(|{)/,\n            next: \"start\"\n        }],\n        \"#keywords\": [{\n            token: \"keyword.operator.kotlin\",\n            regex: /==|!=|===|!==|<=|>=|<|>|=>|->|::|\\?:/\n        }, {\n            token: \"keyword.operator.assignment.kotlin\",\n            regex: /=/\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=$|{|=|,)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.dot.kotlin\",\n            regex: /\\./\n        }, {\n            token: \"keyword.operator.increment-decrement.kotlin\",\n            regex: /\\-\\-|\\+\\+/\n        }, {\n            token: \"keyword.operator.arithmetic.kotlin\",\n            regex: /\\-|\\+|\\*|\\/|%/\n        }, {\n            token: \"keyword.operator.arithmetic.assign.kotlin\",\n            regex: /\\+=|\\-=|\\*=|\\/=/\n        }, {\n            token: \"keyword.operator.logical.kotlin\",\n            regex: /!|&&|\\|\\|/\n        }, {\n            token: \"keyword.operator.range.kotlin\",\n            regex: /\\.\\./\n        }, {\n            token: \"punctuation.kotlin\",\n            regex: /[;,]/\n        }],\n        \"#types\": [{\n            include: \"#defaultTypes\"\n        }, {\n            token: \"paren.lparen\",\n            regex: /\\(/,\n            push: [{\n                token: \"paren.rparen\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#defaultTypes\"\n            }, {\n                token: \"punctuation\",\n                regex: /,/\n            }]\n        }, {\n            include: \"#generics\"\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /->/\n        }, {\n            token: \"paren.rparen\",\n            regex: /\\)/\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=$|{|=|,)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }],\n        \"#defaultTypes\": [{\n            token: \"storage.type.buildin.kotlin\",\n            regex: /\\b(Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic|IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray|Array|List|Map|Nothing|Enum|Throwable|Comparable)\\b/\n        }],\n        \"#strings\": [{\n            token: \"string\",\n            regex: /\"\"\"/,\n            push: [{\n                token: \"string\",\n                regex: /\"\"\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\${[^}]+}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token: \"string\",\n            regex: /\"/,\n            push: [{\n                token: \"string\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token: \"string\",\n            regex: /'/,\n            push: [{\n                token: \"string\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token: \"string\",\n            regex: /`/,\n            push: [{\n                token: \"string\",\n                regex: /`/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }]\n    };\n\n    this.normalizeRules();\n};\n\nKotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n};\n\n\noop.inherits(KotlinHighlightRules, TextHighlightRules);\n\nexports.KotlinHighlightRules = KotlinHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","KotlinHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","TextHighlightRules","keywordMapper","$keywords","createKeywordMapper","$rules","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName"],"sourceRoot":""}