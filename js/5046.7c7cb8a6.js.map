{"version":3,"file":"js/5046.7c7cb8a6.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/folding/sql.js","webpack://admin/./node_modules/ace-code/src/mode/sql.js","webpack://admin/./node_modules/ace-code/src/mode/sql_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./cstyle\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function() {};\n\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    /** \n     * Inheriting cstyle folding because it handles the region comment folding \n     * and special block comment folding appropriately.\n     * \n     * Cstyle's getCommentRegionBlock() contains the sql comment characters '--' for end region block.\n     */\n    \n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar SqlHighlightRules = require(\"./sql_highlight_rules\").SqlHighlightRules;\nvar SqlFoldMode = require(\"./folding/sql\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = SqlHighlightRules;\n    this.foldingRules = new SqlFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.$id = \"ace/mode/sql\";\n    this.snippetFileId = \"ace/snippets/sql\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SqlHighlightRules = function() {\n\n    var keywords = (\n        \"select|insert|update|delete|from|where|and|or|group|by|order|limit|offset|having|as|case|\" +\n        \"when|then|else|end|type|left|right|join|on|outer|desc|asc|union|create|table|primary|key|if|\" +\n        \"foreign|not|references|default|null|inner|cross|natural|database|drop|grant|distinct|is|in|\" + \n        \"all|alter|any|array|at|authorization|between|both|cast|check|collate|column|commit|constraint|\"+\n        \"cube|current|current_date|current_time|current_timestamp|current_user|describe|escape|except|\" +\n        \"exists|external|extract|fetch|filter|for|full|function|global|grouping|intersect|interval|\" + \n        \"into|leading|like|local|no|of|only|out|overlaps|partition|position|range|revoke|rollback|rollup|\" +\n        \"row|rows|session_user|set|some|start|tablesample|time|to|trailing|truncate|unique|unknown|\" + \n        \"user|using|values|window|with\"\n    );\n\n    var builtinConstants = (\n        \"true|false\"\n    );\n\n    var builtinFunctions = (\n        \"avg|count|first|last|max|min|sum|ucase|lcase|mid|len|round|rank|now|format|\" + \n        \"coalesce|ifnull|isnull|nvl\"\n    );\n\n    var dataTypes = (\n        \"int|numeric|decimal|date|varchar|char|bigint|float|double|bit|binary|text|set|timestamp|\" +\n        \"money|real|number|integer|string\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"support.function\": builtinFunctions,\n        \"keyword\": keywords,\n        \"constant.language\": builtinConstants,\n        \"storage.type\": dataTypes\n    }, \"identifier\", true);\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"--.*$\"\n        },  {\n            token : \"comment\",\n            start : \"/\\\\*\",\n            end : \"\\\\*/\"\n        }, {\n            token : \"string\",           // \" string\n            regex : '\".*?\"'\n        }, {\n            token : \"string\",           // ' string\n            regex : \"'.*?'\"\n        }, {\n            token : \"string\",           // ` string (apache drill)\n            regex : \"`.*?`\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\(]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        } ]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(SqlHighlightRules, TextHighlightRules);\n\nexports.SqlHighlightRules = SqlHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","SqlHighlightRules","SqlFoldMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","snippetFileId","TextHighlightRules","keywords","builtinConstants","builtinFunctions","dataTypes","keywordMapper","createKeywordMapper","$rules","token","regex","normalizeRules"],"sourceRoot":""}