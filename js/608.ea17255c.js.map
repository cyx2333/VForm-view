{"version":3,"file":"js/608.ea17255c.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/ext/split.js","webpack://admin/./node_modules/ace-code/src/split.js"],"sourcesContent":["\"use strict\";\n\n/**\n * this is experimental, and subject to change, use at your own risk!\n */\nmodule.exports = require(\"../split\");\n","\"use strict\";\n\nvar oop = require(\"./lib/oop\");\nvar lang = require(\"./lib/lang\");\nvar EventEmitter = require(\"./lib/event_emitter\").EventEmitter;\nvar Editor = require(\"./editor\").Editor;\nvar Renderer = require(\"./virtual_renderer\").VirtualRenderer;\nvar EditSession = require(\"./edit_session\").EditSession;\n\n/**\n * @typedef {import(\"../ace-internal\").Ace.EventEmitter & {[key: string]: any}} ISplit\n */\n\nvar Split;\n/**\n * @constructor\n * @this {ISplit}\n */\nSplit = function(container, theme, splits) {\n    this.BELOW = 1;\n    this.BESIDE = 0;\n\n    this.$container = container;\n    this.$theme = theme;\n    this.$splits = 0;\n    this.$editorCSS = \"\";\n    this.$editors = [];\n    this.$orientation = this.BESIDE;\n\n    this.setSplits(splits || 1);\n    this.$cEditor = this.$editors[0];\n\n\n    this.on(\"focus\", function(editor) {\n        this.$cEditor = editor;\n    }.bind(this));\n};\n\n(function(){\n\n    oop.implement(this, EventEmitter);\n\n    /**\n     * @returns {Editor}\n     * @this {ISplit}\n     */\n    this.$createEditor = function() {\n        var el = document.createElement(\"div\");\n        el.className = this.$editorCSS;\n        el.style.cssText = \"position: absolute; top:0px; bottom:0px\";\n        this.$container.appendChild(el);\n        var editor = new Editor(new Renderer(el, this.$theme));\n\n        editor.on(\"focus\", function() {\n            this._emit(\"focus\", editor);\n        }.bind(this));\n\n        this.$editors.push(editor);\n        editor.setFontSize(this.$fontSize);\n        return editor;\n    };\n\n    /**\n     * \n     * @param splits\n     * @this {ISplit}\n     */\n    this.setSplits = function(splits) {\n        var editor;\n        if (splits < 1) {\n            throw \"The number of splits have to be > 0!\";\n        }\n\n        if (splits == this.$splits) {\n            return;\n        } else if (splits > this.$splits) {\n            while (this.$splits < this.$editors.length && this.$splits < splits) {\n                editor = this.$editors[this.$splits];\n                this.$container.appendChild(editor.container);\n                editor.setFontSize(this.$fontSize);\n                this.$splits ++;\n            }\n            while (this.$splits < splits) {\n                this.$createEditor();\n                this.$splits ++;\n            }\n        } else {\n            while (this.$splits > splits) {\n                editor = this.$editors[this.$splits - 1];\n                this.$container.removeChild(editor.container);\n                this.$splits --;\n            }\n        }\n        this.resize();\n    };\n\n    /**\n     * \n     * Returns the number of splits.\n     * @returns {Number}\n     * @this {ISplit}\n     **/\n    this.getSplits = function() {\n        return this.$splits;\n    };\n\n    /**\n     * @param {Number} idx The index of the editor you want\n     *\n     * Returns the editor identified by the index `idx`.\n     * @this {ISplit}\n     **/\n    this.getEditor = function(idx) {\n        return this.$editors[idx];\n    };\n\n    /**\n     * \n     * Returns the current editor.\n     * @returns {Editor}\n     * @this {ISplit}\n     **/\n    this.getCurrentEditor = function() {\n        return this.$cEditor;\n    };\n\n    /** \n     * Focuses the current editor.\n     * @related Editor.focus\n     * @this {ISplit}\n     **/\n    this.focus = function() {\n        this.$cEditor.focus();\n    };\n\n    /** \n     * Blurs the current editor.\n     * @related Editor.blur\n     * @this {ISplit}\n     **/\n    this.blur = function() {\n        this.$cEditor.blur();\n    };\n\n    /** \n     * \n     * @param {String} theme The name of the theme to set\n     * \n     * Sets a theme for each of the available editors.\n     * @related Editor.setTheme\n     * @this {ISplit}\n     **/\n    this.setTheme = function(theme) {\n        this.$editors.forEach(function(editor) {\n            editor.setTheme(theme);\n        });\n    };\n\n    /** \n     * \n     * @param {String} keybinding \n     * \n     * Sets the keyboard handler for the editor.\n     * @related editor.setKeyboardHandler\n     * @this {ISplit}\n     **/\n    this.setKeyboardHandler = function(keybinding) {\n        this.$editors.forEach(function(editor) {\n            editor.setKeyboardHandler(keybinding);\n        });\n    };\n\n    /** \n     * \n     * @param {Function} callback A callback function to execute\n     * @param {String} scope The default scope for the callback\n     * \n     * Executes `callback` on all of the available editors. \n     * @this {ISplit}\n     **/\n    this.forEach = function(callback, scope) {\n        this.$editors.forEach(callback, scope);\n    };\n\n\n    this.$fontSize = \"\";\n    /** \n     * @param {Number} size The new font size\n     * \n     * Sets the font size, in pixels, for all the available editors.\n     * @this {ISplit}\n     **/\n    this.setFontSize = function(size) {\n        this.$fontSize = size;\n        this.forEach(function(editor) {\n           editor.setFontSize(size);\n        });\n    };\n\n    /**\n     * \n     * @param {EditSession} session\n     * @return {EditSession}\n     */\n    this.$cloneSession = function(session) {\n        var s = new EditSession(session.getDocument(), session.getMode());\n\n        var undoManager = session.getUndoManager();\n        s.setUndoManager(undoManager);\n\n        // Copy over 'settings' from the session.\n        s.setTabSize(session.getTabSize());\n        s.setUseSoftTabs(session.getUseSoftTabs());\n        s.setOverwrite(session.getOverwrite());\n        // @ts-expect-error TODO: string[] != number[]\n        s.setBreakpoints(session.getBreakpoints());\n        s.setUseWrapMode(session.getUseWrapMode());\n        s.setUseWorker(session.getUseWorker());\n        s.setWrapLimitRange(session.$wrapLimitRange.min,\n                            session.$wrapLimitRange.max);\n        s.$foldData = session.$cloneFoldData();\n\n        return s;\n    };\n\n   /** \n     * \n     * @param {EditSession} session The new edit session\n     * @param {Number} idx The editor's index you're interested in\n     * \n     * Sets a new [[EditSession `EditSession`]] for the indicated editor.\n     * @related Editor.setSession\n     * @this {ISplit}\n     **/\n    this.setSession = function(session, idx) {\n        var editor;\n        if (idx == null) {\n            editor = this.$cEditor;\n        } else {\n            editor = this.$editors[idx];\n        }\n\n        // Check if the session is used already by any of the editors in the\n        // split. If it is, we have to clone the session as two editors using\n        // the same session can cause terrible side effects (e.g. UndoQueue goes\n        // wrong). This also gives the user of Split the possibility to treat\n        // each session on each split editor different.\n        var isUsed = this.$editors.some(function(editor) {\n           return editor.session === session;\n        });\n\n        if (isUsed) {\n            session = this.$cloneSession(session);\n        }\n        editor.setSession(session);\n\n        // Return the session set on the editor. This might be a cloned one.\n        return session;\n    };\n\n   /** \n     * \n     * Returns the orientation.\n     * @returns {Number}\n     * @this {ISplit}\n     **/\n    this.getOrientation = function() {\n        return this.$orientation;\n    };\n\n   /** \n     * \n     * Sets the orientation.\n     * @param {Number} orientation The new orientation value\n     * @this {ISplit}\n     *\n     **/\n    this.setOrientation = function(orientation) {\n        if (this.$orientation == orientation) {\n            return;\n        }\n        this.$orientation = orientation;\n        this.resize();\n    };\n\n   /**  \n     * Resizes the editor.\n     * @this {ISplit}\n     **/\n    this.resize = function() {\n        var width = this.$container.clientWidth;\n        var height = this.$container.clientHeight;\n        var editor;\n\n        if (this.$orientation == this.BESIDE) {\n            var editorWidth = width / this.$splits;\n            for (var i = 0; i < this.$splits; i++) {\n                editor = this.$editors[i];\n                editor.container.style.width = editorWidth + \"px\";\n                editor.container.style.top = \"0px\";\n                editor.container.style.left = i * editorWidth + \"px\";\n                editor.container.style.height = height + \"px\";\n                editor.resize();\n            }\n        } else {\n            var editorHeight = height / this.$splits;\n            for (var i = 0; i < this.$splits; i++) {\n                editor = this.$editors[i];\n                editor.container.style.width = width + \"px\";\n                editor.container.style.top = i * editorHeight + \"px\";\n                editor.container.style.left = \"0px\";\n                editor.container.style.height = editorHeight + \"px\";\n                editor.resize();\n            }\n        }\n    };\n\n}).call(Split.prototype);\n\nexports.Split = Split;\n"],"names":["module","exports","require","Split","oop","EventEmitter","Editor","Renderer","EditSession","container","theme","splits","this","BELOW","BESIDE","$container","$theme","$splits","$editorCSS","$editors","$orientation","setSplits","$cEditor","on","editor","bind","implement","$createEditor","el","document","createElement","className","style","cssText","appendChild","_emit","push","setFontSize","$fontSize","length","removeChild","resize","getSplits","getEditor","idx","getCurrentEditor","focus","blur","setTheme","forEach","setKeyboardHandler","keybinding","callback","scope","size","$cloneSession","session","s","getDocument","getMode","undoManager","getUndoManager","setUndoManager","setTabSize","getTabSize","setUseSoftTabs","getUseSoftTabs","setOverwrite","getOverwrite","setBreakpoints","getBreakpoints","setUseWrapMode","getUseWrapMode","setUseWorker","getUseWorker","setWrapLimitRange","$wrapLimitRange","min","max","$foldData","$cloneFoldData","setSession","isUsed","some","getOrientation","setOrientation","orientation","width","clientWidth","height","clientHeight","editorWidth","i","top","left","editorHeight","call","prototype"],"sourceRoot":""}