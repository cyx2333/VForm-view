{"version":3,"file":"js/511.d853eeeb.js","mappings":"0GAEA,IAAIA,EAAMC,EAAQ,OACdC,EAAWD,EAAAA,OAAAA,KACXE,EAAqBF,EAAAA,MAAAA,EAErBG,EAAO,WACPC,KAAKC,eAAiBH,CAC1B,EACAH,EAAIO,SAASH,EAAMF,GAEnB,WACIG,KAAKG,IAAM,eACd,EAAEC,KAAKL,EAAKM,WAEbC,EAAQP,KAAOA,C,uBCbf,IAAIJ,EAAMC,EAAQ,OACdW,EAAqBX,EAAAA,OAAAA,EAErBE,EAAqB,WAErB,IAAIU,EACA,uJAGAC,EACA,oHAGAC,EAAY,iBACZC,EAAe,0DACfC,EAAY,6DACZC,EAAa,sEAEbC,EAAgBd,KAAKe,oBAAoB,CACzC,QAAWP,EACX,kBAAmBC,EACnB,mBAAoBC,EACpB,eAAgBC,EAChB,mBAAoBC,EACpB,eAAgBC,GACjB,cAEHb,KAAKgB,OAAS,CACV,MAAU,CACN,CACIC,MAAQ,eACRC,MAAQ,aACT,CACCD,MAAQ,gBACRC,MAAQ,SACRC,KAAO,WACR,CACCF,MAAQ,SACRC,MAAQ,IACRC,KAAO,UACR,CACCF,MAAQ,gBACRC,MAAQ,SACRC,KAAO,SACR,CACCF,MAAQ,qBACRC,MAAQ,IACRC,KAAO,QACR,CACCF,MAAQ,mBACRC,MAAQ,wDACT,CACCD,MAAQ,mBACRC,MAAQ,kDACT,CACCD,MAAQ,mBACRC,MAAQ,0CACT,CACCD,MAAQ,4BACRC,MAAQ,mBACT,CACCD,MAAQ,oBACRC,MAAQ,WACT,CACCD,MAAQ,mBACRC,MAAQ,mBACT,CACCD,MAAQ,mBACRC,MAAQ,gGACT,CACCD,MAAQ,UACRC,MAAQ,+BACT,CACCD,MAAQH,EACRI,MAAQ,+BACT,CACCD,MAAQ,eACRC,MAAQ,SACT,CACCD,MAAQ,eACRC,MAAQ,WACT,CACCD,MAAQ,OACRC,MAAQ,SAGhB,QAAY,CACR,CACID,MAAQ,gBACRC,MAAQ,SACRC,KAAO,SACR,CACCC,aAAe,kBAGvB,OAAW,CACP,CACIH,MAAQ,4BACRC,MAAQ,yBACT,CACCD,MAAQ,4BACRC,MAAQ,SACT,CACCD,MAAQ,SACRC,MAAQ,IACRC,KAAO,SACR,CACCF,MAAQ,SACRC,MAAQ,cAGhB,MAAU,CACN,CACID,MAAQ,4BACRC,MAAQ,yBACT,CACCD,MAAQ,4BACRC,MAAQ,SACT,CACCD,MAAQ,gBACRC,MAAQ,IACRC,KAAO,SACR,CACCF,MAAQ,gBACRC,MAAQ,cAGhB,KAAS,CACL,CACID,MAAQ,4BACRC,MAAQ,yBACT,CACCD,MAAQ,4BACRC,MAAQ,SACT,CACCD,MAAQ,qBACRC,MAAQ,IACRC,KAAO,SACR,CACCF,MAAQ,qBACRC,MAAQ,cAKxB,EAEAvB,EAAIO,SAASJ,EAAoBS,GAEjCD,EAAQ,EAAqBR,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/flix.js","webpack://admin/./node_modules/ace-code/src/mode/flix_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar FlixHighlightRules = require(\"./flix_highlight_rules\").FlixHighlightRules;\n\nvar Mode = function() {\n    this.HighlightRules = FlixHighlightRules;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$id = \"ace/mode/flix\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar FlixHighlightRules = function() {\n    \n    var keywords = (\n        \"use|checked_cast|checked_ecast|unchecked_cast|masked_cast|as|discard|from|\" +\n        \"into|inject|project|solve|query|where|select|force|import|region|red|deref\"\n    );\n    var controlKeywords = (\n        \"choose|debug|do|for|forA|forM|foreach|yield|if|else|case|\" +\n        \"match|typematch|try|catch|resume|spawn|par|branch|jumpto\"\n    );\n    var operators = \"not|and|or|fix\";\n    var declarations = \"eff|def|law|enum|case|type|alias|class|instance|mod|let\";\n    var modifiers = \"with|without|opaque|lazy|lawful|pub|override|sealed|static\";\n    var primitives = \"Unit|Bool|Char|Float32|Float64|Int8|Int16|Int32|Int64|BigInt|String\";\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"keyword.control\": controlKeywords,\n        \"keyword.operator\": operators,\n        \"storage.type\": declarations,\n        \"storage.modifier\": modifiers,\n        \"support.type\": primitives\n    }, \"identifier\");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment.line\",\n                regex : \"\\\\/\\\\/.*$\"\n            }, {\n                token : \"comment.block\",\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string\",\n                regex : '\"',\n                next : \"string\"\n            }, {\n                token : \"string.regexp\",\n                regex : 'regex\"',\n                next : \"regex\"\n            }, {\n                token : \"constant.character\",\n                regex : \"'\",\n                next : \"char\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0x[a-fA-F0-9](_*[a-fA-F0-9])*(i8|i16|i32|i64|ii)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[0-9](_*[0-9])*\\\\.[0-9](_*[0-9])*(f32|f64)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // integer\n                regex : \"[0-9](_*[0-9])*(i8|i16|i32|i64|ii)?\\\\b\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(true|false)\\\\b\"\n            }, {\n                token : \"constant.language\",\n                regex : \"null\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"\\\\->|~>|<\\\\-|=>\"\n            }, {\n                token : \"storage.modifier\",\n                regex : \"@(Deprecated|Experimental|Internal|ParallelWhenPure|Parallel|LazyWhenPure|Lazy|Skip|Test)\\\\b\"\n            }, {\n                token : \"keyword\", // hole\n                regex : \"(\\\\?\\\\?\\\\?|\\\\?[a-zA-Z0-9]+)\"\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment.block\",\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment.block\"\n            }\n        ],\n        \"string\" : [\n            {\n                token : \"constant.character.escape\", // unicode\n                regex : \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n            }, {\n                token : \"constant.character.escape\",\n                regex : '\\\\\\\\.'\n            }, {\n                token : \"string\",\n                regex : '\"',\n                next : \"start\"\n            }, {\n                token : \"string\",\n                regex : '[^\"\\\\\\\\]+'\n            }\n        ],\n        \"regex\" : [\n            {\n                token : \"constant.character.escape\", // unicode\n                regex : \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n            }, {\n                token : \"constant.character.escape\",\n                regex : '\\\\\\\\.'\n            }, {\n                token : \"string.regexp\",\n                regex : '\"',\n                next : \"start\"\n            }, {\n                token : \"string.regexp\",\n                regex : '[^\"\\\\\\\\]+'\n            }\n        ],\n        \"char\" : [\n            {\n                token : \"constant.character.escape\", // unicode\n                regex : \"\\\\\\\\(u[0-9a-fA-F]{4})\"\n            }, {\n                token : \"constant.character.escape\",\n                regex : '\\\\\\\\.'\n            }, {\n                token : \"constant.character\",\n                regex : \"'\",\n                next : \"start\"\n            }, {\n                token : \"constant.character\",\n                regex : \"[^'\\\\\\\\]+\"\n            }\n        ]\n    };\n\n};\n\noop.inherits(FlixHighlightRules, TextHighlightRules);\n\nexports.FlixHighlightRules = FlixHighlightRules;"],"names":["oop","require","TextMode","FlixHighlightRules","Mode","this","HighlightRules","inherits","$id","call","prototype","exports","TextHighlightRules","keywords","controlKeywords","operators","declarations","modifiers","primitives","keywordMapper","createKeywordMapper","$rules","token","regex","next","defaultToken"],"sourceRoot":""}