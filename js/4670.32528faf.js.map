{"version":3,"file":"js/4670.32528faf.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/bibtex.js","webpack://admin/./node_modules/ace-code/src/mode/bibtex_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar BibTeXHighlightRules = require(\"./bibtex_highlight_rules\").BibTeXHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = BibTeXHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$id = \"ace/mode/bibtex\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar BibTeXHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        start: [\n            {\n                token: \"comment\",\n                regex: /@Comment\\{/,\n                stateName: \"bibtexComment\",\n                push: [\n                    {\n                        token: \"comment\",\n                        regex: /}/,\n                        next: \"pop\"\n                    }, {\n                        token: \"comment\",\n                        regex: /\\{/,\n                        push: \"bibtexComment\"\n                    }, {\n                        defaultToken: \"comment\"\n                    }\n                ]\n            }, {\n                token: [\n                    \"keyword\", \"text\", \"paren.lparen\", \"text\", \"variable\", \"text\", \"keyword.operator\"\n                ],\n                regex: /(@String)(\\s*)(\\{)(\\s*)([a-zA-Z]*)(\\s*)(=)/,\n                push: [\n                    {\n                        token: \"paren.rparen\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#misc\"\n                    }, {\n                        defaultToken: \"text\"\n                    }\n                ]\n            }, {\n                token: [\n                    \"keyword\", \"text\", \"paren.lparen\", \"text\", \"variable\", \"text\", \"keyword.operator\"\n                ],\n                regex: /(@String)(\\s*)(\\()(\\s*)([a-zA-Z]*)(\\s*)(=)/,\n                push: [\n                    {\n                        token: \"paren.rparen\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#misc\"\n                    }, {\n                        defaultToken: \"text\"\n                    }\n                ]\n            }, {\n                token: [\n                    \"keyword\", \"text\", \"paren.lparen\"\n                ],\n                regex: /(@preamble)(\\s*)(\\()/,\n                push: [\n                    {\n                        token: \"paren.rparen\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#misc\"\n                    }, {\n                        defaultToken: \"text\"\n                    }\n                ]\n            }, {\n                token: [\n                    \"keyword\", \"text\", \"paren.lparen\"\n                ],\n                regex: /(@preamble)(\\s*)(\\{)/,\n                push: [\n                    {\n                        token: \"paren.rparen\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#misc\"\n                    }, {\n                        defaultToken: \"text\"\n                    }\n                ]\n            }, {\n                token: [\n                    \"keyword\", \"text\", \"paren.lparen\", \"text\", \"support.class\"\n                ],\n                regex: /(@[a-zA-Z]+)(\\s*)(\\{)(\\s*)([\\w-]+)/,\n                push: [\n                    {\n                        token: \"paren.rparen\",\n                        regex: /\\}/,\n                        next: \"pop\"\n                    }, {\n                        token: [\n                            \"variable\", \"text\", \"keyword.operator\"\n                        ],\n                        regex: /([a-zA-Z0-9\\!\\$\\&\\*\\+\\-\\.\\/\\:\\;\\<\\>\\?\\[\\]\\^\\_\\`\\|]+)(\\s*)(=)/,\n                        push: [\n                            {\n                                token: \"text\",\n                                regex: /(?=[,}])/,\n                                next: \"pop\"\n                            }, {\n                                include: \"#misc\"\n                            }, {\n                                include: \"#integer\"\n                            }, {\n                                defaultToken: \"text\"\n                            }\n                        ]\n                    }, {\n                        token: \"punctuation\",\n                        regex: /,/\n                    }, {\n                        defaultToken: \"text\"\n                    }\n                ]\n            }, {\n                defaultToken: \"comment\"\n            }\n        ],\n        \"#integer\": [\n            {\n                token: \"constant.numeric.bibtex\",\n                regex: /\\d+/\n            }\n        ],\n        \"#misc\": [\n            {\n                token: \"string\",\n                regex: /\"/,\n                push: \"#string_quotes\"\n            }, {\n                token: \"paren.lparen\",\n                regex: /\\{/,\n                push: \"#string_braces\"\n            }, {\n                token: \"keyword.operator\",\n                regex: /#/\n            }\n        ],\n        \"#string_braces\": [\n            {\n                token: \"paren.rparen\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                token: \"invalid.illegal\",\n                regex: /@/\n            }, {\n                include: \"#misc\"\n            }, {\n                defaultToken: \"string\"\n            }\n        ],\n        \"#string_quotes\": [\n            {\n                token: \"string\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                include: \"#misc\"\n            }, {\n                defaultToken: \"string\"\n            }\n        ]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(BibTeXHighlightRules, TextHighlightRules);\n\nexports.BibTeXHighlightRules = BibTeXHighlightRules;","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","BibTeXHighlightRules","FoldMode","Mode","this","HighlightRules","foldingRules","inherits","$id","call","prototype","exports","TextHighlightRules","$rules","start","token","regex","stateName","push","next","defaultToken","include","normalizeRules","Range","BaseFoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec"],"sourceRoot":""}