{"version":3,"file":"js/7913.4a49ba13.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/nasal.js","webpack://admin/./node_modules/ace-code/src/mode/nasal_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/* ***** BEGIN LICENSE BLOCK *****\n * Distributed under the BSD license:\n *\n * Copyright (c) 2012, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * ***** END LICENSE BLOCK ***** */\n\n/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar NasalHighlightRules = require(\"./nasal_highlight_rules\").NasalHighlightRules;\n// TODO: pick appropriate fold mode\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = NasalHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    // this.lineCommentStart = \"\"//\"\";\n    // this.blockComment = {start: \"\"/*\"\", end: \"\"*/\"\"};\n    // Extra logic goes here.\n    this.$id = \"ace/mode/nasal\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;","/* ***** BEGIN LICENSE BLOCK *****\n * Distributed under the BSD license:\n *\n * Copyright (c) 2012, Ajax.org B.V.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of Ajax.org B.V. nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * ***** END LICENSE BLOCK ***** */\n\n/* This file was autogenerated from https://github.com/BobDotCom/Nasal.tmbundle/blob/95113f60db7cb7ac7b6c3d854683773879407a48/Syntaxes/Nasal.tmLanguage (uuid: ) */\n/****************************************************************************************\n * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *\n * fileTypes                                                                            *\n ****************************************************************************************/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar NasalHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        start: [{\n            token: \"constant.other.allcaps.nasal\",\n            regex: /\\b[[:upper:]_][[:upper:][:digit:]_]*\\b(?![\\.\\(\\'\\\"])/,\n            comment: \"Match identifiers in ALL_CAPS as constants, except when followed by `.`, `(`, `'`, or `\\\"`.\"\n        }, {\n            todo: {\n                token: [\n                    \"support.class.nasal\",\n                    \"meta.function.nasal\",\n                    \"entity.name.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"keyword.operator.nasal\",\n                    \"meta.function.nasal\",\n                    \"storage.type.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"punctuation.definition.parameters.begin.nasal\"\n                ],\n                regex: /([a-zA-Z_?.$][\\w?.$]*)(\\.)([a-zA-Z_?.$][\\w?.$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n                push: [{\n                    token: \"punctuation.definition.parameters.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }, {\n                    token: \"variable.parameter.nasal\",\n                    regex: /\\w/\n                }, {\n                    defaultToken: \"meta.function.nasal\"\n                }]\n            },\n            comment: \"match stuff like: Sound.play = func() { … }\"\n        }, {\n            todo: {\n                token: [\n                    \"entity.name.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"keyword.operator.nasal\",\n                    \"meta.function.nasal\",\n                    \"storage.type.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"punctuation.definition.parameters.begin.nasal\"\n                ],\n                regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*)(func)(\\s*)(\\()/,\n                push: [{\n                    token: \"punctuation.definition.parameters.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }, {\n                    token: \"variable.parameter.nasal\",\n                    regex: /\\w/\n                }, {\n                    defaultToken: \"meta.function.nasal\"\n                }]\n            },\n            comment: \"match stuff like: play = func() { … }\"\n        }, {\n            todo: {\n                token: [\n                    \"entity.name.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"keyword.operator.nasal\",\n                    \"meta.function.nasal\",\n                    \"storage.type.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"punctuation.definition.parameters.begin.nasal\"\n                ],\n                regex: /([a-zA-Z_?$][\\w?$]*)(\\s*)(=)(\\s*\\(\\s*)(func)(\\s*)(\\()/,\n                push: [{\n                    token: \"punctuation.definition.parameters.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }, {\n                    token: \"variable.parameter.nasal\",\n                    regex: /\\w/\n                }, {\n                    defaultToken: \"meta.function.nasal\"\n                }]\n            },\n            comment: \"match stuff like: play = (func() { … }\"\n        }, {\n            todo: {\n                token: [\n                    \"entity.name.function.nasal\",\n                    \"meta.function.hash.nasal\",\n                    \"storage.type.function.nasal\",\n                    \"meta.function.hash.nasal\",\n                    \"punctuation.definition.parameters.begin.nasal\"\n                ],\n                regex: /\\b([a-zA-Z_?.$][\\w?.$]*)(\\s*:\\s*\\b)(func)(\\s*)(\\()/,\n                push: [{\n                    token: \"punctuation.definition.parameters.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }, {\n                    token: \"variable.parameter.nasal\",\n                    regex: /\\w/\n                }, {\n                    defaultToken: \"meta.function.hash.nasal\"\n                }]\n            },\n            comment: \"match stuff like: foobar: func() { … }\"\n        }, {\n            todo: {\n                token: [\n                    \"storage.type.function.nasal\",\n                    \"meta.function.nasal\",\n                    \"punctuation.definition.parameters.begin.nasal\"\n                ],\n                regex: /\\b(func)(\\s*)(\\()/,\n                push: [{\n                    token: \"punctuation.definition.parameters.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }, {\n                    token: \"variable.parameter.nasal\",\n                    regex: /\\w/\n                }, {\n                    defaultToken: \"meta.function.nasal\"\n                }]\n            },\n            comment: \"match stuff like: func() { … }\"\n        }, {\n            token: [\n                \"keyword.operator.new.nasal\",\n                \"meta.class.instance.constructor\",\n                \"entity.name.type.instance.nasal\"\n            ],\n            regex: /(new)(\\s+)(\\w+(?:\\.\\w*)?)/\n        }, {\n            token: \"keyword.control.nasal\",\n            regex: /\\b(?:if|else|elsif|while|for|foreach|forindex)\\b/\n        }, {\n            token: \"keyword.control.nasal\",\n            regex: /\\b(?:break(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|continue(?:\\s+[A-Z]{2,16})?(?=\\s*(?:;|\\}))|[A-Z]{2,16}(?=\\s*;(?:[^\\)#;]*?;){0,2}[^\\)#;]*?\\)))\\b/\n        }, {\n            token: \"keyword.operator.nasal\",\n            regex: /!|\\*|\\-|\\+|~|\\/|==|=|!=|<=|>=|<|>|!|\\?|\\:|\\*=|\\/=|\\+=|\\-=|~=|\\.\\.\\.|\\b(?:and|or)\\b/\n        }, {\n            token: \"variable.language.nasal\",\n            regex: /\\b(?:me|arg|parents|obj)\\b/\n        }, {\n            token: \"storage.type.nasal\",\n            regex: /\\b(?:return|var)\\b/\n        }, {\n            token: \"constant.language.nil.nasal\",\n            regex: /\\bnil\\b/\n        }, {\n            token: \"punctuation.definition.string.begin.nasal\",\n            regex: /'/,\n            push: [{\n                token: \"punctuation.definition.string.end.nasal\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.nasal\",\n                regex: /\\\\'/\n            }, {\n                defaultToken: \"string.quoted.single.nasal\"\n            }],\n            comment: \"Single quoted strings\"\n        }, {\n            token: \"punctuation.definition.string.begin.nasal\",\n            regex: /\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.nasal\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.nasal\",\n                regex: /\\\\(?:x[\\da-fA-F]{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|r|n|t|\\\\|\")/\n            }, {\n                token: \"constant.character.escape.nasal\",\n                regex: /%(?:%|(?:\\d+\\$)?[+-]?(?:[ 0]|'.{1})?-?\\d*(?:\\.\\d+)?[bcdeEufFgGosxX])/\n            }, {\n                defaultToken: \"string.quoted.double.nasal\"\n            }],\n            comment: \"Double quoted strings\"\n        }, {\n            token: [\n                \"punctuation.definition.string.begin.nasal\",\n                \"string.other\",\n                \"punctuation.definition.string.end.nasal\"\n            ],\n            regex: /(`)(.)(`)/,\n            comment: \"Single-byte ASCII character constants\"\n        }, {\n            token: [\n                \"punctuation.definition.comment.nasal\",\n                \"comment.line.hash.nasal\"\n            ],\n            regex: /(#)(.*$)/,\n            comment: \"Comments\"\n        }, {\n            token: \"constant.numeric.nasal\",\n            regex: /(?:(?:\\b[0-9]+)?\\.)?\\b[0-9]+(?:[eE][-+]?[0-9]+)?\\b/,\n            comment: \"Integers, floats, and scientific format\"\n        }, {\n            token: \"constant.numeric.nasal\",\n            regex: /0[x|X][0-9a-fA-F]+/,\n            comment: \"Hex codes\"\n        }, {\n            token: \"punctuation.terminator.statement.nasal\",\n            regex: /\\;/\n        }, {\n            token: [\n                \"punctuation.section.scope.begin.nasal\",\n                \"punctuation.section.scope.end.nasal\"\n            ],\n            regex: /(\\[)(\\])/\n        }, {\n            todo: {\n                token: \"punctuation.section.scope.begin.nasal\",\n                regex: /\\{/,\n                push: [{\n                    token: \"punctuation.section.scope.end.nasal\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }]\n            }\n        }, {\n            todo: {\n                token: \"punctuation.section.scope.begin.nasal\",\n                regex: /\\(/,\n                push: [{\n                    token: \"punctuation.section.scope.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }]\n            }\n        }, {\n            token: \"invalid.illegal\",\n            regex: /%|\\$|@|&|\\^|\\||\\\\|`/,\n            comment: \"Illegal characters\"\n        }, {\n            todo: {\n                comment: \"TODO: Symbols in hash keys\"\n            },\n            comment: \"TODO: Symbols in hash keys\"\n        }, {\n            token: \"variable.language.nasal\",\n            regex: /\\b(?:append|bind|call|caller|chr|closure|cmp|compile|contains|delete|die|find|ghosttype|id|int|keys|left|num|pop|right|setsize|size|sort|split|sprintf|streq|substr|subvec|typeof|readline)\\b/,\n            comment: \"Core functions\"\n        }, {\n            token: \"variable.language.nasal\",\n            regex: /\\b(?:abort|abs|aircraftToCart|addcommand|airportinfo|airwaysRoute|assert|carttogeod|cmdarg|courseAndDistance|createDiscontinuity|createViaTo|createWP|createWPFrom|defined|directory|fgcommand|findAirportsByICAO|findAirportsWithinRange|findFixesByID|findNavaidByFrequency|findNavaidsByFrequency|findNavaidsByID|findNavaidsWithinRange|finddata|flightplan|geodinfo|geodtocart|get_cart_ground_intersection|getprop|greatCircleMove|interpolate|isa|logprint|magvar|maketimer|start|stop|restart|maketimestamp|md5|navinfo|parse_markdown|parsexml|print|printf|printlog|rand|registerFlightPlanDelegate|removecommand|removelistener|resolvepath|setlistener|_setlistener|setprop|srand|systime|thisfunc|tileIndex|tilePath|values)\\b/,\n            comment: \"FG ext core functions\"\n        }, {\n            token: \"variable.language.nasal\",\n            regex: /\\b(?:singleShot|isRunning|simulatedTime)\\b/,\n            comment: \"FG ext core functions\"\n        }, {\n            token: \"constant.language.nasal\",\n            regex: /\\b(?:D2R|FPS2KT|FT2M|GAL2L|IN2M|KG2LB|KT2FPS|KT2MPS|LG2GAL|LB2KG|M2FT|M2IN|M2NM|MPS2KT|NM2M|R2D)\\b/,\n            comment: \"FG ext core constants\"\n        }, {\n            token: \"support.function.nasal\",\n            regex: /\\b(?:addChild|addChildren|alias|clearValue|equals|getAliasTarget|getAttribute|getBoolValue|getChild|getChildren|getIndex|getName|getNode|getParent|getPath|getType|getValue|getValues|initNode|remove|removeAllChildren|removeChild|removeChildren|setAttribute|setBoolValue|setDoubleValue|setIntValue|setValue|setValues|unalias|compileCondition|condition|copy|dump|getNode|nodeList|runBinding|setAll|wrap|wrapNode)\\b/,\n            comment: \"FG func props\"\n        }, {\n            token: \"support.class.nasal\",\n            regex: /\\bNode\\b/,\n            comment: \"FG node class\"\n        }, {\n            token: \"variable.language.nasal\",\n            regex: /\\b(?:props|globals)\\b/,\n            comment: \"FG func props variables\"\n        }, {\n            todo: {\n                token: [\n                    \"support.function.nasal\",\n                    \"punctuation.definition.arguments.begin.nasal\"\n                ],\n                regex: /\\b([a-zA-Z_?$][\\w?$]*)(\\()/,\n                push: [{\n                    token: \"punctuation.definition.arguments.end.nasal\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }, {\n                    defaultToken: \"meta.function-call.nasal\"\n                }]\n            },\n            comment: \"function call\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nNasalHighlightRules.metaData = {\n    fileTypes: [\"nas\"],\n    name: \"Nasal\",\n    scopeName: \"source.nasal\"\n};\n\n\noop.inherits(NasalHighlightRules, TextHighlightRules);\n\nexports.NasalHighlightRules = NasalHighlightRules;"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","NasalHighlightRules","Mode","HighlightRules","foldingRules","$id","TextHighlightRules","$rules","token","regex","comment","todo","push","next","include","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName"],"sourceRoot":""}