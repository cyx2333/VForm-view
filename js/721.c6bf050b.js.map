{"version":3,"file":"js/721.c6bf050b.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/dot.js","webpack://admin/./node_modules/ace-code/src/mode/dot_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/matching_brace_outdent.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar DotHighlightRules = require(\"./dot_highlight_rules\").DotHighlightRules;\nvar DotFoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = DotHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new DotFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = [\"//\", \"#\"];\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/dot\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar lang = require(\"../lib/lang\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n\nvar DotHighlightRules = function() {\n\n   var keywords = lang.arrayToMap(\n        (\"strict|node|edge|graph|digraph|subgraph\").split(\"|\")\n   );\n\n   var attributes = lang.arrayToMap(\n        (\"damping|k|url|area|arrowhead|arrowsize|arrowtail|aspect|bb|bgcolor|center|charset|clusterrank|color|colorscheme|comment|compound|concentrate|constraint|decorate|defaultdist|dim|dimen|dir|diredgeconstraints|distortion|dpi|edgeurl|edgehref|edgetarget|edgetooltip|epsilon|esep|fillcolor|fixedsize|fontcolor|fontname|fontnames|fontpath|fontsize|forcelabels|gradientangle|group|headurl|head_lp|headclip|headhref|headlabel|headport|headtarget|headtooltip|height|href|id|image|imagepath|imagescale|label|labelurl|label_scheme|labelangle|labeldistance|labelfloat|labelfontcolor|labelfontname|labelfontsize|labelhref|labeljust|labelloc|labeltarget|labeltooltip|landscape|layer|layerlistsep|layers|layerselect|layersep|layout|len|levels|levelsgap|lhead|lheight|lp|ltail|lwidth|margin|maxiter|mclimit|mindist|minlen|mode|model|mosek|nodesep|nojustify|normalize|nslimit|nslimit1|ordering|orientation|outputorder|overlap|overlap_scaling|pack|packmode|pad|page|pagedir|pencolor|penwidth|peripheries|pin|pos|quadtree|quantum|rank|rankdir|ranksep|ratio|rects|regular|remincross|repulsiveforce|resolution|root|rotate|rotation|samehead|sametail|samplepoints|scale|searchsize|sep|shape|shapefile|showboxes|sides|size|skew|smoothing|sortv|splines|start|style|stylesheet|tailurl|tail_lp|tailclip|tailhref|taillabel|tailport|tailtarget|tailtooltip|target|tooltip|truecolor|vertices|viewport|voro_margin|weight|width|xlabel|xlp|z\").split(\"|\")\n   );\n\n   this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : /\\/\\/.*$/\n            }, {\n                token : \"comment\",\n                regex : /#.*$/\n            }, {\n                token : \"comment\", // multi line comment\n                merge : true,\n                regex : /\\/\\*/,\n                next : \"comment\"\n            }, {\n                token : \"string\",\n                regex : \"'(?=.)\",\n                next  : \"qstring\"\n            }, {\n                token : \"string\",\n                regex : '\"(?=.)',\n                next  : \"qqstring\"\n            }, {\n                token : \"constant.numeric\",\n                regex : /[+\\-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?\\b/\n            }, {\n                token : \"keyword.operator\",\n                regex : /\\+|=|\\->/\n            }, {\n                token : \"punctuation.operator\",\n                regex : /,|;/\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[{]/\n            }, {\n                token : \"paren.rparen\",\n                regex : /[\\]}]/\n            }, {\n                token: \"comment\",\n                regex: /^#!.*$/\n            }, {\n                token: function(value) {\n                    if (keywords.hasOwnProperty(value.toLowerCase())) {\n                        return \"keyword\";\n                    }\n                    else if (attributes.hasOwnProperty(value.toLowerCase())) {\n                        return \"variable\";\n                    }\n                    else {\n                        return \"text\";\n                    }\n                },\n                regex: \"\\\\-?[a-zA-Z_][a-zA-Z0-9_\\\\-]*\"\n           }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment\"\n            }\n        ],\n        \"qqstring\" : [\n            {\n                token : \"string\",\n                regex : '[^\"\\\\\\\\]+',\n                merge : true\n            }, {\n                token : \"string\",\n                regex : \"\\\\\\\\$\",\n                next  : \"qqstring\",\n                merge : true\n            }, {\n                token : \"string\",\n                regex : '\"|$',\n                next  : \"start\",\n                merge : true\n            }\n        ],\n        \"qstring\" : [\n            {\n                token : \"string\",\n                regex : \"[^'\\\\\\\\]+\",\n                merge : true\n            }, {\n                token : \"string\",\n                regex : \"\\\\\\\\$\",\n                next  : \"qstring\",\n                merge : true\n            }, {\n                token : \"string\",\n                regex : \"'|$\",\n                next  : \"start\",\n                merge : true\n            }\n        ]\n   };\n};\n\noop.inherits(DotHighlightRules, TextHighlightRules);\n\nexports.DotHighlightRules = DotHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n"],"names":["oop","require","TextHighlightRules","DocCommentHighlightRules","this","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","exports","TextMode","MatchingBraceOutdent","DotHighlightRules","DotFoldMode","Mode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","end","getNextLineIndent","state","line","tab","indent","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","length","type","match","checkOutdent","input","autoOutdent","doc","row","$id","call","prototype","lang","keywords","arrayToMap","split","attributes","merge","value","hasOwnProperty","toLowerCase","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","column","openBracePos","findMatchingBracket"],"sourceRoot":""}