{"version":3,"file":"js/3735.9be486aa.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/ext/hardwrap.js"],"sourcesContent":["\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\n/**\n * @param {import(\"../editor\").Editor} editor\n * @param {import(\"../../ace-internal\").Ace.HardWrapOptions} options\n */\nfunction hardWrap(editor, options) {\n    var max = options.column || editor.getOption(\"printMarginColumn\");\n    var allowMerge = options.allowMerge != false;\n       \n    var row = Math.min(options.startRow, options.endRow);\n    var endRow = Math.max(options.startRow, options.endRow);\n    \n    var session = editor.session;\n    \n    while (row <= endRow) {\n        var line = session.getLine(row);\n        if (line.length > max) {\n            var space = findSpace(line, max, 5);\n            if (space) {\n                var indentation = /^\\s*/.exec(line)[0];\n                session.replace(new Range(row,space.start,row,space.end), \"\\n\" + indentation);\n            }\n            endRow++;\n        } else if (allowMerge && /\\S/.test(line) && row != endRow) {\n            var nextLine = session.getLine(row + 1);\n            if (nextLine && /\\S/.test(nextLine)) {\n                var trimmedLine = line.replace(/\\s+$/, \"\");\n                var trimmedNextLine = nextLine.replace(/^\\s+/, \"\");\n                var mergedLine = trimmedLine + \" \" + trimmedNextLine;\n\n                var space = findSpace(mergedLine, max, 5);\n                if (space && space.start > trimmedLine.length || mergedLine.length < max) {\n                    var replaceRange = new Range(row,trimmedLine.length,row + 1,nextLine.length - trimmedNextLine.length);\n                    session.replace(replaceRange, \" \");\n                    row--;\n                    endRow--;\n                } else if (trimmedLine.length < line.length) {\n                    session.remove(new Range(row, trimmedLine.length, row, line.length));\n                }\n            }\n        }\n        row++;\n    }\n\n    /**\n     * @param {string} line\n     * @param {number} max\n     * @param {number} min\n     */\n    function findSpace(line, max, min) {\n        if (line.length < max)\n            return;\n        var before = line.slice(0, max);\n        var after = line.slice(max);\n        var spaceAfter = /^(?:(\\s+)|(\\S+)(\\s+))/.exec(after);\n        var spaceBefore = /(?:(\\s+)|(\\s+)(\\S+))$/.exec(before);\n        var start = 0;\n        var end = 0;\n        if (spaceBefore && !spaceBefore[2]) {\n            start = max - spaceBefore[1].length;\n            end = max;\n        }\n        if (spaceAfter && !spaceAfter[2]) {\n            if (!start)\n                start = max;\n            end = max + spaceAfter[1].length;\n        }\n        if (start) {\n            return {\n                start: start,\n                end: end\n            };\n        }\n        if (spaceBefore && spaceBefore[2] && spaceBefore.index > min) {\n            return {\n                start: spaceBefore.index,\n                end: spaceBefore.index + spaceBefore[2].length\n            };\n        }\n        if (spaceAfter && spaceAfter[2]) {\n            start =  max + spaceAfter[2].length;\n            return {\n                start: start,\n                end: start + spaceAfter[3].length\n            };\n        }\n    }\n\n}\n\nfunction wrapAfterInput(e) {\n    if (e.command.name == \"insertstring\" && /\\S/.test(e.args)) {\n        var editor = e.editor;\n        var cursor = editor.selection.cursor;\n        if (cursor.column <= editor.renderer.$printMarginColumn) return;\n        var lastDelta = editor.session.$undoManager.$lastDelta;\n\n        hardWrap(editor, {\n            startRow: cursor.row, endRow: cursor.row,\n            allowMerge: false\n        });\n        if (lastDelta != editor.session.$undoManager.$lastDelta) \n            editor.session.markUndoGroup();\n    }\n}\n\nvar Editor = require(\"../editor\").Editor;\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    hardWrap: {\n        set: function(val) {\n            if (val) {\n                this.commands.on(\"afterExec\", wrapAfterInput);\n            } else {\n                this.commands.off(\"afterExec\", wrapAfterInput);\n            }\n        },\n        value: false\n    }\n});\n\nexports.hardWrap = hardWrap;\n"],"names":["Range","require","hardWrap","editor","options","max","column","getOption","allowMerge","row","Math","min","startRow","endRow","session","line","getLine","length","space","findSpace","indentation","exec","replace","start","end","test","nextLine","trimmedLine","trimmedNextLine","mergedLine","replaceRange","remove","before","slice","after","spaceAfter","spaceBefore","index","wrapAfterInput","e","command","name","args","cursor","selection","renderer","$printMarginColumn","lastDelta","$undoManager","$lastDelta","markUndoGroup","Editor","prototype","set","val","this","commands","on","off","value","exports"],"sourceRoot":""}