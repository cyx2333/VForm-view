{"version":3,"file":"js/80.31e6466c.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/assembly_arm32.js","webpack://admin/./node_modules/ace-code/src/mode/assembly_arm32_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/coffee.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar AssemblyARM32HighlightRules = require(\"./assembly_arm32_highlight_rules\").AssemblyARM32HighlightRules;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = AssemblyARM32HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = [\";\"];\n\tthis.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/assembly_arm32\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar AssemblyARM32HighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = { \n        start: [ \n            { \n                token: 'keyword.control.assembly',\n                // should cover every instruction listed in https://pages.cs.wisc.edu/~markhill/restricted/arm_isa_quick_reference.pdf\n                regex: '\\\\b(?:cpsid|cpsie|cps|setend|(?:srs|rfe)(?:ia|ib|da|db|fd|ed|fa|ea)|bkpt|nop|pld|cdp2|mrc2|mrrc2|mcr2|mcrr2|ldc2|stc2|(?:add|adc|sub|sbc|rsb|rsc|mul|mla|umull|umlal|smull|smlal|mvn|and|eor|orr|bic)(?:eq|ne|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al)?s?|(?:(?:q|qd)?(?:add|sub)|umaal|smul(?:b|t)(?:b|t)|smulw(?:b|t)|smla(?:b|t)(?:b|t)|smlaw(?:b|t)|smlal(?:b|t)(?:b|t)|smuadx?|smladx?|smlaldx?|smusdx?|smlsdx?|smlsldx?|smmulr?|smmlar?|smmlsr?|mia|miaph|mia(?:b|t)(?:b|t)|clz|(?:s|q|sh|u|uq|uh)(?:add16|sub16|add8|sub8|addsubx|subaddx)|usad8|usada8|mrs|msr|mra|mar|cpy|tst|teq|cmp|cmn|ssat|ssat16|usat|usat16|pkhbt|pkhtb|sxth|sxtb16|sxtb|uxth|uxtb16|uxtb|sxtah|sxtab16|sxtab|uxtah|uxtab16|uxtab|rev|rev16|revsh|sel|b|bl|bx|blx|bxj|swi|svc|ldrex|strex|cdp|mrc|mrrc|mcr|mcrr|ldc|stc)(?:eq|ne|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al)?|ldr(?:eq|ne|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al)?(?:t|b|bt|sb|h|sh|d)?|str(?:eq|ne|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al)?(?:t|b|bt|h|d)?|(?:ldm|stm)(?:eq|ne|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al)?(?:ia|ib|da|db|fd|ed|fa|ea)|swp(?:eq|ne|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al)?b?|mov(?:t|w)?)\\\\b',\n                caseInsensitive: true\n            },\n            { \n                token: 'variable.parameter.register.assembly', \n                //          first half are actual registers until spsr, where it changes to fields and flexible operands\n                regex: '\\\\b(?:r0|r1|r2|r3|r4|r5|r6|r7|r8|r9|r10|r11|r12|r13|r14|r15|fp|ip|sp|lr|pc|cpsr|spsr|c|f|s|x|lsl|lsr|asr|ror|rrx)\\\\b',\n                caseInsensitive: true \n            },\n            { \n                token: 'constant.character.hexadecimal.assembly',\n                regex: '#0x[A-F0-9]+',\n                caseInsensitive: true \n            },\n            { \n                token: 'constant.character.decimal.assembly',\n                regex: '#[0-9]+' \n            },\n            { \n                token: 'string.assembly', \n                regex: /'([^\\\\']|\\\\.)*'/ \n            },\n            { \n                token: 'string.assembly', \n                regex: /\"([^\\\\\"]|\\\\.)*\"/ \n            },\n            { \n                token: 'support.function.directive.assembly',\n                regex: '(?:\\.section|\\.global|\\.text|\\.asciz|\\.asciiz|\\.ascii|\\.align|\\.byte|\\.end|\\.data|\\.equ|\\.extern|\\.include)'\n            },\n            { \n                token: 'entity.name.function.assembly', \n                regex: '^\\\\s*%%[\\\\w.]+?:$' \n            },\n            { \n                token: 'entity.name.function.assembly', \n                regex: '^\\\\s*%\\\\$[\\\\w.]+?:$' \n            },\n            {\n                token: 'entity.name.function.assembly', \n                regex: '^[\\\\w.]+?:' \n            },\n            { \n                token: 'entity.name.function.assembly', \n                regex: '^[\\\\w.]+?\\\\b'\n            },\n            {\n                token: 'comment.assembly', \n                regex: '\\\\/\\\\*', next: 'comment'\n            },\n            { \n                token: 'comment.assembly', \n                regex: '(?:;|//|@).*$' \n            } \n        ],\n        comment:[\n            {\n                token: 'comment.assembly',\n                regex: '\\\\*\\\\/', next:'start'\n            },\n            {\n                defaultToken:'comment'\n            }\n        ]\n    };\n    \n    this.normalizeRules();\n};\n\nAssemblyARM32HighlightRules.metaData = { fileTypes: [ 's' ],\n      name: 'Assembly ARM32',\n      scopeName: 'source.assembly' };\n\n\noop.inherits(AssemblyARM32HighlightRules, TextHighlightRules);\n\nexports.AssemblyARM32HighlightRules = AssemblyARM32HighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    this.commentBlock = function(session, row) {\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        range = this.commentBlock(session, row);\n        if (range)\n            return range;\n    };\n\n    // must return \"\" if there's no fold, to enable caching\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n\n        // documentation comments\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","AssemblyARM32HighlightRules","FoldMode","Mode","this","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","inherits","lineCommentStart","blockComment","start","end","$id","call","prototype","exports","TextHighlightRules","$rules","token","regex","caseInsensitive","next","comment","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","BaseFoldMode","Range","commentBlock","session","row","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidgetRange","foldStyle","range","indentationBlock","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets"],"sourceRoot":""}