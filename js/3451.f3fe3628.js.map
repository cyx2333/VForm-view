{"version":3,"file":"js/3451.f3fe3628.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/prql.js","webpack://admin/./node_modules/ace-code/src/mode/prql_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar HighlightRules = require(\"./prql_highlight_rules\").PrqlHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    // Extra logic goes here.\n    this.$id = \"ace/mode/prql\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","// https://prql-lang.org/\n// https://github.com/PRQL/prql\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrqlHighlightRules = function() {\n    var builtinFunctions = \"min|max|sum|average|stddev|every|any|concat_array|count|\" +\n    \"lag|lead|first|last|rank|rank_dense|row_number|\" +\n    \"round|as|in|\" +\n    \"tuple_every|tuple_map|tuple_zip|_eq|_is_null|\" +\n    \"from_text|\" +\n    \"lower|upper|\" +\n    \"read_parquet|read_csv\";\n\n    var builtinTypes = [\n        \"bool\",\n        \"int\",\n        \"int8\",\n        \"int16\",\n        \"int32\",\n        \"int64\",\n        \"int128\",\n        \"float\",\n        \"text\",\n        \"timestamp\",\n        \"set\"].join(\"|\");\n\n    var keywordMapper = this.createKeywordMapper({\n       \"constant.language\": \"null\",\n       \"constant.language.boolean\": \"true|false\",\n       \"keyword\": \"let|into|case|prql|type|module|internal\",\n       \"storage.type\": \"let|func\",\n       \"support.function\": builtinFunctions,\n       \"support.type\": builtinTypes,\n       \"variable.language\": \"date|math\"\n    }, \"identifier\");\n    \n    var escapeRe = /\\\\(\\d+|['\"\\\\&bfnrt]|u\\{[0-9a-fA-F]{1,6}\\}|x[0-9a-fA-F]{2})/;\n    var identifierRe = /[A-Za-z_][a-z_A-Z0-9]/.source;\n    var numRe = /(?:\\d\\d*(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+\\b)?/.source;\n    var bidi = \"[\\\\u202A\\\\u202B\\\\u202D\\\\u202E\\\\u2066\\\\u2067\\\\u2068\\\\u202C\\\\u2069]\";\n\n    this.$rules = {\n        start: [\n        {\n            token: \"string.start\",\n            regex: 's?\"',\n            next: \"string\"\n        }, {\n            token: \"string.start\",\n            regex: 'f\"',\n            next: \"fstring\"\n        }, {\n            token: \"string.start\",\n            regex: 'r\"',\n            next: \"rstring\"\n        }, {\n            token: \"string.single\",\n            start: \"'\",\n            end: \"'\"\n        }, {\n            token: \"string.character\",\n            regex: \"'(?:\" + escapeRe.source + \"|.)'?\"\n        }, {\n            token: \"constant.language\",\n            regex: \"^\" + identifierRe + \"*\"\n        }, {\n            token : [\"constant.numeric\", \"keyword\"],\n            regex : \"(\" + numRe + \")(years|months|weeks|days|hours|minutes|seconds|milliseconds|microseconds)\"\n        }, {\n            token: \"constant.numeric\", // hexadecimal, octal and binary\n            regex: /0(?:[xX][0-9a-fA-F]+|[oO][0-7]+|[bB][01]+)\\b/\n        }, {\n            token: \"constant.numeric\", // decimal integers and floats\n            regex: numRe\n        }, {\n            token: \"comment.block.documentation\",\n            regex: \"#!.*\"\n        }, {\n            token: \"comment.line.number-sign\",\n            regex: \"#.*\"\n        }, {\n            token: \"keyword.operator\",\n            regex: /\\|\\s*/,\n            next: \"pipe\"\n        }, {\n            token: \"keyword.operator\",\n            regex: /->|=>|==|!=|>=|<=|~=|&&|\\|\\||\\?\\?|\\/\\/|@/\n        }, {\n            token: \"invalid.illegal\",\n            regex: bidi\n        }, {\n            token: \"punctuation.operator\",\n            regex: /[,`]/\n        }, {\n            token: keywordMapper,\n            regex: \"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"\n        }, {\n            token: \"paren.lparen\",\n            regex: /[\\[({]/\n        }, {\n            token: \"paren.rparen\",\n            regex: /[\\])}]/\n        } ],\n        pipe: [{\n            token: \"constant.language\",\n            regex: identifierRe + \"*\",\n            next: \"pop\"\n        },{\n            token: \"error\",\n            regex: \"\",\n            next: \"pop\"\n        }],\n        string: [{\n            token: \"constant.character.escape\",\n            regex: escapeRe\n        }, {\n            token: \"text\",\n            regex: /\\\\(\\s|$)/,\n            next: \"stringGap\"\n        }, {\n            token: \"string.end\",\n            regex: '\"',\n            next: \"start\"\n        }, {\n            token: \"invalid.illegal\",\n            regex: bidi\n        }, {\n            defaultToken: \"string.double\"\n        }],\n        stringGap: [{\n            token: \"text\",\n            regex: /\\\\/,\n            next: \"string\"\n        }, {\n            token: \"error\",\n            regex: \"\",\n            next: \"start\"\n        }],\n        fstring: [{\n            token: \"constant.character.escape\",\n            regex: escapeRe\n        }, {\n            token: \"string.end\",\n            regex: '\"',\n            next: \"start\"\n        }, {\n            token: \"invalid.illegal\",\n            regex: bidi\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fstringParenRules\"\n        }, {\n            token: \"invalid.illegal\",\n            regex: bidi\n        }, {\n            defaultToken: \"string\"\n        }],\n        fstringParenRules: [{\n            token: \"constant.language\",\n            regex: \"^\" + identifierRe + \"*\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"}\",\n            next: \"pop\"\n        }],\n        rstring: [{\n            token: \"string.end\",\n            regex: '\"',\n            next: \"start\"\n        }, {\n            token: \"invalid.illegal\",\n            regex: bidi\n        }, {\n            defaultToken: \"string\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(PrqlHighlightRules, TextHighlightRules);\n\nexports.PrqlHighlightRules = PrqlHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","HighlightRules","Mode","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","TextHighlightRules","PrqlHighlightRules","builtinFunctions","builtinTypes","join","keywordMapper","createKeywordMapper","escapeRe","identifierRe","numRe","bidi","$rules","token","regex","next","pipe","string","defaultToken","stringGap","fstring","push","fstringParenRules","rstring","normalizeRules"],"sourceRoot":""}