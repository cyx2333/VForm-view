{"version":3,"file":"js/2086.0ecafcd1.js","mappings":"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GV,CAACC,QAAS,WACV,CAACA,QAAS,aACV,CAACA,QAAS,aAEV,CAACC,aAAc,UAGvB,CACIL,MAAO,yBACPC,MAAO,4EAGX,CACID,MAAO,+BACPC,MAAO,QAEX,CACID,MAAO,+BACPC,MAAO,SAEX,CACID,MAAO,oCACPC,MAAO,OACPC,KAAM,gBAEV,CACIF,MAAO,6BACPC,MAAO,gCAEX,CACID,MAAO,eACPC,MAAO,SAGX,CACID,MAAO,eACPC,MAAO,WAEX,CAACG,QAAS,aACV,CAACA,QAAS,WACV,CAACA,QAAS,aACV,CAACA,QAAS,cAEdR,aAAc,CAAC,CACXK,MAAO,OACPD,MAAO,kCACPG,KAAM,OACP,CACCE,aAAc,YAElB,UAAa,CACT,CACIL,MAAO,8BACPC,MAAO,wCAEX,CACID,MAAO,6BACPC,MAAO,wEAGf,UAAa,CACT,CACID,MAAO,CAAC,gCAAiC,oBACzCC,MAAO,2BAGf,uBAA0B,CACtB,CACID,MAAO,qBACPC,MAAO,0DAGf,QAAW,CACP,CACID,MAAO,8BACPC,MAAO,IACPC,KACI,CAAC,CACGF,MAAO,8BACPC,MAAO,IACPE,KAAM,OAEN,CAACC,QAAS,iBACV,CAACC,aAAc,YAE3B,CACIL,MAAO,8BACPC,MAAO,IACPC,KACI,CAAC,CACGF,MAAO,8BACPC,MAAO,IACPE,KAAM,OAEN,CAACC,QAAS,iBACV,CAACA,QAAS,iBACV,CAACC,aAAc,aAG/B,cAAiB,CACb,CACIL,MAAO,kCACPC,MAAO,UAGf,UAAa,CACT,CACID,MAAO,mBACPC,MAAO,0DAGf,cAAiB,CACb,CACID,MAAO,2CACPC,MAAO,aACPC,KAAM,CAAC,CACHF,MAAO,yCACPC,MAAO,MACPE,KAAM,OAEN,CAACC,QAAS,0BACV,CAACA,QAAS,aACV,CAACA,QAAS,aACV,CAACA,QAAS,WACV,CAACA,QAAS,aACV,CAACA,QAAS,eACV,CAACC,aAAc,kBAI3B,UAAa,CACT,CACIL,MAAO,6BACPC,MAAO,kgBAGf,YAAe,CACX,CACID,MAAO,eACPC,MAAO,OAEX,CACID,MAAO,eACPC,MAAO,SAInBzE,KAAK8E,gBACT,EAEArF,EAAIe,SAASmD,EAAyBW,GAEtCxE,EAAQ,EAA0B6D,C","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/matching_brace_outdent.js","webpack://admin/./node_modules/ace-code/src/mode/terraform.js","webpack://admin/./node_modules/ace-code/src/mode/terraform_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar TerraformHighlightRules = require(\"./terraform_highlight_rules\").TerraformHighlightRules;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\nvar Mode = function () {\n    TextMode.call(this);\n    this.HighlightRules = TerraformHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n    this.foldingRules = new CStyleFoldMode();\n};\n\noop.inherits(Mode, TextMode);\n\n\n(function () {\n    this.lineCommentStart = [\"#\", \"//\"];\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    \n    this.$id = \"ace/mode/terraform\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar TerraformHighlightRules = function () {\n\n\n    this.$rules = {\n        \"start\": [\n            {\n                token: ['storage.function.terraform'],\n                regex: '\\\\b(output|resource|data|variable|module|export)\\\\b'\n            },\n            {\n                token: \"variable.terraform\",\n                regex: \"\\\\$\\\\s\",\n                push: [\n                    {\n                        token: \"keyword.terraform\",\n                        regex: \"(-var-file|-var)\"\n                    },\n                    {\n                        token: \"variable.terraform\",\n                        regex: \"\\\\n|$\",\n                        next: \"pop\"\n                    },\n\n                    {include: \"strings\"},\n                    {include: \"variables\"},\n                    {include: \"operators\"},\n\n                    {defaultToken: \"text\"}\n                ]\n            },\n            {\n                token: \"language.support.class\",\n                regex: \"\\\\b(timeouts|provider|connection|provisioner|lifecycleprovider|atlas)\\\\b\"\n            },\n\n            {\n                token: \"singleline.comment.terraform\",\n                regex: '#.*$'\n            },\n            {\n                token: \"singleline.comment.terraform\",\n                regex: '//.*$'\n            },\n            {\n                token: \"multiline.comment.begin.terraform\",\n                regex: /\\/\\*/,\n                push: \"blockComment\"\n            },\n            {\n                token: \"storage.function.terraform\",\n                regex: \"^\\\\s*(locals|terraform)\\\\s*{\"\n            },\n            {\n                token: \"paren.lparen\",\n                regex: \"[[({]\"\n            },\n\n            {\n                token: \"paren.rparen\",\n                regex: \"[\\\\])}]\"\n            },\n            {include: \"constants\"},\n            {include: \"strings\"},\n            {include: \"operators\"},\n            {include: \"variables\"}\n        ],\n        blockComment: [{\n            regex: /\\*\\//,\n            token: \"multiline.comment.end.terraform\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment\"\n        }],\n        \"constants\": [\n            {\n                token: \"constant.language.terraform\",\n                regex: \"\\\\b(true|false|yes|no|on|off|EOF)\\\\b\"\n            },\n            {\n                token: \"constant.numeric.terraform\",\n                regex: \"(\\\\b([0-9]+)([kKmMgG]b?)?\\\\b)|(\\\\b(0x[0-9A-Fa-f]+)([kKmMgG]b?)?\\\\b)\"\n            }\n        ],\n        \"variables\": [\n            {\n                token: [\"variable.assignment.terraform\", \"keyword.operator\"],\n                regex: \"\\\\b([a-zA-Z_]+)(\\\\s*=)\"\n            }\n        ],\n        \"interpolated_variables\": [\n            {\n                token: \"variable.terraform\",\n                regex: \"\\\\b(var|self|count|path|local)\\\\b(?:\\\\.*[a-zA-Z_-]*)?\"\n            }\n        ],\n        \"strings\": [\n            {\n                token: \"punctuation.quote.terraform\",\n                regex: \"'\",\n                push:\n                    [{\n                        token: 'punctuation.quote.terraform',\n                        regex: \"'\",\n                        next: 'pop'\n                    },\n                        {include: \"escaped_chars\"},\n                        {defaultToken: 'string'}]\n            },\n            {\n                token: \"punctuation.quote.terraform\",\n                regex: '\"',\n                push:\n                    [{\n                        token: 'punctuation.quote.terraform',\n                        regex: '\"',\n                        next: 'pop'\n                    },\n                        {include: \"interpolation\"},\n                        {include: \"escaped_chars\"},\n                        {defaultToken: 'string'}]\n            }\n        ],\n        \"escaped_chars\": [\n            {\n                token: \"constant.escaped_char.terraform\",\n                regex: \"\\\\\\\\.\"\n            }\n        ],\n        \"operators\": [\n            {\n                token: \"keyword.operator\",\n                regex: \"\\\\?|:|==|!=|>|<|>=|<=|&&|\\\\|\\\\\\||!|%|&|\\\\*|\\\\+|\\\\-|/|=\"\n            }\n        ],\n        \"interpolation\": [\n            {// TODO: double $\n                token: \"punctuation.interpolated.begin.terraform\",\n                regex: \"\\\\$?\\\\$\\\\{\",\n                push: [{\n                    token: \"punctuation.interpolated.end.terraform\",\n                    regex: \"\\\\}\",\n                    next: \"pop\"\n                },\n                    {include: \"interpolated_variables\"},\n                    {include: \"operators\"},\n                    {include: \"constants\"},\n                    {include: \"strings\"},\n                    {include: \"functions\"},\n                    {include: \"parenthesis\"},\n                    {defaultToken: \"punctuation\"}\n                ]\n            }\n        ],\n        \"functions\": [\n            {\n                token: \"keyword.function.terraform\",\n                regex: \"\\\\b(abs|basename|base64decode|base64encode|base64gzip|base64sha256|base64sha512|bcrypt|ceil|chomp|chunklist|cidrhost|cidrnetmask|cidrsubnet|coalesce|coalescelist|compact|concat|contains|dirname|distinct|element|file|floor|flatten|format|formatlist|indent|index|join|jsonencode|keys|length|list|log|lookup|lower|map|matchkeys|max|merge|min|md5|pathexpand|pow|replace|rsadecrypt|sha1|sha256|sha512|signum|slice|sort|split|substr|timestamp|timeadd|title|transpose|trimspace|upper|urlencode|uuid|values|zipmap)\\\\b\"\n            }\n        ],\n        \"parenthesis\": [\n            {\n                token: \"paren.lparen\",\n                regex: \"\\\\[\"\n            },\n            {\n                token: \"paren.rparen\",\n                regex: \"\\\\]\"\n            }\n        ]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(TerraformHighlightRules, TextHighlightRules);\n\nexports.TerraformHighlightRules = TerraformHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","TerraformHighlightRules","CStyleFoldMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","foldingRules","lineCommentStart","blockComment","$id","TextHighlightRules","$rules","token","regex","push","next","include","defaultToken","normalizeRules"],"sourceRoot":""}