{"version":3,"file":"js/5252.abb5beca.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/coffee.js","webpack://admin/./node_modules/ace-code/src/mode/space.js","webpack://admin/./node_modules/ace-code/src/mode/space_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    this.commentBlock = function(session, row) {\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        range = this.commentBlock(session, row);\n        if (range)\n            return range;\n    };\n\n    // must return \"\" if there's no fold, to enable caching\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n\n        // documentation comments\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n","\"use strict\";\nvar oop = require(\"../lib/oop\");\n// defines the parent mode\nvar TextMode = require(\"./text\").Mode;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\n// defines the language specific highlighters and folding rules\nvar SpaceHighlightRules = require(\"./space_highlight_rules\").SpaceHighlightRules;\nvar Mode = function() {\n    // set everything up\n    this.HighlightRules = SpaceHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function() {\n    \n    this.$id = \"ace/mode/space\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SpaceHighlightRules = function() {\n\n    // Todo: support multiline values that escape the newline with spaces.\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"empty_line\",\n                regex : / */,\n                next : \"key\"\n            },\n            {\n                token : \"empty_line\",\n                regex : /$/,\n                next : \"key\"\n            }\n        ],\n        \"key\" : [\n            {\n                token : \"variable\",\n                regex : /\\S+/\n            },\n            {\n                token : \"empty_line\",\n                regex : /$/,\n                next : \"start\"\n            },{\n                token : \"keyword.operator\",\n                regex : / /,\n                next  : \"value\"\n            }\n        ],\n        \"value\" : [\n            {\n                token : \"keyword.operator\",\n                regex : /$/,\n                next  : \"start\"\n            },\n            {\n                token : \"string\",\n                regex : /[^$]/\n            }\n        ]\n    };\n    \n};\n\noop.inherits(SpaceHighlightRules, TextHighlightRules);\n\nexports.SpaceHighlightRules = SpaceHighlightRules;\n"],"names":["oop","require","BaseFoldMode","Range","FoldMode","exports","inherits","this","commentBlock","session","row","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidgetRange","foldStyle","range","indentationBlock","getFoldWidget","indent","next","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","SpaceHighlightRules","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$id","TextHighlightRules","$rules","token","regex"],"sourceRoot":""}