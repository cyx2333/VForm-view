{"version":3,"file":"js/2925.ff529e7b.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js","webpack://admin/./node_modules/ace-code/src/mode/zeek.js","webpack://admin/./node_modules/ace-code/src/mode/zeek_highlight_rules.js"],"sourcesContent":["\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n","/*\n  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js\n*/\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ZeekHighlightRules = require(\"./zeek_highlight_rules\").ZeekHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = ZeekHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    // Extra logic goes here.\n    this.$id = \"ace/mode/zeek\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ZeekHighlightRules = function() {\n    // regexp must not have capturing parentheses. Use (?:) instead.\n    // regexps are ordered -> the first match is used\n\n    this.$rules = {\n        \"start\": [\n            {\n            token: \"comment.line\",\n            regex: \"#.*$\"\n            },\n            {\n            token: \"string.double\",\n            regex: /\"/,\n            next: \"string-state\"\n            },\n            {\n            token: \"string.regexp\",\n            regex: \"(/)(?=.*/)\",\n            next: \"pattern-state\"\n            },\n            {\n            token: [\"keyword.other\", \"meta.preprocessor\"],\n            regex: /(@(?:load-plugin|load-sigs|load|unload))(.*$)/\n            },\n            {\n            token: \"keyword.other\",\n            regex: /@(?:DEBUG|DIR|FILENAME|deprecated|if|ifdef|ifndef|else|endif)/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.preprocessor\",\n                \"keyword.operator\",\n                \"meta.preprocessor\"\n            ],\n            regex: /(@prefixes)(\\s*)(\\+?=)(.*$)/\n            },\n            {\n            token: \"storage.modifier.attribute\",\n            regex: /\\&\\b(?:redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|error_handler|type_column|deprecated)\\b/\n            },\n            {\n            token: \"constant.language\",\n            regex: /\\b(?:T|F)\\b/\n            },\n            {\n            token: \"constant.numeric.port\",\n            regex: /\\b\\d{1,5}\\/(?:udp|tcp|icmp|unknown)\\b/\n            },\n            {\n            token: \"constant.numeric.addr\",\n            regex: /\\b(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\b/,\n            comment: \"IPv4 address\"\n            },\n            {\n            token: \"constant.numeric.addr\",\n            regex: /\\[(?:[0-9a-fA-F]{0,4}:){2,7}(?:[0-9a-fA-F]{0,4})?(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2})\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2}))?\\]/,\n            comment: \"IPv6 address\"\n            },\n            {\n            token: \"constant.numeric.float.decimal.interval\",\n            regex: /(?:(?:\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*)|\\d+)\\s*(?:day|hr|min|msec|usec|sec)s?/\n            },\n            {\n            token: \"constant.numeric.float.decimal\",\n            regex: /\\d*\\.\\d*(?:[eE][+-]?\\d+)?|\\d*[eE][+-]?\\d+|\\d*\\.\\d*/\n            },\n            {\n            token: \"constant.numeric.hostname\",\n            regex: /\\b[A-Za-z0-9][A-Za-z0-9\\-]*(?:\\.[A-Za-z0-9][A-Za-z0-9\\-]*)+\\b/\n            },\n            {\n            token: \"constant.numeric.integer.hexadecimal\",\n            regex: /\\b0x[0-9a-fA-F]+\\b/\n            },\n            {\n            token: \"constant.numeric.integer.decimal\",\n            regex: /\\b\\d+\\b/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /==|!=|<=|<|>=|>/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /(&&)|(\\|\\|)|(!)/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /=|\\+=|-=/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /\\+\\+|\\+|--|-|\\*|\\/|%/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /&|\\||\\^|~/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /\\b(?:in|as|is)\\b/\n            },\n            {\n            token: \"punctuation.terminator\",\n            regex: /;/\n            },\n            {\n            token: \"punctuation.accessor\",\n            regex: /\\??\\$/\n            },\n            {\n            token: \"punctuation.accessor\",\n            regex: /::/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /\\?/\n            },\n            // Unsure how to tell if colon is used as operator vs. separator.\n            // {\n            // token: \"keyword.operator\",\n            // regex: /:/\n            // },\n            {\n            token: \"punctuation.separator\",\n            regex: /:/\n            },\n            {\n            token: \"punctuation.separator\",\n            regex: /,/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.namespace\",\n                \"entity.name.namespace\"\n            ],\n            regex: /(module)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)/\n            },\n            {\n            token: \"keyword.other\",\n            regex: /\\bexport\\b/\n            },\n            {\n            token: \"keyword.control.conditional\",\n            regex: /\\b(?:if|else)\\b/\n            },\n            {\n            token: \"keyword.control\",\n            regex: /\\b(?:for|while)\\b/\n            },\n            {\n            token: \"keyword.control\",\n            regex: /\\b(?:return|break|next|continue|fallthrough)\\b/\n            },\n            {\n            token: \"keyword.control\",\n            regex: /\\b(?:switch|default|case)\\b/\n            },\n            {\n            token: \"keyword.other\",\n            regex: /\\b(?:add|delete)\\b/\n            },\n            {\n            token: \"keyword.other\",\n            regex: /\\bprint\\b/\n            },\n            {\n            token: \"keyword.control\",\n            regex: /\\b(?:when|timeout|schedule)\\b/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.struct.record\",\n                \"entity.name.struct.record\",\n                \"meta.struct.record\",\n                \"punctuation.separator\",\n                \"meta.struct.record\",\n                \"storage.type.struct.record\"\n            ],\n            regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(record)\\b/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.enum\",\n                \"entity.name.enum\",\n                \"meta.enum\",\n                \"punctuation.separator\",\n                \"meta.enum\",\n                \"storage.type.enum\"\n            ],\n            regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)(\\s*\\b)(enum)\\b/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.type\",\n                \"entity.name.type\",\n                \"meta.type\",\n                \"punctuation.separator\"\n            ],\n            regex: /\\b(type)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(\\s*)(:)/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.struct.record\",\n                \"storage.type.struct.record\",\n                \"meta.struct.record\",\n                \"entity.name.struct.record\"\n            ],\n            regex: /\\b(redef)(\\s+)(record)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n            },\n            {\n            token: [\n                \"keyword.other\",\n                \"meta.enum\",\n                \"storage.type.enum\",\n                \"meta.enum\",\n                \"entity.name.enum\"\n            ],\n            regex: /\\b(redef)(\\s+)(enum)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n            },\n            {\n            token: [\n                \"storage.type\",\n                \"text\",\n                \"entity.name.function.event\"\n            ],\n            regex: /\\b(event)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n            },\n            {\n            token: [\n                \"storage.type\",\n                \"text\",\n                \"entity.name.function.hook\"\n            ],\n            regex: /\\b(hook)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n            },\n            {\n            token: [\n                \"storage.type\",\n                \"text\",\n                \"entity.name.function\"\n            ],\n            regex: /\\b(function)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)(?=s*\\()/\n            },\n            {\n            token: \"keyword.other\",\n            regex: /\\bredef\\b/\n            },\n            {\n            token: \"storage.type\",\n            regex: /\\bany\\b/\n            },\n            {\n            token: \"storage.type\",\n            regex: /\\b(?:enum|record|set|table|vector)\\b/\n            },\n            {\n            token: [\n                \"storage.type\",\n                \"text\",\n                \"keyword.operator\",\n                \"text\",\n                \"storage.type\"\n            ],\n            regex: /\\b(opaque)(\\s+)(of)(\\s+)([A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*)\\b/\n            },\n            {\n            token: \"keyword.operator\",\n            regex: /\\bof\\b/\n            },\n            {\n            token: \"storage.type\",\n            regex: /\\b(?:addr|bool|count|double|file|int|interval|pattern|port|string|subnet|time)\\b/\n            },\n            {\n            token: \"storage.type\",\n            regex: /\\b(?:function|hook|event)\\b/\n            },\n            {\n            token: \"storage.modifier\",\n            regex: /\\b(?:global|local|const|option)\\b/\n            },\n            {\n            token: \"entity.name.function.call\",\n            regex: /\\b[A-Za-z_][A-Za-z_0-9]*(?:::[A-Za-z_][A-Za-z_0-9]*)*(?=s*\\()/\n            },\n            {\n            token: \"punctuation.section.block.begin\",\n            regex: /\\{/\n            },\n            {\n            token: \"punctuation.section.block.end\",\n            regex: /\\}/\n            },\n            {\n            token: \"punctuation.section.brackets.begin\",\n            regex: /\\[/\n            },\n            {\n            token: \"punctuation.section.brackets.end\",\n            regex: /\\]/\n            },\n            {\n            token: \"punctuation.section.parens.begin\",\n            regex: /\\(/\n            },\n            {\n            token: \"punctuation.section.parens.end\",\n            regex: /\\)/\n            }\n\n        ], // state: start\n\n        \"string-state\": [\n            {\n            token: \"constant.character.escape\",\n            regex: /\\\\./\n            },\n            {\n            token: \"string.double\",\n            regex: /\"/,\n            next: \"start\"\n            },\n            {\n            token: \"constant.other.placeholder\",\n            regex: /%-?[0-9]*(\\.[0-9]+)?[DTdxsefg]/\n            },\n            {\n            token: \"string.double\",\n            regex: \".\"\n            }\n        ], // state: string-state\n\n        \"pattern-state\": [\n            {\n            token: \"constant.character.escape\",\n            regex: /\\\\./\n            },\n            {\n            token: \"string.regexp\",\n            regex: \"/\",\n            next: \"start\"\n            },\n            {\n            token: \"string.regexp\",\n            regex: \".\"\n            }\n        ] // state: pattern-state\n\n    };\n\n    this.normalizeRules();\n};\n\nZeekHighlightRules.metaData = {\n    fileTypes: [\"bro\", \"zeek\"],\n    name: \"Zeek\",\n    scopeName: \"source.zeek\"\n};\n\n\noop.inherits(ZeekHighlightRules, TextHighlightRules);\n\nexports.ZeekHighlightRules = ZeekHighlightRules;\n"],"names":["oop","require","Range","BaseFoldMode","FoldMode","exports","commentRegex","this","foldingStartMarker","RegExp","source","replace","start","foldingStopMarker","end","inherits","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","ZeekHighlightRules","Mode","HighlightRules","foldingRules","lineCommentStart","$id","TextHighlightRules","$rules","token","regex","next","comment","normalizeRules","metaData","fileTypes","name","scopeName"],"sourceRoot":""}