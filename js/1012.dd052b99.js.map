{"version":3,"file":"js/1012.dd052b99.js","mappings":"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","sources":["webpack://admin/./node_modules/ace-code/src/mode/apex.js","webpack://admin/./node_modules/ace-code/src/mode/apex_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/doc_comment_highlight_rules.js","webpack://admin/./node_modules/ace-code/src/mode/folding/cstyle.js"],"sourcesContent":["/* caption: Apex; extensions: apex,cls,trigger,tgr */\n\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"../mode/text\").Mode;\nvar ApexHighlightRules = require(\"./apex_highlight_rules\").ApexHighlightRules;\nvar FoldMode = require(\"../mode/folding/cstyle\").FoldMode;\n\nfunction ApexMode() {\n    TextMode.call(this);\n\n    this.HighlightRules = ApexHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n}\n\noop.inherits(ApexMode, TextMode);\n\nApexMode.prototype.lineCommentStart = \"//\";\n\nApexMode.prototype.blockComment = {\n    start: \"/*\",\n    end: \"*/\"\n};\n\nexports.Mode = ApexMode;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"../mode/text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = require(\"../mode/doc_comment_highlight_rules\").DocCommentHighlightRules;\n\nvar ApexHighlightRules = function() {\n    var mainKeywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"activate|any|autonomous|begin|bigdecimal|byte|cast|char|collect|const\"\n             + \"|end|exit|export|float|goto|group|having|hint|import|inner|into|join|loop|number|object|of|outer\"\n             + \"|parallel|pragma|retrieve|returning|search|short|stat|synchronized|then|this_month\"\n             + \"|transaction|type|when\",\n        \"keyword\": \"private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final\"\n             + \"|and|array|as|asc|break|bulk|by|catch|class|commit|continue|convertcurrency\"\n             + \"|delete|desc|do|else|enum|extends|false|final|finally|for|from|future|global\"\n             + \"|if|implements|in|insert|instanceof|interface|last_90_days|last_month\"\n             + \"|last_n_days|last_week|like|limit|list|map|merge|new|next_90_days|next_month|next_n_days\"\n             + \"|next_week|not|null|nulls|on|or|override|package|return\"\n             + \"|rollback|savepoint|select|set|sort|super|testmethod|this|this_week|throw|today\"\n             + \"|tolabel|tomorrow|trigger|true|try|undelete|update|upsert|using|virtual|webservice\"\n             + \"|where|while|yesterday|switch|case|default\",\n        \"storage.type\":\n            \"def|boolean|byte|char|short|int|float|pblob|date|datetime|decimal|double|id|integer|long|string|time|void|blob|Object\",\n        \"constant.language\":\n            \"true|false|null|after|before|count|excludes|first|includes|last|order|sharing|with\",\n        \"support.function\":\n            \"system|apex|label|apexpages|userinfo|schema\"\n    }, \"identifier\", true);\n    function keywordMapper(value) {\n        if (value.slice(-3) == \"__c\") return \"support.function\";\n        return mainKeywordMapper(value);\n    }\n    \n    function string(start, options) {\n        return {\n            regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n            token: \"string.start\",\n            next: [{\n                regex: options.escape,\n                token: \"character.escape\"\n            }, {\n                regex: options.error,\n                token: \"error.invalid\"\n            }, {\n                regex: start + (options.multiline ? \"\" : \"|$\"),\n                token: \"string.end\",\n                next: options.next || \"start\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        };\n    }\n    \n    function comments() {\n        return [{\n                token : \"comment\",\n                regex : \"\\\\/\\\\/(?=.)\",\n                next : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment\", regex : \"$|^\", next : \"start\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : /\\/\\*/,\n                next : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment\", regex : \"\\\\*\\\\/\", next : \"start\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            }\n        ];\n    }\n    \n    this.$rules = {\n        start: [\n            string(\"'\", {\n                escape: /\\\\[nb'\"\\\\]/,\n                error: /\\\\./,\n                multiline: false\n            }),\n            comments(\"c\"),\n            {\n                type: \"decoration\",\n                token: [\n                    \"meta.package.apex\",\n                    \"keyword.other.package.apex\",\n                    \"meta.package.apex\",\n                    \"storage.modifier.package.apex\",\n                    \"meta.package.apex\",\n                    \"punctuation.terminator.apex\"\n                ],\n                regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*)((?:;)?))?/\n            }, {\n                 regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                 token: \"constant.language\"\n            },\n            {\n                regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                token: keywordMapper\n            },  \n            {\n                regex: \"`#%\",\n                token: \"error.invalid\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /[+-]?\\d+(?:(?:\\.\\d*)?(?:[LlDdEe][+-]?\\d+)?)\\b|\\.\\d+[LlDdEe]/\n            }, {\n                token : \"keyword.operator\",\n                regex : /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|[!$%&*+\\-~\\/^]=?/,\n                next  : \"start\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : /[?:,;.]/,\n                next  : \"start\"\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[]/,\n                next  : \"maybe_soql\",\n                merge : false\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[({]/,\n                next  : \"start\",\n                merge : false\n            }, {\n                token : \"paren.rparen\",\n                regex : /[\\])}]/,\n                merge : false\n            } \n        ], \n        maybe_soql: [{\n            regex: /\\s+/,\n            token: \"text\"\n        }, {\n            regex: /(SELECT|FIND)\\b/,\n            token: \"keyword\",\n            caseInsensitive: true,\n            next: \"soql\"\n        }, {\n            regex: \"\",\n            token: \"none\",\n            next: \"start\"\n        }],\n        soql: [{\n            regex: \"(:?ASC|BY|CATEGORY|CUBE|DATA|DESC|END|FIND|FIRST|FOR|FROM|GROUP|HAVING|IN|LAST\"\n                + \"|LIMIT|NETWORK|NULLS|OFFSET|ORDER|REFERENCE|RETURNING|ROLLUP|SCOPE|SELECT\"\n                + \"|SNIPPET|TRACKING|TYPEOF|UPDATE|USING|VIEW|VIEWSTAT|WHERE|WITH|AND|OR)\\\\b\",\n            token: \"keyword\",\n            caseInsensitive: true\n        }, {\n            regex: \"(:?target_length|toLabel|convertCurrency|count|Contact|Account|User|FIELDS)\\\\b\",\n            token: \"support.function\",\n            caseInsensitive: true\n        }, {\n            token : \"paren.rparen\",\n            regex : /[\\]]/,\n            next  : \"start\",\n            merge : false\n        }, \n        string(\"'\", {\n            escape: /\\\\[nb'\"\\\\]/,\n            error: /\\\\./,\n            multiline: false,\n            next: \"soql\"\n        }),\n        string('\"', {\n            escape: /\\\\[nb'\"\\\\]/,\n            error: /\\\\./,\n            multiline: false,\n            next: \"soql\"\n        }),\n        {\n            regex: /\\\\./,\n            token: \"character.escape\"\n        },\n        {\n            regex : /[\\?\\&\\|\\!\\{\\}\\[\\]\\(\\)\\^\\~\\*\\:\\\"\\'\\+\\-\\,\\.=\\\\\\/]/,\n            token : \"keyword.operator\"\n        }],\n        \n        \"log-start\" : [ {\n            token : \"timestamp.invisible\",\n            regex : /^[\\d:.() ]+\\|/, \n            next: \"log-header\"\n        },  {\n            token : \"timestamp.invisible\",\n            regex : /^  (Number of|Maximum)[^:]*:/,\n            next: \"log-comment\"\n        }, {\n            token : \"invisible\",\n            regex : /^Execute Anonymous:/,\n            next: \"log-comment\"\n        },  {\n            defaultToken: \"text\"\n        }],\n        \"log-comment\": [{\n            token : \"log-comment\",\n            regex : /.*$/,\n            next: \"log-start\"\n        }],\n        \"log-header\": [{\n            token : \"timestamp.invisible\",\n            regex : /((USER_DEBUG|\\[\\d+\\]|DEBUG)\\|)+/\n        },\n        {\n            token : \"keyword\",\n            regex: \"(?:EXECUTION_FINISHED|EXECUTION_STARTED|CODE_UNIT_STARTED\"\n                + \"|CUMULATIVE_LIMIT_USAGE|LIMIT_USAGE_FOR_NS\"\n                + \"|CUMULATIVE_LIMIT_USAGE_END|CODE_UNIT_FINISHED)\"\n        }, {\n            regex: \"\",\n            next: \"log-start\"\n        }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n        \n\n    this.normalizeRules();\n};\n\n\noop.inherits(ApexHighlightRules, TextHighlightRules);\n\nexports.ApexHighlightRules = ApexHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function () {\n    this.$rules = {\n        \"start\": [\n            {\n                token: \"comment.doc.tag\",\n                regex: \"@\\\\w+(?=\\\\s|$)\"\n            }, DocCommentHighlightRules.getTagRule(), {\n                defaultToken: \"comment.doc.body\",\n                caseInsensitive: true\n            }\n        ]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex: /\\/\\*\\*(?!\\/)/,\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n","\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    \n    //prevent naming conflict with any modes that inherit from cstyle and override this (like csharp)\n    this._getFoldWidgetBase = this.getFoldWidget;\n    \n    /**\n     * Gets fold widget with some non-standard extras:\n     *\n     * @example lineCommentRegionStart\n     *      //#region [optional description]\n     *\n     * @example blockCommentRegionStart\n     *      /*#region [optional description] *[/]\n     *\n     * @example tripleStarFoldingSection\n     *      /*** this folds even though 1 line because it has 3 stars ***[/]\n     * \n     * @note the pound symbol for region tags is optional\n     */\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            // No widget for single line block comment unless region or triple star\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    \n    /**\n     * gets comment region block with end region assumed to be start of comment in any cstyle mode or SQL mode (--) which inherits from this.\n     * There may optionally be a pound symbol before the region/endregion statement\n     */\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n"],"names":["oop","require","TextMode","ApexHighlightRules","FoldMode","ApexMode","call","this","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","inherits","prototype","lineCommentStart","blockComment","start","end","exports","Mode","TextHighlightRules","DocCommentHighlightRules","mainKeywordMapper","createKeywordMapper","keywordMapper","value","slice","string","options","regex","multiline","token","next","escape","error","defaultToken","comments","getTagRule","caseInsensitive","getStartRule","$rules","type","merge","maybe_soql","soql","embedRules","getEndRule","normalizeRules","Range","BaseFoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec"],"sourceRoot":""}